(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{"013z":function(e,t,a){"use strict";var n=a("q1tI"),l=a.n(n),i=a("NmYn"),r=a.n(i),b=a("Wbzz"),o=a("Xrax"),s=a("k4MR"),c=a("TSYQ"),m=a.n(c),p=a("QH2O"),d=a.n(p),u=a("qKvR"),O=function(e){var t,a=e.title,n=e.theme,l=e.tabs,i=void 0===l?[]:l;return Object(u.b)("div",{className:m()(d.a.pageHeader,(t={},t[d.a.withTabs]=i.length,t[d.a.darkMode]="dark"===n,t))},Object(u.b)("div",{className:"bx--grid"},Object(u.b)("div",{className:"bx--row"},Object(u.b)("div",{className:"bx--col-lg-12"},Object(u.b)("h1",{id:"page-title",className:d.a.text},a)))))},j=a("BAC9"),N=function(e){var t=e.relativePagePath,a=e.repository,n=Object(b.useStaticQuery)("1364590287").site.siteMetadata.repository,l=a||n,i=l.baseUrl,r=l.subDirectory,o=i+"/edit/"+l.branch+r+"/src/pages"+t;return i?Object(u.b)("div",{className:"bx--row "+j.row},Object(u.b)("div",{className:"bx--col"},Object(u.b)("a",{className:j.link,href:o},"Edit this page on GitHub"))):null},g=a("FCXl"),h=a("dI71"),x=a("I8xM"),P=function(e){function t(){return e.apply(this,arguments)||this}return Object(h.a)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,a=e.tabs,n=e.slug,l=n.split("/").filter(Boolean).slice(-1)[0],i=a.map((function(e){var t,a=r()(e,{lower:!0,strict:!0}),i=a===l,o=new RegExp(l+"/?(#.*)?$"),s=n.replace(o,a);return Object(u.b)("li",{key:e,className:m()((t={},t[x.selectedItem]=i,t),x.listItem)},Object(u.b)(b.Link,{className:x.link,to:""+s},e))}));return Object(u.b)("div",{className:x.tabsContainer},Object(u.b)("div",{className:"bx--grid"},Object(u.b)("div",{className:"bx--row"},Object(u.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(u.b)("nav",{"aria-label":t},Object(u.b)("ul",{className:x.list},i))))))},t}(l.a.Component),v=a("MjG9"),C=a("CzIb"),f=a("Asxa"),T=a("OIbQ"),w=a.n(T),y=function(e){var t=e.date,a=new Date(t);return t?Object(u.b)(f.c,{className:w.a.row},Object(u.b)(f.a,null,Object(u.b)("div",{className:w.a.text},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null};t.a=function(e){var t=e.pageContext,a=e.children,n=e.location,l=e.Title,i=t.frontmatter,c=void 0===i?{}:i,m=t.relativePagePath,p=t.titleType,d=c.tabs,j=c.title,h=c.theme,x=c.description,f=c.keywords,T=c.date,w=Object(C.a)().interiorTheme,k=Object(b.useStaticQuery)("2456312558").site.pathPrefix,q=k?n.pathname.replace(k,""):n.pathname,E=d?q.split("/").filter(Boolean).slice(-1)[0]||r()(d[0],{lower:!0}):"",M=h||w;return Object(u.b)(s.a,{tabs:d,homepage:!1,theme:M,pageTitle:j,pageDescription:x,pageKeywords:f,titleType:p},Object(u.b)(O,{title:l?Object(u.b)(l,null):j,label:"label",tabs:d,theme:M}),d&&Object(u.b)(P,{title:j,slug:q,tabs:d,currentTab:E}),Object(u.b)(v.a,{padded:!0},a,Object(u.b)(N,{relativePagePath:m}),Object(u.b)(y,{date:T})),Object(u.b)(g.a,{pageContext:t,location:n,slug:q,tabs:d,currentTab:E}),Object(u.b)(o.a,null))}},BAC9:function(e,t,a){e.exports={bxTextTruncateEnd:"EditLink-module--bx--text-truncate--end--2pqje",bxTextTruncateFront:"EditLink-module--bx--text-truncate--front--3_lIE",link:"EditLink-module--link--1qzW3",row:"EditLink-module--row--1B9Gk"}},I8xM:function(e,t,a){e.exports={bxTextTruncateEnd:"PageTabs-module--bx--text-truncate--end--267NA",bxTextTruncateFront:"PageTabs-module--bx--text-truncate--front--3xEQF",tabsContainer:"PageTabs-module--tabs-container--8N4k0",list:"PageTabs-module--list--3eFQc",listItem:"PageTabs-module--list-item--nUmtD",link:"PageTabs-module--link--1mDJ1",selectedItem:"PageTabs-module--selected-item--YPVr3"}},OIbQ:function(e,t,a){e.exports={bxTextTruncateEnd:"last-modified-date-module--bx--text-truncate--end--123zi",bxTextTruncateFront:"last-modified-date-module--bx--text-truncate--front--3xeKz",text:"last-modified-date-module--text--24m-4",row:"last-modified-date-module--row--2BquN"}},QH2O:function(e,t,a){e.exports={bxTextTruncateEnd:"PageHeader-module--bx--text-truncate--end--mZWeX",bxTextTruncateFront:"PageHeader-module--bx--text-truncate--front--3zvrI",pageHeader:"PageHeader-module--page-header--3hIan",darkMode:"PageHeader-module--dark-mode--hBrwL",withTabs:"PageHeader-module--with-tabs--3nKxA",text:"PageHeader-module--text--o9LFq"}},dPNt:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return b})),a.d(t,"default",(function(){return c}));var n=a("wx14"),l=a("zLVn"),i=(a("q1tI"),a("7ljp")),r=a("013z"),b=(a("qKvR"),{}),o={_frontmatter:b},s=r.a;function c(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(i.b)(s,Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",null,"Problem"),Object(i.b)("p",null,"The death star plans canâ€™t be lost no matter what happens so we need to make sure we protect them at all costs."),Object(i.b)("h2",null,"Solution"),Object(i.b)("p",null,"In order to do that you will need to do the following:"),Object(i.b)("h3",null,"Create a ",Object(i.b)("inlineCode",{parentName:"h3"},"PersistentVolume"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The PersistentVolume should be named ",Object(i.b)("inlineCode",{parentName:"p"},"postgresql-pv"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The volume needs a capacity of ",Object(i.b)("inlineCode",{parentName:"p"},"1Gi"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use a storageClassName of ",Object(i.b)("inlineCode",{parentName:"p"},"localdisk"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use the accessMode ",Object(i.b)("inlineCode",{parentName:"p"},"ReadWriteOnce"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Store the data locally on the node using a ",Object(i.b)("inlineCode",{parentName:"p"},"hostPath")," volume at the location ",Object(i.b)("inlineCode",{parentName:"p"},"/mnt/data"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Execute the below commands to creating PersistentVolume using yaml definition."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0}," oc apply -f pv.yaml -n {DEV_NAMESPACE}\n")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'   apiVersion: v1\n   kind: PersistentVolume\n   metadata:\n   name: postgresql-pv\n   spec:\n   storageClassName: localdisk\n   capacity:\n       storage: 1Gi\n   accessModes:\n       - ReadWriteOnce\n   hostPath:\n       path: "/mnt/data"\n')))),Object(i.b)("h3",null,"Create a ",Object(i.b)("inlineCode",{parentName:"h3"},"PersistentVolumeClaim"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The PersistentVolumeClaim should be named ",Object(i.b)("inlineCode",{parentName:"p"},"postgresql-pv-claim"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Set a resource request on the claim for ",Object(i.b)("inlineCode",{parentName:"p"},"500Mi")," of storage.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use the same storageClassName and accessModes as the PersistentVolume so that this claim can bind to the PersistentVolume.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Execute the below commands to creating PersistentVolumeClaim using yaml definition."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0}," oc apply -f pvc.yaml -n {DEV_NAMESPACE}\n")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"   apiVersion: v1\n   kind: PersistentVolumeClaim\n   metadata:\n   name: postgresql-pv-claim\n   spec:\n   storageClassName: localdisk\n   accessModes:\n       - ReadWriteOnce\n   resources:\n       requests:\n       storage: 500Mi\n")))),Object(i.b)("h3",null,"Create a ",Object(i.b)("inlineCode",{parentName:"h3"},"Postgresql")," Pod configured to use the ",Object(i.b)("inlineCode",{parentName:"h3"},"PersistentVolumeClaim"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The Pod should be named ",Object(i.b)("inlineCode",{parentName:"p"},"postgresql-pod"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Use the image ",Object(i.b)("inlineCode",{parentName:"p"},"bitnami/postgresql"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Expose the containerPort ",Object(i.b)("inlineCode",{parentName:"p"},"5432"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Set an ",Object(i.b)("inlineCode",{parentName:"p"},"environment variable")," called ",Object(i.b)("inlineCode",{parentName:"p"},"MYSQL_ROOT_PASSWORD")," with the value ",Object(i.b)("inlineCode",{parentName:"p"},"password"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Add the ",Object(i.b)("inlineCode",{parentName:"p"},"PersistentVolumeClaim")," as a volume and mount it to the container at the path ",Object(i.b)("inlineCode",{parentName:"p"},"/bitnami/postgresql/"),".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Execute the below commands to creating POD using yaml definition."),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0}," oc apply -f postgresql-pod.yaml -n {DEV_NAMESPACE}\n")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"   apiVersion: v1\n   kind: Pod\n   metadata:\n   name: postgresql-pod\n   spec:\n   containers:\n   - name: postgresql\n       image: bitnami/postgresql\n       ports:\n       - containerPort: 5432\n       env:\n       - name: MYSQL_ROOT_PASSWORD\n       value: password\n       volumeMounts:\n       - name: sql-storage\n       mountPath: /bitnami/postgresql/\n   volumes:\n   - name: sql-storage\n       persistentVolumeClaim:\n       claimName: postgresql-pv-claim\n")))))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-developer-foundation-activities-labs-lab-10-index-mdx-743345561d62aaa38940.js.map