{"version":3,"sources":["webpack:///./src/pages/developer-advanced-1/inventory-contract-testing/index.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","PageHeader","title","theme","tabs","className","cx","styles","pageHeader","withTabs","length","darkMode","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","aria-label","list","React","Component","LastModifiedDate","date","lastModified","Date","toLocaleDateString","day","year","month","Default","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","module","exports"],"mappings":"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","file":"component---src-pages-developer-advanced-1-inventory-contract-testing-index-mdx-050faea5a3b5ef854d0e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ibm-gsi-cloudnative-journey/ibm-gsi-cloudnative-journey/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`We have already explained why we need contract-testing and how it works, In this guide, we would implement contract-testing in the Inventory application. In the inventory application, inventory-Service provides stock items and works as a provider, and Inventory BFF works as a consumer. Microservices work in isolation, and it is the consumerâ€™s responsibility to generate contact and the pact-broker responsibility to verify response for the given request. In this guide, we will explain how to generate a contract(Pact).`}</p>\n    <p>{`We will use a readymade inventory BFF application, which we have developed in the developer Intermediate guide and implement contract-testing on top of it.        `}</p>\n    <p>{`To start with, we have to create a pact by providing parameters like consumer, provider, port, log, dir.`}</p>\n    <p>{`We can take consumerName from package.json`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const consumerName = npmPackage.name;\n`}</code></pre>\n    <p>{`We can provide a provider name, for inventory application inventory-management-svc is the provider.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`provider: 'inventory-management-svc',\n`}</code></pre>\n    <p>{`Next we have to provide log, and pacts directory, contract would be stored in pacts directory. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`log: resolve(process.cwd(), \"logs\", \"pact.log\"),\ndir: resolve(process.cwd(), \"pacts\"),\n`}</code></pre>\n    <p>{`Here is code with pact setup. Delay of 30000 added for local testing, though for cluster deployment it is not required.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`beforeAll(() => {\n    provider = new Pact({\n      consumer: consumerName,\n      provider: 'inventory-management-svc',      \n      port,\n      log: resolve(process.cwd(), \"logs\", \"pact.log\"),\n      dir: resolve(process.cwd(), \"pacts\"),\n    });\n    console.log(\"in before all, provider setup\");\n    return provider.setup();\n  },30000);\n`}</code></pre>\n    <p>{`An instance of the component that will be tested is loaded and configured with the pact server host and port as the base url.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`let classUnderTest: StockItemsApi;\n  beforeEach(() => {    \n    Container.bind(StockItemServiceConfig).factory(() => ({\n        baseUrl: \\`http://localhost:\\${port}\\`\n        \n      }));\n\n    classUnderTest = Container.get(StockItemsApi);\n  });\n`}</code></pre>\n    <p>{`Add expected result`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const expectedResult: BackendStockItem = {\n        id: '1234',\n        manufacturer: 'My manufacturer',\n        name: 'product name',\n        price: 20.0,\n        stock: 1000\n};\n`}</code></pre>\n    <p>{`Here is the add interaction, which publishes the interaction to the Pact server so that it can be used to provide a mock response when the request is made.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`beforeEach(() => {        \n        return provider.addInteraction({\n          state: 'base state',\n          uponReceiving: 'a request for stock items',\n          withRequest: {\n            method: 'GET',\n            path: '/stock-items',\n            headers: {\n              'Accept': 'application/json',\n            }\n          },\n          willRespondWith: {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: Matchers.eachLike(expectedResult),\n          }\n        });\n      });\n`}</code></pre>\n    <p>{`Here is the test, that matched each and every attribute of response with expected result.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`test('should return inventory data', async () => {\n        const result = await classUnderTest.listStockItems();\n\n        expect(result).toEqual([{\n          id: expectedResult.id,\n          name: expectedResult.name,\n          description: expectedResult.name,\n          stock: expectedResult.stock,\n          unitPrice: expectedResult.price,\n          manufacturer: expectedResult.manufacturer,\n          picture: 'https://via.placeholder.com/32.png',\n        }]);\n      });\n`}</code></pre>\n    <p>{`Here is the final code for contract testing.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import {join, resolve} from 'path';\nimport {Container} from 'typescript-ioc';\nimport {Matchers, Pact} from '@pact-foundation/pact';\n\nimport {StockItemsApi} from '../../src/services';\nimport {StockItemServiceConfig} from '../../src/config';\nimport {BackendStockItem} from '../../src/services/stock-items.service';\n\nconst npmPackage = require(join(process.cwd(), 'package.json'));\n\nconst consumerName = npmPackage.name;\n\ndescribe('stock-items.service', () => {\n  test('canary verifies test infrastructure', () => {\n    console.log(\"in test infrastructure\");\n    expect(true).toEqual(true);\n  });\n\n  const port = 1235;\n  let provider: Pact;\n  beforeAll(() => {\n    provider = new Pact({\n      consumer: consumerName,\n      provider: 'inventory-management-svc',\n      //provider: 'inventory-management-svc-solution-yks',      \n      port,\n      log: resolve(process.cwd(), \"logs\", \"pact.log\"),\n      dir: resolve(process.cwd(), \"pacts\"),\n    });\n    console.log(\"in before all, provider setup\");\n    return provider.setup();\n  },30000);\n\n  let classUnderTest: StockItemsApi;\n  beforeEach(() => {\n    console.log(\"in before each---35\");\n    Container.bind(StockItemServiceConfig).factory(() => ({\n        baseUrl: \\`http://localhost:\\${port}\\`\n        \n      }));\n\n    classUnderTest = Container.get(StockItemsApi);\n  });\n\n  afterAll(() => {\n    console.log(\"in afterAll, going to finalize\");    \n    return provider.finalize();\n  });\n\n  \n\n  context('given listStockItems()', () => {\n    context('when called', () => {\n      \n      const expectedResult: BackendStockItem = {\n        id: '1234',\n        manufacturer: 'My manufacturer',\n        name: 'product name',\n        price: 20.0,\n        stock: 1000\n      };\n\n      beforeEach(() => {\n        console.log(\"in before each\"+ provider.server);\n        return provider.addInteraction({\n          state: 'base state',\n          uponReceiving: 'a request for stock items',\n          withRequest: {\n            method: 'GET',\n            path: '/stock-items',\n            headers: {\n              'Accept': 'application/json',\n            }\n          },\n          willRespondWith: {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: Matchers.eachLike(expectedResult),\n          }\n        });\n      });\n\n      test('should return inventory data', async () => {\n        const result = await classUnderTest.listStockItems();\n\n        expect(result).toEqual([{\n          id: expectedResult.id,\n          name: expectedResult.name,\n          description: expectedResult.name,\n          stock: expectedResult.stock,\n          unitPrice: expectedResult.price,\n          manufacturer: expectedResult.manufacturer,\n          picture: 'https://via.placeholder.com/32.png',\n        }]);\n      });\n\n      afterEach(() => {\n        return provider.verify();\n      });\n    });\n  });\n});\n`}</code></pre>\n    <p>{`Here is the example of contract:`}</p>\n    <p>{`##A pact between inventory-management-bff and inventory-management-svc\nRequests from inventory-management-bff to inventory-management-svc`}</p>\n    <p>{`A request for stock items given base state`}</p>\n    <h2>{`Interactions`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Given base state, upon receiving a request for stock items from graphql-ts-yks, with\n{\n  \"method\": \"GET\",\n  \"path\": \"/stock-items\",\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  }\n}\n`}</code></pre>\n    <p>{`inventory-management-svc will respond with:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  \"status\": 200,\n  \"headers\": {\n    \"Content-Type\": \"application/json\"\n  },\n  \"body\": [\n    {\n      \"id\": \"1234\",\n      \"manufacturer\": \"My manufacturer\",\n      \"name\": \"product name\",\n      \"price\": 20,\n      \"stock\": 1000\n    }\n  ]\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"last-modified-date-module--bx--text-truncate--end--123zi\",\"bxTextTruncateFront\":\"last-modified-date-module--bx--text-truncate--front--3xeKz\",\"text\":\"last-modified-date-module--text--24m-4\",\"row\":\"last-modified-date-module--row--2BquN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"darkMode\":\"PageHeader-module--dark-mode--hBrwL\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};"],"sourceRoot":""}