{"componentChunkName":"component---src-pages-developer-foundation-activities-labs-lab-7-index-mdx","path":"/developer-foundation/activities/labs/lab7/","result":{"pageContext":{"frontmatter":{"title":"Kubernetes Lab 7 - Cron Jobs"},"relativePagePath":"/developer-foundation/activities/labs/lab7/index.mdx","titleType":"page","MdxNode":{"id":"d3aa0f6b-d71b-55ec-9dfc-c28ef6f6512a","children":[],"parent":"bc674593-49af-50f5-841a-25f54a468417","internal":{"content":"---\ntitle: Kubernetes Lab 7 - Cron Jobs\n---\n\n## Problem\n\nYour commander has a simple data process that is run periodically to check status. They would like to stop doing this manually in order to save time, so you have been asked to implement a cron job in the Kubernetes cluster to run this process. \n - Create a cron job called xwing-cronjob using the `ibmcase/xwing-status:1.0` image. \n - Have the job run every second minute with the following cron expression: `*/2 * * * *`.\n - Pass the argument `/usr/sbin/xwing-status.sh` to the container.\n\n\n## Solution\n\n - Create the cronjob executing the below command and use the below yaml defination.\n\n ```shell script\n  oc apply -f Downloads/FoundationHandsOn/cronjob.yaml -n {DEV_NAMESPACE}\n  ```\n\n ```yaml\n   apiVersion: batch/v1beta1\n   kind: CronJob\n   metadata:\n   name: xwing-cronjob\n   spec:\n   schedule: \"*/2 * * * *\"\n   jobTemplate:\n      spec:\n         template:\n         spec:\n            containers:\n            - name: xwing-status\n               image: ibmcase/xwing-status:1.0\n               args:\n               - /usr/sbin/xwing-status.sh\n            restartPolicy: OnFailure\n  ```\n\n - To view th Cronjob.\n\n ```shell script\n  oc get cronjob xwing-cronjob -n -n {DEV_NAMESPACE}\n  ```\n\n## Verification\n\n- Run `kubectl get cronjobs.batch` and `LAST-SCHEDULE` to see last time it ran\n- From a bash shell, run the following to see the logs for all jobs:\n\n```\njobs=( $(kubectl get jobs --no-headers -o custom-columns=\":metadata.name\") )\necho -e \"Job \\t\\t\\t\\t Pod \\t\\t\\t\\t\\tLog\"\nfor job in \"${jobs[@]}\"\ndo\n   pod=$(kubectl get pods -l job-name=$job --no-headers -o custom-columns=\":metadata.name\")\n   echo -en \"$job \\t $pod \\t\"\n   kubectl logs $pod\ndone\n```\n","type":"Mdx","contentDigest":"5f77857621fca8a6d2d589fd31120100","owner":"gatsby-plugin-mdx","counter":1119},"frontmatter":{"title":"Kubernetes Lab 7 - Cron Jobs"},"exports":{},"rawBody":"---\ntitle: Kubernetes Lab 7 - Cron Jobs\n---\n\n## Problem\n\nYour commander has a simple data process that is run periodically to check status. They would like to stop doing this manually in order to save time, so you have been asked to implement a cron job in the Kubernetes cluster to run this process. \n - Create a cron job called xwing-cronjob using the `ibmcase/xwing-status:1.0` image. \n - Have the job run every second minute with the following cron expression: `*/2 * * * *`.\n - Pass the argument `/usr/sbin/xwing-status.sh` to the container.\n\n\n## Solution\n\n - Create the cronjob executing the below command and use the below yaml defination.\n\n ```shell script\n  oc apply -f Downloads/FoundationHandsOn/cronjob.yaml -n {DEV_NAMESPACE}\n  ```\n\n ```yaml\n   apiVersion: batch/v1beta1\n   kind: CronJob\n   metadata:\n   name: xwing-cronjob\n   spec:\n   schedule: \"*/2 * * * *\"\n   jobTemplate:\n      spec:\n         template:\n         spec:\n            containers:\n            - name: xwing-status\n               image: ibmcase/xwing-status:1.0\n               args:\n               - /usr/sbin/xwing-status.sh\n            restartPolicy: OnFailure\n  ```\n\n - To view th Cronjob.\n\n ```shell script\n  oc get cronjob xwing-cronjob -n -n {DEV_NAMESPACE}\n  ```\n\n## Verification\n\n- Run `kubectl get cronjobs.batch` and `LAST-SCHEDULE` to see last time it ran\n- From a bash shell, run the following to see the logs for all jobs:\n\n```\njobs=( $(kubectl get jobs --no-headers -o custom-columns=\":metadata.name\") )\necho -e \"Job \\t\\t\\t\\t Pod \\t\\t\\t\\t\\tLog\"\nfor job in \"${jobs[@]}\"\ndo\n   pod=$(kubectl get pods -l job-name=$job --no-headers -o custom-columns=\":metadata.name\")\n   echo -en \"$job \\t $pod \\t\"\n   kubectl logs $pod\ndone\n```\n","fileAbsolutePath":"/workspace/ibm-gsi-cloudnative-journey/src/pages/developer-foundation/activities/labs/lab7/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}