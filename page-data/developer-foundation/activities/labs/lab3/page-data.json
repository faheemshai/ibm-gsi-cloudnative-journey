{"componentChunkName":"component---src-pages-developer-foundation-activities-labs-lab-3-index-mdx","path":"/developer-foundation/activities/labs/lab3/","result":{"pageContext":{"frontmatter":{"title":"Kubernetes Lab 3 - Manage Multiple Containers"},"relativePagePath":"/developer-foundation/activities/labs/lab3/index.mdx","titleType":"page","MdxNode":{"id":"5b94012d-fcbb-5e4a-98be-78f751071ae1","children":[],"parent":"9b7cb337-3d7e-545f-89a3-5615e5e227e3","internal":{"content":"---\ntitle: Kubernetes Lab 3 - Manage Multiple Containers\n---\n\n\n<div style=\"border-bottom: 3px solid grey;\">\n        <div class=\"bx--row\" style=\"padding-left:20px\">\n            <p class=\"bx--col\" style=\"font-weight: bold;font-size: 20px;\">HANDS ON LAB:</p><p class=\"bx--col\" style=\"font-size: 20px;padding-left:5px;\">Manage Multiple Containers</p>\n        </div>\n    </div>\n    <div class=\"bx--row\">\n        <div class=\"bx--col-sm-2 bx--col-md-2 bx--col-lg-2\">\n         <div id=\"slideshowNavigator\" style=\"font-size:15px; text-align: center; border-right: 1px solid gray;\">\n            <div style=\"padding: 10px 0 10px 0px; width:70px\">\n                <img src=\"images/goal.png\"/>\n                Problem\n            </div>\n            <div style=\"padding: 10px 0 10px 0px;  width:80px; \">\n                <img src=\"images/learn.png\"/>\n               <p> What you'll learn</p>\n            </div>\n            <div style=\"padding: 10px 0 10px 0px;  width:55px\">\n                <img src=\"images/faq.png\"/>\n                Solution\n            </div>\n             <div style=\"padding: 50px 0 0px 0px; width:55px\">\n                <img src=\"images/explore.png\"/>\n                Explore\n            </div>\n        </div>\n        </div>\n        <div class=\"bx--col-sm-7 bx--col-md-7 bx--col-lg-7\">\n            <div  class=\"bx--row\" style=\"padding: 22px 10px;\">\n            The legacy app is hard-coded to only serve content on port 8989, but the team wants to be able to access the service using the standard port 80\n            </div>\n            <div class=\"bx--row\" style=\"padding: 10px 0px 0px;\">\n            <ul style=\"padding-left: 10px; !important\">\n            <li>\n             To learn the POD, ConfigMap creation and configuration. \n            </li>\n            <li>\n             HAProxy configuration.\n            </li>\n            </ul>\n           \n            </div>\n            <div class=\"bx--row\">\n            <ul style=\"padding-left: 10px; !important\">\n            <li>Build a Kubernetes pod that runs this legacy container and uses the ambassador design pattern to expose access to the service on port 80</li>\n            <li>Create the POD and ConfigMap definition</li>\n            <li>Create the POD with ambassador container thats run on haproxy:1.7</li>\n            <li>The HAProxy configuration should be stored in a ConfigMap</li>\n            </ul>\n            </div>\n            <div class=\"bx--row\">\n            <ul style=\"padding-left: 10px; !important\">\n            <li>The Ambassador Container Pattern</li>\n            <li>Sidecar Pattern</li>\n            <li>Adapter Pattern</li>\n            </ul>\n            </div>\n           \n        </div>\n         <div class=\"bx--col-sm-2 bx--col-md-2 bx--col-lg-2\">\n            <div class=\"bx--row\" style=\"padding-top: 15px;\">\n            Difficulty Level\n            </div>\n             <div class=\"bx--row\" style=\"padding-top: 6px;\">\n            Duration\n            </div>\n        </div>\n         <div class=\"bx--col-sm-1 bx--col-md-1 bx--col-lg-1\">\n            <div class=\"bx--row\" style=\"font-weight:bold; padding-top: 15px;\">\n            Beginner\n            </div>\n            <div class=\"bx--row\" style=\"font-weight:bold; padding-top: 7px;\">\n            25 Min\n            </div>\n        </div>\n    </div>\n\n\n\n\n<Accordion>\n<AccordionItem title=\"Multiple Containers\">\n\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: vader-service-ambassador-config\n    data:\n      haproxy.cfg: |-\n        global\n            daemon\n            maxconn 256\n\n        defaults\n            mode http\n            timeout connect 5000ms\n            timeout client 50000ms\n            timeout server 50000ms\n\n        listen http-in\n            bind *:80\n            server server1 127.0.0.1:8989 maxconn 32\n    \n------------------------\n\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: vader-service\n    spec:\n      containers:\n        - name: millennium-falcon\n          image: ibmcase/millennium-falcon:1\n        - name: haproxy-ambassador\n          image: haproxy:1.7\n          ports:\n          - containerPort: 80\n          volumeMounts:\n          - name: config-volume\n            mountPath: /usr/local/etc/haproxy\n      volumes:\n      - name: config-volume\n        configMap:\n          name: vader-service-ambassador-config\n          key: vader-config-map\n    \n------------------------\n    \n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: busybox\n    spec:\n      containers:\n        - name: myapp-container\n          image: radial/busyboxplus:curl\n          command: ['sh', '-c', 'while true; do sleep 3600; done']\n    \n</AccordionItem>\n\n</Accordion>\n\n- Create the ConfigMap.\n\n ```shell script\n  oc apply -f vader-service-ambassador-config.yaml -n {DEV_NAMESPACE}\n  ```\n- Create the service container pod.\n\n ```shell script\n  oc apply -f vader-service.yaml -n {DEV_NAMESPACE}\n  ```\n- Create the application container pod.\n\n ```shell script\n  oc apply -f busybox.yml -n {DEV_NAMESPACE}\n  ```\n\n- Use this command to access `vader-service` using port 80 from within the busybox pod.\n  \n ```\n  oc exec busybox -- curl $(kubectl get pod vader-service -o=custom-columns=IP:.status.podIP --no-headers):80\n  ```\n\n\n\nIf the service is working, you should get a message that the hyper drive of the millennium falcon needs repair.\n\n*Relevant Documentation:*\n- [Kubernetes Sidecar Logging Agent](https://kubernetes.io/docs/concepts/cluster-administration/logging/#using-a-sidecar-container-with-the-logging-agent)\n- [Shared Volumes](https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/)\n- [Distributed System Toolkit Patterns](https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/)\n","type":"Mdx","contentDigest":"b195865b6ee4a002dee917cffe19b684","owner":"gatsby-plugin-mdx","counter":1091},"frontmatter":{"title":"Kubernetes Lab 3 - Manage Multiple Containers"},"exports":{},"rawBody":"---\ntitle: Kubernetes Lab 3 - Manage Multiple Containers\n---\n\n\n<div style=\"border-bottom: 3px solid grey;\">\n        <div class=\"bx--row\" style=\"padding-left:20px\">\n            <p class=\"bx--col\" style=\"font-weight: bold;font-size: 20px;\">HANDS ON LAB:</p><p class=\"bx--col\" style=\"font-size: 20px;padding-left:5px;\">Manage Multiple Containers</p>\n        </div>\n    </div>\n    <div class=\"bx--row\">\n        <div class=\"bx--col-sm-2 bx--col-md-2 bx--col-lg-2\">\n         <div id=\"slideshowNavigator\" style=\"font-size:15px; text-align: center; border-right: 1px solid gray;\">\n            <div style=\"padding: 10px 0 10px 0px; width:70px\">\n                <img src=\"images/goal.png\"/>\n                Problem\n            </div>\n            <div style=\"padding: 10px 0 10px 0px;  width:80px; \">\n                <img src=\"images/learn.png\"/>\n               <p> What you'll learn</p>\n            </div>\n            <div style=\"padding: 10px 0 10px 0px;  width:55px\">\n                <img src=\"images/faq.png\"/>\n                Solution\n            </div>\n             <div style=\"padding: 50px 0 0px 0px; width:55px\">\n                <img src=\"images/explore.png\"/>\n                Explore\n            </div>\n        </div>\n        </div>\n        <div class=\"bx--col-sm-7 bx--col-md-7 bx--col-lg-7\">\n            <div  class=\"bx--row\" style=\"padding: 22px 10px;\">\n            The legacy app is hard-coded to only serve content on port 8989, but the team wants to be able to access the service using the standard port 80\n            </div>\n            <div class=\"bx--row\" style=\"padding: 10px 0px 0px;\">\n            <ul style=\"padding-left: 10px; !important\">\n            <li>\n             To learn the POD, ConfigMap creation and configuration. \n            </li>\n            <li>\n             HAProxy configuration.\n            </li>\n            </ul>\n           \n            </div>\n            <div class=\"bx--row\">\n            <ul style=\"padding-left: 10px; !important\">\n            <li>Build a Kubernetes pod that runs this legacy container and uses the ambassador design pattern to expose access to the service on port 80</li>\n            <li>Create the POD and ConfigMap definition</li>\n            <li>Create the POD with ambassador container thats run on haproxy:1.7</li>\n            <li>The HAProxy configuration should be stored in a ConfigMap</li>\n            </ul>\n            </div>\n            <div class=\"bx--row\">\n            <ul style=\"padding-left: 10px; !important\">\n            <li>The Ambassador Container Pattern</li>\n            <li>Sidecar Pattern</li>\n            <li>Adapter Pattern</li>\n            </ul>\n            </div>\n           \n        </div>\n         <div class=\"bx--col-sm-2 bx--col-md-2 bx--col-lg-2\">\n            <div class=\"bx--row\" style=\"padding-top: 15px;\">\n            Difficulty Level\n            </div>\n             <div class=\"bx--row\" style=\"padding-top: 6px;\">\n            Duration\n            </div>\n        </div>\n         <div class=\"bx--col-sm-1 bx--col-md-1 bx--col-lg-1\">\n            <div class=\"bx--row\" style=\"font-weight:bold; padding-top: 15px;\">\n            Beginner\n            </div>\n            <div class=\"bx--row\" style=\"font-weight:bold; padding-top: 7px;\">\n            25 Min\n            </div>\n        </div>\n    </div>\n\n\n\n\n<Accordion>\n<AccordionItem title=\"Multiple Containers\">\n\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: vader-service-ambassador-config\n    data:\n      haproxy.cfg: |-\n        global\n            daemon\n            maxconn 256\n\n        defaults\n            mode http\n            timeout connect 5000ms\n            timeout client 50000ms\n            timeout server 50000ms\n\n        listen http-in\n            bind *:80\n            server server1 127.0.0.1:8989 maxconn 32\n    \n------------------------\n\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: vader-service\n    spec:\n      containers:\n        - name: millennium-falcon\n          image: ibmcase/millennium-falcon:1\n        - name: haproxy-ambassador\n          image: haproxy:1.7\n          ports:\n          - containerPort: 80\n          volumeMounts:\n          - name: config-volume\n            mountPath: /usr/local/etc/haproxy\n      volumes:\n      - name: config-volume\n        configMap:\n          name: vader-service-ambassador-config\n          key: vader-config-map\n    \n------------------------\n    \n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: busybox\n    spec:\n      containers:\n        - name: myapp-container\n          image: radial/busyboxplus:curl\n          command: ['sh', '-c', 'while true; do sleep 3600; done']\n    \n</AccordionItem>\n\n</Accordion>\n\n- Create the ConfigMap.\n\n ```shell script\n  oc apply -f vader-service-ambassador-config.yaml -n {DEV_NAMESPACE}\n  ```\n- Create the service container pod.\n\n ```shell script\n  oc apply -f vader-service.yaml -n {DEV_NAMESPACE}\n  ```\n- Create the application container pod.\n\n ```shell script\n  oc apply -f busybox.yml -n {DEV_NAMESPACE}\n  ```\n\n- Use this command to access `vader-service` using port 80 from within the busybox pod.\n  \n ```\n  oc exec busybox -- curl $(kubectl get pod vader-service -o=custom-columns=IP:.status.podIP --no-headers):80\n  ```\n\n\n\nIf the service is working, you should get a message that the hyper drive of the millennium falcon needs repair.\n\n*Relevant Documentation:*\n- [Kubernetes Sidecar Logging Agent](https://kubernetes.io/docs/concepts/cluster-administration/logging/#using-a-sidecar-container-with-the-logging-agent)\n- [Shared Volumes](https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/)\n- [Distributed System Toolkit Patterns](https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/)\n","fileAbsolutePath":"/workspace/ibm-gsi-cloudnative-journey/src/pages/developer-foundation/activities/labs/lab3/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}