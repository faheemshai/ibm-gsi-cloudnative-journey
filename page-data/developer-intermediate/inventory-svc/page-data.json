{"componentChunkName":"component---src-pages-developer-intermediate-inventory-svc-index-mdx","path":"/developer-intermediate/inventory-svc/","result":{"pageContext":{"frontmatter":{"title":"Inventory Service"},"relativePagePath":"/developer-intermediate/inventory-svc/index.mdx","titleType":"page","MdxNode":{"id":"8489a499-000e-57fc-8967-1c384977a37e","children":[],"parent":"c4471ad2-aa1c-553f-a421-f22862d13cd0","internal":{"content":"---\ntitle: Inventory Service\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nDevelop and deploy the backend component of the inventory application\n\n</PageDescription>\n\n#### Setup\n\nCreate the initial project and register it with a pipeline for automated builds.\n\n- Create a new repository from the [Spring Boot Microservice](https://github.com/IBM/template-java-spring/generate) template. Make the cloned repository public.\n\n    You can also access this template on the <Globals name=\"templates\" /> page in the [<Globals name=\"dashboard\" />](/developer-intermediate/deploy-app/#3.-open-the-developer-dashboard).\n\n    <InlineNotification kind=\"warning\">\n\n    **Warning:** If you are developing on a shared education cluster, place the repository in the  **Git Organisation** listed in your notification email and remember to add your initials as a suffix to the app name.\n\n    </InlineNotification>\n\n    In order to prevent naming collisions, name the repository `inventory-management-svc-{your initials}`, replacing\n    `{your initials}` with your actual initials.\n\n- Clone the new repository to your machine\n\n  ```\n  git clone https://github.com/ibm-workshop-team-one/inventory-svc-{your initials}.git\n  ```\n\n- Go into the repository directory cloned and execute the following\n\n    ```\n    oc sync dev-{your initials} --dev\n    ```\n\n- Register the pipeline [register the pipeline](/developer-intermediate/deploy-app#register-the-app-in-a-devops-pipeline)\n\n    ```\n    oc pipeline --tekton\n    ```\n\n   replacing `{your initials}` with your actual initials\n\n- Give git credentials if prompted, and master as the git branch to use. When prompted for the pipeline, select igc-java-gradle-v1-2-0\n  ```bash\n  $ oc pipeline --tekton\n  Creating pipeline on openshift cluster in dev-ab namespace\n  Getting git parameters\n  Git credentials have already been stored for user: abalasu1\n    Project git repo: https://github.com/ibm-workshop-team-one/inventory-svc-ab.git\n  ? Provide the git branch that should be used: master\n  Creating service account: pipeline\n  Creating Git PipelineResource\n  Creating Image PipelineResource\n  ? Select the Pipeline to use in the PipelineRun: igc-java-gradle-v1-2-0\n  Copying tasks from tools\n  Copied Pipeline from tools/igc-java-gradle-v1-2-0 to dev-ab/inventory-svc-ab\n  Creating PipelineRun for pipeline: inventory-svc-ab\n  $\n  ```\n\n- [Open the pipeline](/developer-intermediate/deploy-app#view-your-application-pipeline) to see it running\n\n- When the pipeline is completed, run `oc endpoints -n dev-{your initials}`. You should see an entry\nfor the app we just pushed. Select the entry and hit `Enter` to launch the browser. If you are\ndeveloping on code ready workspaces/cloud shell, copy the url and paste it in a new browser window.\n\n- Run the service locally\n\n    ```\n    ./gradlew bootRun\n    ```\n\n   When the execution output says \"Server started\", the app is running.\n\n- Access the running service. This service runs on port 9080.\n\n<Tabs>\n\n<Tab label=\"Cloud Shell\">\n\n - To view the running app click on the **Eye Icon** on the top right and select the port `9080` this will open a browser tab and display the running app on that port.\n\n    ![View App](./images/viewapp.png)\n\n</Tab>\n\n<Tab label=\"Gitpod\">\n\n - Once you run the application,gitpod gives the option to make the port \"Public\".Once you make the port Public, it gives you the option to \"Open Preview\" or \"Open Browser\".\n\n    ![View App](./images/gitpod01.png)\n\n- Selecting \"Open Preview\" opens a window inside gitpod workspace tab.\n\n    ![OpenPreview](./images/gitpod02.png)\n\n- Selecting \"Open Browser\" opens a new browser tab for accessing the URL.\n\n</Tab>\n\n<Tab label=\"Code Ready Workspaces\">\n\n- Click on yes\n![CRW Open Link](./images/crwexposeservice.png)\n\n- Click on open link \n![CRW Open Link](./images/crwopenlink.png)\n\n- To view this application in new tab click top right corner arrow icon\n![CRW Open App](./images/crwopenapp.png)\n\n</Tab>\n<Tab label=\"Desktop/Laptop\">\n- Open a browser to `http://localhost:9080/swagger-ui.html`\n</Tab>\n\n</Tabs>\n\nThis will display the Swagger UI page that provides a user interface to exercise the APIs.\n\n#### Create initial components\n\nSpring Boot uses annotations to configure the various components that will be injected into and\nused by the applications. A class with the `@SpringBootApplication` annotation is the starting\npoint for the rest of the application components to be loaded. Additionally, a `@ComponentScan`\nannotation can be added to tell the Spring infrastructure which packages should be scanned\nfor components.\n\nWe will start by creating the initial application component.\n\n- Create a class named `Application` in the `com.ibm.inventory_management.app` package.\n\n- Add the `@SpringBootApplication` and `@ComponentScan` annotation to the class. The `@ComponentScan`\nannotation should include `com.ibm.inventory_management.*`, `com.ibm.cloud_garage.*`, and `com.ibm.health`\npackages.\n\n   ```java path=src/main/java/com/ibm/inventory_management/app/Application.java\n      package com.ibm.inventory_management.app;\n\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.boot.CommandLineRunner;\n    import org.springframework.boot.SpringApplication;\n    import org.springframework.boot.autoconfigure.SpringBootApplication;\n    import org.springframework.boot.builder.SpringApplicationBuilder;\n    import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n    import org.springframework.context.ApplicationContext;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.ComponentScan;\n    import org.springframework.core.env.Environment;\n\n    @SpringBootApplication\n    @ComponentScan({\"com.ibm.inventory_management.*\", \"com.ibm.cloud_garage.*\", \"com.ibm.health\"})\n    public class Application extends SpringBootServletInitializer {\n        @Autowired\n        Environment environment;\n\n        public static void main(String[] args) {\n            SpringApplication.run(com.ibm.inventory_management.app.Application.class, args);\n        }\n\n        @Bean\n        public CommandLineRunner commandLineRunner(ApplicationContext ctx) {\n            return args -> {\n                String port = environment.getProperty(\"local.server.port\");\n\n                System.out.println();\n                System.out.println(\"Server started - http://localhost:\" + port + \"/swagger-ui.html\");\n            };\n        }\n\n        @Override\n        protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n            return application.sources(Application.class);\n        }\n    }\n  ```\n\n- Delete `application.app`\n  ```\n   git rm -r src/main/java/application/\n   ```\n\n- Run the service locally. The swagger page should no longer contain the `/hello`\nAPI endpoint.\n\n- Commit and push the changes to Git.\n\n   ```base\n      git add .\n      git commit -m \"Adds Application and Removes default Application class\"\n      git push\n    ```\n\n#### Add StockItem controller\n\nIn Spring Boot, the `@RestController` annotation tells the framework that the class provides a\nREST interface. Additional annotations like `@GetMapping` are used to provide the specific configuration\nfor the REST service.\n\n- Start the tests in tdd mode with `npm run tdd` (or `./gradlew test --continuous`)\n\n- Add a StockItemControllerTest.java in `com.ibm.inventory_management.controllers` under the `test` folder\n\n   ```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\n      package com.ibm.inventory_management.controllers;\n\n      import org.junit.jupiter.api.DisplayName;\n\n      @DisplayName(\"StockItemController\")\n      public class StockItemControllerTest {\n      }\n    ```\n\n- Add the MockMvc infrastructure and create the `StockItemController`\n\n  ```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\n     package com.ibm.inventory_management.controllers;\n\n     import static org.mockito.Mockito.spy;\n\n     import org.junit.jupiter.api.BeforeEach;\n     import org.junit.jupiter.api.DisplayName;\n     import org.springframework.test.web.servlet.MockMvc;\n     import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n     @DisplayName(\"StockItemController\")\n     public class StockItemControllerTest {\n    StockItemController controller;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        controller = spy(new StockItemController());\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n    }\n ```\n\n ```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\n    package com.ibm.inventory_management.controllers;\n\n    public class StockItemController {\n    }\n ```\n\n- Add the tests for the controller behavior and make the corresponding changes to make the tests pass\n\n  ```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\n     package com.ibm.inventory_management.controllers;\n\n     import static org.mockito.Mockito.spy;\n     import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n     import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n     import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n     import org.junit.jupiter.api.BeforeEach;\n     import org.junit.jupiter.api.DisplayName;\n     import org.junit.jupiter.api.Nested;\n     import org.junit.jupiter.api.Test;\n     import org.springframework.test.web.servlet.MockMvc;\n     import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n     @DisplayName(\"StockItemController\")\n     public class StockItemControllerTest {\n    StockItemController controller;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        controller = spy(new StockItemController());\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n\n    @Nested\n    @DisplayName(\"Given [GET] /stock-items\")\n    public class GivenGetStockItems {\n\n        @Test\n        @DisplayName(\"When called then it should return a 200 status\")\n        public void when_called_should_return_200_status() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\"))\n                    .andExpect(status().isOk());\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return an empty array\")\n        public void when_called_then_return_an_empty_array() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[]\"));\n        }\n       }\n       }\n    ```\n\n     ```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\n        package com.ibm.inventory_management.controllers;\n\n        import java.util.ArrayList;\n        import java.util.List;\n\n        import org.springframework.web.bind.annotation.GetMapping;\n        import org.springframework.web.bind.annotation.RestController;\n\n        @RestController\n       public class StockItemController {\n\n       @GetMapping(path = \"/stock-items\", produces = \"application/json\")\n       public List listStockItems() {\n        return new ArrayList();\n       }\n       }\n    ```\n\n- Start the local server\n\n   ```bash\n     ./gradlew bootRun\n   ```\n\n<Tabs>\n\n<Tab label=\"Cloud Shell\">\n\n - To view the running app click on the **Eye Icon** on the top right and select the port `9080` this will open a browser tab and display the running app on that port.\n\n    ![View App](./images/viewapp.png)\n\n</Tab>\n\n<Tab label=\"Gitpod\">\n\n - Once you run the application,gitpod gives the option to make the port \"Public\".Once you make the port Public, it gives you the option to \"Open Preview\" or \"Open Browser\".\n\n    ![View App](./images/gitpod01.png)\n\n- Selecting \"Open Preview\" opens a window inside gitpod workspace tab.\n\n    ![OpenPreview](./images/gitpod02.png)\n\n- Selecting \"Open Browser\" opens a new browser tab for accessing the URL.\n\n</Tab>\n\n<Tab label=\"Code Ready Workspaces\">\n\n- Click on yes\n![CRW Open Link](./images/crwexposeservice.png)\n\n- Click on open link \n![CRW Open Link](./images/crwopenlink.png)\n\n- To view this application in new tab click top right corner arrow icon\n![CRW Open App](./images/crwopenapp.png)\n\n</Tab>\n\n<Tab label=\"Desktop/Laptop\">\n- When the server starts, open a browser to `http://localhost:9080/swagger-ui.html` to view the swagger documentation. You should\nsee the stock item entry in the list\n</Tab>\n\n\n\n</Tabs>\n\n- Commit and push the changes to Git.\n\n  ```base\n     git add .\n     git commit -m \"Adds StockItemController\"\n     git push\n  ```\n\n#### Add a service for providing results\n\nAn established pattern for REST services in Spring Boot is to keep the REST controller logic simple\nand focused on translating from REST protocols to Javascript. The business logic for the components\nshould be placed in a component that is given a `@Service` annotation.\n\n- Update the controller test to include returning data from the service\n\n   ```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\n      package com.ibm.inventory_management.controllers;\n\n   import static org.mockito.Mockito.mock;\n   import static org.mockito.Mockito.spy;\n   import static org.mockito.Mockito.when;\n   import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n   import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n   import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n   import java.util.Arrays;\n   import java.util.List;\n\n   import org.junit.jupiter.api.BeforeEach;\n   import org.junit.jupiter.api.DisplayName;\n   import org.junit.jupiter.api.Nested;\n   import org.junit.jupiter.api.Test;\n   import org.springframework.test.web.servlet.MockMvc;\n   import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n  import com.ibm.inventory_management.models.StockItem;\n  import com.ibm.inventory_management.services.StockItemApi;\n\n  @DisplayName(\"StockItemController\")\n  public class StockItemControllerTest {\n    StockItemController controller;\n    StockItemApi service;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        service = mock(StockItemApi.class);\n\n        controller = spy(new StockItemController(service));\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n\n    @Nested\n    @DisplayName(\"Given [GET] /stock-items\")\n    public class GivenGetStockItems {\n\n        @Test\n        @DisplayName(\"When called then it should return a 200 status\")\n        public void when_called_should_return_200_status() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\"))\n                    .andExpect(status().isOk());\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return an empty array\")\n        public void when_called_then_return_an_empty_array() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[]\"));\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return the results of the StockItemService\")\n        public void when_called_then_return_the_results_of_the_stockitemservice() throws Exception {\n\n            final List<StockItem> expectedResult = Arrays.asList(new StockItem());\n            when(service.listStockItems()).thenReturn(expectedResult);\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[{}]\"));\n        }\n        }\n        }\n      ```\n\n      ```java path=src/main/java/com/ibm/inventory_management/models/StockItem.java\n         package com.ibm.inventory_management.models;\n\n         import java.io.Serializable;\n\n         public class StockItem implements Serializable {\n         private String name;\n\n         public String getName() {\n          return name;\n         }\n         public void setName(String name) {\n        this.name = name;\n         }\n         public StockItem withName(String name) {\n        this.setName(name);\n        return this;\n        }\n        }\n      ```\n\n      ```java path=src/main/java/com/ibm/inventory_management/services/StockItemApi.java\n         package com.ibm.inventory_management.services;\n\n         import java.util.List;\n\n         import com.ibm.inventory_management.models.StockItem;\n\n         public interface StockItemApi {\n              List<StockItem> listStockItems();\n        }\n      ```\n\n      ```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\n         package com.ibm.inventory_management.controllers;\n\n         import java.util.List;\n\n         import org.springframework.web.bind.annotation.GetMapping;\n         import org.springframework.web.bind.annotation.RestController;\n\n         import com.ibm.inventory_management.models.StockItem;\n         import com.ibm.inventory_management.services.StockItemApi;\n\n         @RestController\n         public class StockItemController {\n\n         private final StockItemApi service;\n\n         public StockItemController(StockItemApi service) {\n        this.service = service;\n        }\n\n        @GetMapping(path = \"/stock-items\", produces = \"application/json\")\n       public List<StockItem> listStockItems() {\n        return this.service.listStockItems();\n       }\n      }\n    ```\n\n- At this points the tests should pass even though we haven't provided an implementation of the service yet since we are\ncreating a mocking the service in the unit test\n\n- Update the `StockItem` model to include the remaining fields\n\n  ```java path=src/main/java/com/ibm/inventory_management/models/StockItem.java\n     package com.ibm.inventory_management.models;\n\n     import java.io.Serializable;\n\n     public class StockItem implements Serializable {\n     private String name;\n     private String id = null;\n     private int stock = 0;\n     private double price = 0.0;\n     private String manufacturer = \"\";\n\n     public StockItem() {\n        super();\n     }\n    public StockItem(String id) {\n        this.id = id;\n     }\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public StockItem withName(String name) {\n        this.setName(name);\n        return this;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public StockItem withId(String id) {\n        this.setId(id);\n        return this;\n    }\n\n    public int getStock() {\n        return stock;\n    }\n\n    public void setStock(int stock) {\n        this.stock = stock;\n    }\n\n    public StockItem withStock(int stock) {\n        this.setStock(stock);\n        return this;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    public StockItem withPrice(double price) {\n        this.setPrice(price);\n        return this;\n    }\n\n    public String getManufacturer() {\n        return manufacturer;\n    }\n\n    public void setManufacturer(String manufacturer) {\n        this.manufacturer = manufacturer;\n    }\n\n    public StockItem withManufacturer(String manufacturer) {\n        this.setManufacturer(manufacturer);\n        return this;\n    }\n    }\n  ```\n\n- Provide an implementation of the service that just returns a couple of hard-coded data values, for now. Services are\ndenoted in Spring Boot with the `@Service` annotation\n\n  ```java path=src/main/java/com/ibm/inventory_management/services/StockItemService.java\n     package com.ibm.inventory_management.services;\n\n     import static java.util.Arrays.asList;\n\n     import java.util.List;\n\n     import org.springframework.context.annotation.Primary;\n     import org.springframework.stereotype.Service;\n\n     import com.ibm.inventory_management.models.StockItem;\n\n      @Service\n     public class StockItemService implements StockItemApi {\n    @Override\n    public List<StockItem> listStockItems() {\n        return asList(\n                new StockItem(\"1\")\n                        .withName(\"Item 1\")\n                        .withStock(100)\n                        .withPrice(10.5)\n                        .withManufacturer(\"Sony\"),\n                new StockItem(\"2\")\n                        .withName(\"Item 2\")\n                        .withStock(150)\n                        .withPrice(100.0)\n                        .withManufacturer(\"Insignia\"),\n                new StockItem(\"3\")\n                        .withName(\"Item 3\")\n                        .withStock(10)\n                        .withPrice(1000.0)\n                        .withManufacturer(\"Panasonic\")\n        );\n    }\n    }\n  ```\n\n- Replace the `api()` method in the SwaggerDocket class to restrict the swagger page to only show the `/stock-items` API\n\n   ```java path=src/main/java/com/ibm/cloud_garage/swagger/SwaggerDocket.java\n      @Bean\n      public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(buildApiRequestHandler())\n                .paths(PathSelectors.regex(\".*stock-item.*\"))\n                .build()\n                .apiInfo(buildApiInfo());\n       }\n     ```\n\n#### Verify the service locally and push the changes\n\n- Start the application\n\n    ```bash\n    ./gradlew bootRun\n    ```\n\n\n\n<Tabs>\n\n<Tab label=\"Cloud Shell\">\n\n - To view the running app click on the **Eye Icon** on the top right and select the port `9080` this will open a browser tab and display the running app on that port.\n\n    ![View App](./images/viewapp.png)\n\n</Tab>\n\n<Tab label=\"Gitpod\">\n\n - Once you run the application,gitpod gives the option to make the port \"Public\".Once you make the port Public, it gives you the option to \"Open Preview\" or \"Open Browser\".\n\n    ![View App](./images/gitpod01.png)\n\n- Selecting \"Open Preview\" opens a window inside gitpod workspace tab.\n\n    ![OpenPreview](./images/gitpod02.png)\n\n- Selecting \"Open Browser\" opens a new browser tab for accessing the URL.\n\n</Tab>\n\n\n\n<Tab label=\"Code Ready Workspaces\">\n\n- Click on yes\n![CRW Open Link](./images/crwexposeservice.png)\n\n- Click on open link \n![CRW Open Link](./images/crwopenlink.png)\n\n- To view this application in new tab click top right corner arrow icon\n![CRW Open App](./images/crwopenapp.png)\n\n</Tab>\n\n<Tab label=\"Desktop/Laptop\">\n- Open a browser to `http://localhost:9080/swagger-ui.html`\n\n</Tab>\n\n\n</Tabs>\n\n- Run the service by selecting `Try it out` then `Execute`\n\n- You should see the data we defined in the service in the previous section\n\n- Commit and push the changes to git\n\n  ```bash\n     git add .\n     git commit -m \"Adds StockItem service implementation\"\n     git push\n   ```\n\n- The pipeline should kick off and you will be able to see the running service by running `oc endpoints -n dev-{initials}` and selecting the route of your service\n\n","type":"Mdx","contentDigest":"56b73c6e10461235f7a2119cebc71479","owner":"gatsby-plugin-mdx","counter":1014},"frontmatter":{"title":"Inventory Service"},"exports":{},"rawBody":"---\ntitle: Inventory Service\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nDevelop and deploy the backend component of the inventory application\n\n</PageDescription>\n\n#### Setup\n\nCreate the initial project and register it with a pipeline for automated builds.\n\n- Create a new repository from the [Spring Boot Microservice](https://github.com/IBM/template-java-spring/generate) template. Make the cloned repository public.\n\n    You can also access this template on the <Globals name=\"templates\" /> page in the [<Globals name=\"dashboard\" />](/developer-intermediate/deploy-app/#3.-open-the-developer-dashboard).\n\n    <InlineNotification kind=\"warning\">\n\n    **Warning:** If you are developing on a shared education cluster, place the repository in the  **Git Organisation** listed in your notification email and remember to add your initials as a suffix to the app name.\n\n    </InlineNotification>\n\n    In order to prevent naming collisions, name the repository `inventory-management-svc-{your initials}`, replacing\n    `{your initials}` with your actual initials.\n\n- Clone the new repository to your machine\n\n  ```\n  git clone https://github.com/ibm-workshop-team-one/inventory-svc-{your initials}.git\n  ```\n\n- Go into the repository directory cloned and execute the following\n\n    ```\n    oc sync dev-{your initials} --dev\n    ```\n\n- Register the pipeline [register the pipeline](/developer-intermediate/deploy-app#register-the-app-in-a-devops-pipeline)\n\n    ```\n    oc pipeline --tekton\n    ```\n\n   replacing `{your initials}` with your actual initials\n\n- Give git credentials if prompted, and master as the git branch to use. When prompted for the pipeline, select igc-java-gradle-v1-2-0\n  ```bash\n  $ oc pipeline --tekton\n  Creating pipeline on openshift cluster in dev-ab namespace\n  Getting git parameters\n  Git credentials have already been stored for user: abalasu1\n    Project git repo: https://github.com/ibm-workshop-team-one/inventory-svc-ab.git\n  ? Provide the git branch that should be used: master\n  Creating service account: pipeline\n  Creating Git PipelineResource\n  Creating Image PipelineResource\n  ? Select the Pipeline to use in the PipelineRun: igc-java-gradle-v1-2-0\n  Copying tasks from tools\n  Copied Pipeline from tools/igc-java-gradle-v1-2-0 to dev-ab/inventory-svc-ab\n  Creating PipelineRun for pipeline: inventory-svc-ab\n  $\n  ```\n\n- [Open the pipeline](/developer-intermediate/deploy-app#view-your-application-pipeline) to see it running\n\n- When the pipeline is completed, run `oc endpoints -n dev-{your initials}`. You should see an entry\nfor the app we just pushed. Select the entry and hit `Enter` to launch the browser. If you are\ndeveloping on code ready workspaces/cloud shell, copy the url and paste it in a new browser window.\n\n- Run the service locally\n\n    ```\n    ./gradlew bootRun\n    ```\n\n   When the execution output says \"Server started\", the app is running.\n\n- Access the running service. This service runs on port 9080.\n\n<Tabs>\n\n<Tab label=\"Cloud Shell\">\n\n - To view the running app click on the **Eye Icon** on the top right and select the port `9080` this will open a browser tab and display the running app on that port.\n\n    ![View App](./images/viewapp.png)\n\n</Tab>\n\n<Tab label=\"Gitpod\">\n\n - Once you run the application,gitpod gives the option to make the port \"Public\".Once you make the port Public, it gives you the option to \"Open Preview\" or \"Open Browser\".\n\n    ![View App](./images/gitpod01.png)\n\n- Selecting \"Open Preview\" opens a window inside gitpod workspace tab.\n\n    ![OpenPreview](./images/gitpod02.png)\n\n- Selecting \"Open Browser\" opens a new browser tab for accessing the URL.\n\n</Tab>\n\n<Tab label=\"Code Ready Workspaces\">\n\n- Click on yes\n![CRW Open Link](./images/crwexposeservice.png)\n\n- Click on open link \n![CRW Open Link](./images/crwopenlink.png)\n\n- To view this application in new tab click top right corner arrow icon\n![CRW Open App](./images/crwopenapp.png)\n\n</Tab>\n<Tab label=\"Desktop/Laptop\">\n- Open a browser to `http://localhost:9080/swagger-ui.html`\n</Tab>\n\n</Tabs>\n\nThis will display the Swagger UI page that provides a user interface to exercise the APIs.\n\n#### Create initial components\n\nSpring Boot uses annotations to configure the various components that will be injected into and\nused by the applications. A class with the `@SpringBootApplication` annotation is the starting\npoint for the rest of the application components to be loaded. Additionally, a `@ComponentScan`\nannotation can be added to tell the Spring infrastructure which packages should be scanned\nfor components.\n\nWe will start by creating the initial application component.\n\n- Create a class named `Application` in the `com.ibm.inventory_management.app` package.\n\n- Add the `@SpringBootApplication` and `@ComponentScan` annotation to the class. The `@ComponentScan`\nannotation should include `com.ibm.inventory_management.*`, `com.ibm.cloud_garage.*`, and `com.ibm.health`\npackages.\n\n   ```java path=src/main/java/com/ibm/inventory_management/app/Application.java\n      package com.ibm.inventory_management.app;\n\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.boot.CommandLineRunner;\n    import org.springframework.boot.SpringApplication;\n    import org.springframework.boot.autoconfigure.SpringBootApplication;\n    import org.springframework.boot.builder.SpringApplicationBuilder;\n    import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n    import org.springframework.context.ApplicationContext;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.ComponentScan;\n    import org.springframework.core.env.Environment;\n\n    @SpringBootApplication\n    @ComponentScan({\"com.ibm.inventory_management.*\", \"com.ibm.cloud_garage.*\", \"com.ibm.health\"})\n    public class Application extends SpringBootServletInitializer {\n        @Autowired\n        Environment environment;\n\n        public static void main(String[] args) {\n            SpringApplication.run(com.ibm.inventory_management.app.Application.class, args);\n        }\n\n        @Bean\n        public CommandLineRunner commandLineRunner(ApplicationContext ctx) {\n            return args -> {\n                String port = environment.getProperty(\"local.server.port\");\n\n                System.out.println();\n                System.out.println(\"Server started - http://localhost:\" + port + \"/swagger-ui.html\");\n            };\n        }\n\n        @Override\n        protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n            return application.sources(Application.class);\n        }\n    }\n  ```\n\n- Delete `application.app`\n  ```\n   git rm -r src/main/java/application/\n   ```\n\n- Run the service locally. The swagger page should no longer contain the `/hello`\nAPI endpoint.\n\n- Commit and push the changes to Git.\n\n   ```base\n      git add .\n      git commit -m \"Adds Application and Removes default Application class\"\n      git push\n    ```\n\n#### Add StockItem controller\n\nIn Spring Boot, the `@RestController` annotation tells the framework that the class provides a\nREST interface. Additional annotations like `@GetMapping` are used to provide the specific configuration\nfor the REST service.\n\n- Start the tests in tdd mode with `npm run tdd` (or `./gradlew test --continuous`)\n\n- Add a StockItemControllerTest.java in `com.ibm.inventory_management.controllers` under the `test` folder\n\n   ```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\n      package com.ibm.inventory_management.controllers;\n\n      import org.junit.jupiter.api.DisplayName;\n\n      @DisplayName(\"StockItemController\")\n      public class StockItemControllerTest {\n      }\n    ```\n\n- Add the MockMvc infrastructure and create the `StockItemController`\n\n  ```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\n     package com.ibm.inventory_management.controllers;\n\n     import static org.mockito.Mockito.spy;\n\n     import org.junit.jupiter.api.BeforeEach;\n     import org.junit.jupiter.api.DisplayName;\n     import org.springframework.test.web.servlet.MockMvc;\n     import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n     @DisplayName(\"StockItemController\")\n     public class StockItemControllerTest {\n    StockItemController controller;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        controller = spy(new StockItemController());\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n    }\n ```\n\n ```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\n    package com.ibm.inventory_management.controllers;\n\n    public class StockItemController {\n    }\n ```\n\n- Add the tests for the controller behavior and make the corresponding changes to make the tests pass\n\n  ```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\n     package com.ibm.inventory_management.controllers;\n\n     import static org.mockito.Mockito.spy;\n     import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n     import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n     import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n     import org.junit.jupiter.api.BeforeEach;\n     import org.junit.jupiter.api.DisplayName;\n     import org.junit.jupiter.api.Nested;\n     import org.junit.jupiter.api.Test;\n     import org.springframework.test.web.servlet.MockMvc;\n     import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n     @DisplayName(\"StockItemController\")\n     public class StockItemControllerTest {\n    StockItemController controller;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        controller = spy(new StockItemController());\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n\n    @Nested\n    @DisplayName(\"Given [GET] /stock-items\")\n    public class GivenGetStockItems {\n\n        @Test\n        @DisplayName(\"When called then it should return a 200 status\")\n        public void when_called_should_return_200_status() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\"))\n                    .andExpect(status().isOk());\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return an empty array\")\n        public void when_called_then_return_an_empty_array() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[]\"));\n        }\n       }\n       }\n    ```\n\n     ```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\n        package com.ibm.inventory_management.controllers;\n\n        import java.util.ArrayList;\n        import java.util.List;\n\n        import org.springframework.web.bind.annotation.GetMapping;\n        import org.springframework.web.bind.annotation.RestController;\n\n        @RestController\n       public class StockItemController {\n\n       @GetMapping(path = \"/stock-items\", produces = \"application/json\")\n       public List listStockItems() {\n        return new ArrayList();\n       }\n       }\n    ```\n\n- Start the local server\n\n   ```bash\n     ./gradlew bootRun\n   ```\n\n<Tabs>\n\n<Tab label=\"Cloud Shell\">\n\n - To view the running app click on the **Eye Icon** on the top right and select the port `9080` this will open a browser tab and display the running app on that port.\n\n    ![View App](./images/viewapp.png)\n\n</Tab>\n\n<Tab label=\"Gitpod\">\n\n - Once you run the application,gitpod gives the option to make the port \"Public\".Once you make the port Public, it gives you the option to \"Open Preview\" or \"Open Browser\".\n\n    ![View App](./images/gitpod01.png)\n\n- Selecting \"Open Preview\" opens a window inside gitpod workspace tab.\n\n    ![OpenPreview](./images/gitpod02.png)\n\n- Selecting \"Open Browser\" opens a new browser tab for accessing the URL.\n\n</Tab>\n\n<Tab label=\"Code Ready Workspaces\">\n\n- Click on yes\n![CRW Open Link](./images/crwexposeservice.png)\n\n- Click on open link \n![CRW Open Link](./images/crwopenlink.png)\n\n- To view this application in new tab click top right corner arrow icon\n![CRW Open App](./images/crwopenapp.png)\n\n</Tab>\n\n<Tab label=\"Desktop/Laptop\">\n- When the server starts, open a browser to `http://localhost:9080/swagger-ui.html` to view the swagger documentation. You should\nsee the stock item entry in the list\n</Tab>\n\n\n\n</Tabs>\n\n- Commit and push the changes to Git.\n\n  ```base\n     git add .\n     git commit -m \"Adds StockItemController\"\n     git push\n  ```\n\n#### Add a service for providing results\n\nAn established pattern for REST services in Spring Boot is to keep the REST controller logic simple\nand focused on translating from REST protocols to Javascript. The business logic for the components\nshould be placed in a component that is given a `@Service` annotation.\n\n- Update the controller test to include returning data from the service\n\n   ```java path=src/test/java/com/ibm/inventory_management/controllers/StockItemControllerTest.java\n      package com.ibm.inventory_management.controllers;\n\n   import static org.mockito.Mockito.mock;\n   import static org.mockito.Mockito.spy;\n   import static org.mockito.Mockito.when;\n   import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n   import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n   import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n   import java.util.Arrays;\n   import java.util.List;\n\n   import org.junit.jupiter.api.BeforeEach;\n   import org.junit.jupiter.api.DisplayName;\n   import org.junit.jupiter.api.Nested;\n   import org.junit.jupiter.api.Test;\n   import org.springframework.test.web.servlet.MockMvc;\n   import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n  import com.ibm.inventory_management.models.StockItem;\n  import com.ibm.inventory_management.services.StockItemApi;\n\n  @DisplayName(\"StockItemController\")\n  public class StockItemControllerTest {\n    StockItemController controller;\n    StockItemApi service;\n\n    MockMvc mockMvc;\n\n    @BeforeEach\n    public void setup() {\n        service = mock(StockItemApi.class);\n\n        controller = spy(new StockItemController(service));\n\n        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();\n    }\n\n    @Nested\n    @DisplayName(\"Given [GET] /stock-items\")\n    public class GivenGetStockItems {\n\n        @Test\n        @DisplayName(\"When called then it should return a 200 status\")\n        public void when_called_should_return_200_status() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\"))\n                    .andExpect(status().isOk());\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return an empty array\")\n        public void when_called_then_return_an_empty_array() throws Exception {\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[]\"));\n        }\n\n        @Test\n        @DisplayName(\"When called then it should return the results of the StockItemService\")\n        public void when_called_then_return_the_results_of_the_stockitemservice() throws Exception {\n\n            final List<StockItem> expectedResult = Arrays.asList(new StockItem());\n            when(service.listStockItems()).thenReturn(expectedResult);\n\n            mockMvc.perform(get(\"/stock-items\").accept(\"application/json\"))\n                    .andExpect(content().json(\"[{}]\"));\n        }\n        }\n        }\n      ```\n\n      ```java path=src/main/java/com/ibm/inventory_management/models/StockItem.java\n         package com.ibm.inventory_management.models;\n\n         import java.io.Serializable;\n\n         public class StockItem implements Serializable {\n         private String name;\n\n         public String getName() {\n          return name;\n         }\n         public void setName(String name) {\n        this.name = name;\n         }\n         public StockItem withName(String name) {\n        this.setName(name);\n        return this;\n        }\n        }\n      ```\n\n      ```java path=src/main/java/com/ibm/inventory_management/services/StockItemApi.java\n         package com.ibm.inventory_management.services;\n\n         import java.util.List;\n\n         import com.ibm.inventory_management.models.StockItem;\n\n         public interface StockItemApi {\n              List<StockItem> listStockItems();\n        }\n      ```\n\n      ```java path=src/main/java/com/ibm/inventory_management/controllers/StockItemController.java\n         package com.ibm.inventory_management.controllers;\n\n         import java.util.List;\n\n         import org.springframework.web.bind.annotation.GetMapping;\n         import org.springframework.web.bind.annotation.RestController;\n\n         import com.ibm.inventory_management.models.StockItem;\n         import com.ibm.inventory_management.services.StockItemApi;\n\n         @RestController\n         public class StockItemController {\n\n         private final StockItemApi service;\n\n         public StockItemController(StockItemApi service) {\n        this.service = service;\n        }\n\n        @GetMapping(path = \"/stock-items\", produces = \"application/json\")\n       public List<StockItem> listStockItems() {\n        return this.service.listStockItems();\n       }\n      }\n    ```\n\n- At this points the tests should pass even though we haven't provided an implementation of the service yet since we are\ncreating a mocking the service in the unit test\n\n- Update the `StockItem` model to include the remaining fields\n\n  ```java path=src/main/java/com/ibm/inventory_management/models/StockItem.java\n     package com.ibm.inventory_management.models;\n\n     import java.io.Serializable;\n\n     public class StockItem implements Serializable {\n     private String name;\n     private String id = null;\n     private int stock = 0;\n     private double price = 0.0;\n     private String manufacturer = \"\";\n\n     public StockItem() {\n        super();\n     }\n    public StockItem(String id) {\n        this.id = id;\n     }\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public StockItem withName(String name) {\n        this.setName(name);\n        return this;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public StockItem withId(String id) {\n        this.setId(id);\n        return this;\n    }\n\n    public int getStock() {\n        return stock;\n    }\n\n    public void setStock(int stock) {\n        this.stock = stock;\n    }\n\n    public StockItem withStock(int stock) {\n        this.setStock(stock);\n        return this;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    public StockItem withPrice(double price) {\n        this.setPrice(price);\n        return this;\n    }\n\n    public String getManufacturer() {\n        return manufacturer;\n    }\n\n    public void setManufacturer(String manufacturer) {\n        this.manufacturer = manufacturer;\n    }\n\n    public StockItem withManufacturer(String manufacturer) {\n        this.setManufacturer(manufacturer);\n        return this;\n    }\n    }\n  ```\n\n- Provide an implementation of the service that just returns a couple of hard-coded data values, for now. Services are\ndenoted in Spring Boot with the `@Service` annotation\n\n  ```java path=src/main/java/com/ibm/inventory_management/services/StockItemService.java\n     package com.ibm.inventory_management.services;\n\n     import static java.util.Arrays.asList;\n\n     import java.util.List;\n\n     import org.springframework.context.annotation.Primary;\n     import org.springframework.stereotype.Service;\n\n     import com.ibm.inventory_management.models.StockItem;\n\n      @Service\n     public class StockItemService implements StockItemApi {\n    @Override\n    public List<StockItem> listStockItems() {\n        return asList(\n                new StockItem(\"1\")\n                        .withName(\"Item 1\")\n                        .withStock(100)\n                        .withPrice(10.5)\n                        .withManufacturer(\"Sony\"),\n                new StockItem(\"2\")\n                        .withName(\"Item 2\")\n                        .withStock(150)\n                        .withPrice(100.0)\n                        .withManufacturer(\"Insignia\"),\n                new StockItem(\"3\")\n                        .withName(\"Item 3\")\n                        .withStock(10)\n                        .withPrice(1000.0)\n                        .withManufacturer(\"Panasonic\")\n        );\n    }\n    }\n  ```\n\n- Replace the `api()` method in the SwaggerDocket class to restrict the swagger page to only show the `/stock-items` API\n\n   ```java path=src/main/java/com/ibm/cloud_garage/swagger/SwaggerDocket.java\n      @Bean\n      public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(buildApiRequestHandler())\n                .paths(PathSelectors.regex(\".*stock-item.*\"))\n                .build()\n                .apiInfo(buildApiInfo());\n       }\n     ```\n\n#### Verify the service locally and push the changes\n\n- Start the application\n\n    ```bash\n    ./gradlew bootRun\n    ```\n\n\n\n<Tabs>\n\n<Tab label=\"Cloud Shell\">\n\n - To view the running app click on the **Eye Icon** on the top right and select the port `9080` this will open a browser tab and display the running app on that port.\n\n    ![View App](./images/viewapp.png)\n\n</Tab>\n\n<Tab label=\"Gitpod\">\n\n - Once you run the application,gitpod gives the option to make the port \"Public\".Once you make the port Public, it gives you the option to \"Open Preview\" or \"Open Browser\".\n\n    ![View App](./images/gitpod01.png)\n\n- Selecting \"Open Preview\" opens a window inside gitpod workspace tab.\n\n    ![OpenPreview](./images/gitpod02.png)\n\n- Selecting \"Open Browser\" opens a new browser tab for accessing the URL.\n\n</Tab>\n\n\n\n<Tab label=\"Code Ready Workspaces\">\n\n- Click on yes\n![CRW Open Link](./images/crwexposeservice.png)\n\n- Click on open link \n![CRW Open Link](./images/crwopenlink.png)\n\n- To view this application in new tab click top right corner arrow icon\n![CRW Open App](./images/crwopenapp.png)\n\n</Tab>\n\n<Tab label=\"Desktop/Laptop\">\n- Open a browser to `http://localhost:9080/swagger-ui.html`\n\n</Tab>\n\n\n</Tabs>\n\n- Run the service by selecting `Try it out` then `Execute`\n\n- You should see the data we defined in the service in the previous section\n\n- Commit and push the changes to git\n\n  ```bash\n     git add .\n     git commit -m \"Adds StockItem service implementation\"\n     git push\n   ```\n\n- The pipeline should kick off and you will be able to see the running service by running `oc endpoints -n dev-{initials}` and selecting the route of your service\n\n","fileAbsolutePath":"/workspace/ibm-gsi-cloudnative-journey/src/pages/developer-intermediate/inventory-svc/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}