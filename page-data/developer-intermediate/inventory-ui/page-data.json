{"componentChunkName":"component---src-pages-developer-intermediate-inventory-ui-index-mdx","path":"/developer-intermediate/inventory-ui/","result":{"pageContext":{"frontmatter":{"title":"Inventory UI"},"relativePagePath":"/developer-intermediate/inventory-ui/index.mdx","titleType":"page","MdxNode":{"id":"d9b6a995-f4aa-5156-b369-0a66a296406e","children":[],"parent":"3a494d1e-8072-5e2e-b563-13cf402182bb","internal":{"content":"---\ntitle: Inventory UI\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nDevelop and deploy the UI component of the inventory application\n\n</PageDescription>\n\n#### Setup\n\nGet the initial project created and register the pipeline for automated builds. Detailed instructions for\neach of these steps can be found in the [Deploying an App](/developer-intermediate/deploy-app) guide.\n\n- Create a new repository from the React UI Patterns <Globals name=\"template\" /> into your Git org - https://github.com/IBM/template-node-react/generate\n\n    In order to prevent naming collisions, name the repository `inventory-management-ui-{your initials}` replacing\n    `{your initials}` with your actual initials.\n\n- Clone the new repository to your machine\n\n- Run `npm install` to install the project dependencies\n\n- Go into the repository directory cloned and execute the following\n\n    ```\n    oc sync dev-{your initials} --dev\n    ```\n- Log into the cluster from the command-line then [register the pipeline](/developer-intermediate/deploy-app#register-the-app-in-a-devops-pipeline)\n\n    ```\n    oc pipeline --tekton\n    ```\n\n   replacing `{your initials}` with your actual initials\n\n- Execution of the above command. Give git credentials if prompted, and master as the git branch to use. When prompted for the pipeline, select igc-nodejs-v1-2-0.\n\n- Open the [pipeline to see it running](/developer-intermediate/deploy-app#view-your-application-pipeline)\n\n#### Create the initial components\n\nThe React <Globals name=\"template\" /> comes with a set UI components that implement 12 common UI Design Patterns. In the\ninitial UI, all of the components are included to create an interactive example of how they work.\nThe first step of building an application with the React <Globals name=\"template\" /> is to remove those components\nfrom the menu and to create new components built from the pattern components.\n\nBased on the requirements of this first use case, we will create a StockItemList component based on\nthe TableList pattern.\n\n- Open a terminal and start the application in development mode to see the initial UI and the changes as we make them\n\n```\nnpm run start:dev\n```\n- Access the running service. This service runs on port 3000.\n\n- Make a copy of the `TableList` pattern component from the `pattern-component` directory into the\n`components` folder. Rename the file and the class inside to `StockItemList`.\n\n\n```javascript path=client/src/components/StockItemList.jsx\nimport React, { Component } from \"react\";\nimport {\n  StructuredListWrapper,\n  StructuredListRow,\n  StructuredListCell,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListInput,\n  Icon\n} from \"carbon-components-react\";\nimport { iconCheckmarkSolid } from \"carbon-icons\";\n\nimport Header from \"../pattern-components/Header\";\nimport \"../pattern-components/patterns.scss\";\n\nclass StockItemList extends Component {\n  ...\n}\n\nexport default StockItemList;\n```\n\n- Update UIShell.jsx\n\n    - Update the `header` variable to whatever name you want. \"Big Blue Widgets\" is used in the example\n    - Update the `menuTitle` to \"Inventory Management\"\n    - Remove all the values from `menuItems`\n\n```javascript path=client/src/components/UIShell.jsx\nclass UIShell extends Component {\n  header = \"Big Blue Widgets\";\n  menuTitle = \"Inventory Management\";\n  menuItems = [\n    \"Stock Items\",\n  ];\n\n  ...\n}\n```\n\n- Update UIShellBody.jsx\n\n    - Remove all of the pattern values from the `components` map and add one entry for Stock Item List. The value on the\n    left is the label that is displayed and the value on the right is the class that should be loaded (e.g. `\"Stock Items\": StockItemList`).\n    **Note:** The label value needs to match the one used on `UIShell`\n    - Update the Use `Stock Items` as the default pattern name when none is given\n\n```javascript path=client/src/components/UIShellBody.jsx\nimport React, {Component} from \"react\";\nimport \"../pattern-components/patterns.scss\";\n\nimport StockItemList from \"./StockItemList\";\n\nclass UIShellBody extends Component {\n  components = {\n    \"Stock Items\": StockItemList\n  };\n  defaultComponent = \"Stock Items\";\n\n  render() {\n    const PatternName = this.components[\n      this.props.patternName || this.defaultComponent\n    ];\n    return (\n      <div className=\"pattern-container\">\n        <PatternName showDescription={true} />\n      </div>\n    );\n  }\n}\nexport default UIShellBody;\n```\n\n- With the application running in the first terminal, open a second terminal in the repository directory\nand push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Initial shell components\"\ngit push\n```\n\n\n- Return to the [pipeline to see it running](/developer-intermediate/deploy-app#view-your-application-pipeline)\n\n- Refresh the browser from earlier (or follow the steps from before to use `oc endpoints` to open the browser). The changes we just made should be reflected in the UI.\n\n#### Update StockItemList contents\n\nNow that we've created the initial components, we can start to customize the StockItemList to match\nthe data for our application.\n\n- Start the application in development mode (if not already running) with `npm run start:dev`\n\n- Update the `title` and `subtitle` with values for our Stock Items view.\n\n- Update the `columns` and `data` fields with the list of columns and sample data to match the UI. Set the `formatters` to `{}` for now.\n\n    The value in the `columns` array maps to one of the attributes in our data values\n    (e.g. `name` refers to the name attribute)\n\n- The result of these changes should look like the following:\n\n```javascript path=client/src/components/StockItemList.jsx\nclass StockItemList extends Component {\n    title = 'Stock Items';\n    subtitle = 'This is the current inventory of items';\n\n    columns = [\n      \"name\",\n      \"description\",\n      \"stock\",\n      \"unitPrice\",\n      \"picture\",\n      \"manufacturer\",\n    ];\n    formatters = {};\n    data = [\n      {\n        \"name\": \"Item 1\",\n        \"description\": \"The first item\",\n        \"stock\": 10,\n        \"unitPrice\": 100.0,\n        \"picture\": \"test\",\n        \"manufacturer\": \"unknown\",\n      },\n      {\n        \"name\": \"Item 2\",\n        \"description\": \"The second item\",\n        \"stock\": 15,\n        \"unitPrice\": 120.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Apple\",\n      },\n      {\n        \"name\": \"Item 3\",\n        \"description\": \"The third item\",\n        \"stock\": 20,\n        \"unitPrice\": 75.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Sony\",\n      }\n    ];\n\n    ...\n}\n```\n\n- View the new data in your local UI: `http://localhost:3000/`\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Updates the StockItemsList view\"\ngit push\n```\n\n- Look at the Jenkins pipeline and the deployed app\n\n#### Add a service component to get mock Stock Items\n\nSo far, we've built a UI that displays a hard-coded set of data in a table. Eventually, we want to\ndisplay dynamic data provided from a database in the table. As a first step towards that goal, we\nneed to separate the UI logic from the logic that retrieves the data. We will do that with a service\ncomponent. For this first pass the service component will just return mock data.\n\n- Create a directory called `services` under the client/src folder\n\n- Create a file named `stock-item-mock.service.js` in the service directory. Our\nStockItem service component will have a single asynchronous function called `listStockItems()`\nthat returns a list of StockItems.\n\n```javascript path=client/src/services/stock-item-mock.service.js\nexport class StockItemMockService {\n  async listStockItems() {\n    return [];\n  }\n}\n```\n\n- Implement the service by copying the data array from `StockItemList` and returning it in the function. You can add a call\nto `timer()` to simulate wait time\n\n```javascript path=client/src/services/stock-item-mock.service.js\nimport timer from '../util/timer';\n\nexport class StockItemMockService {\n  async listStockItems() {\n    // wait 1 second before returning data\n    await timer(1000);\n\n    return [\n      {\n        \"name\": \"Item 1\",\n        \"description\": \"The first item\",\n        \"stock\": 10,\n        \"unitPrice\": 100.0,\n        \"picture\": \"test\",\n        \"manufacturer\": \"unknown\",\n      },\n      {\n        \"name\": \"Item 2\",\n        \"description\": \"The second item\",\n        \"stock\": 15,\n        \"unitPrice\": 120.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Apple\",\n      },\n      {\n        \"name\": \"Item 3\",\n        \"description\": \"The third item\",\n        \"stock\": 20,\n        \"unitPrice\": 75.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Sony\",\n      }\n    ];\n  }\n}\n```\n\n- Update the components to pass the service in the properties\n\n```javascript path=client/src/App.test.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {StockItemMockService} from \"./services/stock-item-mock.service\";\n\ndescribe('App', () => {\n  test('canary verifies test infrastructure', () => {\n     expect(true).toEqual(true);\n  });\n\n  test('renders without crashing', () => {\n    const div = document.createElement('div');\n    ReactDOM.render(<App stockService={new StockItemMockService()}/>, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n});\n```\n\n```javascript path=client/src/App.jsx\nimport React, { Component } from \"react\";\nimport UIShell from \"./components/UIShell\";\nimport \"./App.scss\";\nimport {StockItemMockService} from \"./services/stock-item-mock.service\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stockService = props.stockService || new StockItemMockService();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UIShell stockService={this.stockService}/>\n      </div>\n    );\n  }\n}\n```\n\n```javascript path=client/src/components/UIShell.jsx\n...\n\nclass UIShell extends Component {\n  ...\n\n  render() {\n    return (\n      <div>\n        <Header aria-label=\"IBM Platform Name\">\n          <SkipToContent />\n          <HeaderName href=\"#\" prefix=\"IBM\">\n            {this.header}\n          </HeaderName>\n        </Header>\n        <SideNav aria-label=\"Side navigation\">\n          <SideNavItems>\n            <SideNavMenu\n              defaultExpanded\n              icon={<Fade20 />}\n              title={this.menuTitle}\n            >\n              {this.renderSideNavItems()}\n            </SideNavMenu>\n          </SideNavItems>\n        </SideNav>\n        <Content id=\"main-content\"><UIShellBody patternName={this.state.patternName} stockService={this.props.stockService} /></Content>\n      </div>\n    );\n  }\n}\nexport default UIShell;\n```\n\n```javascript path=client/src/components/UIShellBody.jsx\n...\n\nclass UIShellBody extends Component {\n  components = {\n    \"Stock Items\": StockItemList\n  };\n  defaultComponent = \"Stock Items\";\n\n  render() {\n    const PatternName = this.components[\n      this.props.patternName || this.defaultComponent\n    ];\n    return (\n      <div className=\"pattern-container\">\n        <PatternName showDescription={true} stockService={this.props.stockService} />\n      </div>\n    );\n  }\n}\nexport default UIShellBody;\n```\n\n- Update `StockItemList` to use the provided service\n\n```javascript path=src/components/StockItemList.jsx\n...\n\nclass StockItemList extends Component {\n  ...\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      selectedRow: 0,\n    };\n  }\n\n  async componentDidMount() {\n\n    this.setState({\n      data: await this.props.stockService.listStockItems()\n    });\n  }\n\n  onRowClick = id => {\n    this.setState({ selectedRow: id });\n  };\n\n  ...\n}\nexport default StockItemList;\n```\n- Update the render UI function in  `StockItemList` to display the values in UI\n\n```javascript path=client/src/components/StockItemList.jsx\nrenderRow = (row, id) => {\n    return (\n      <StructuredListRow key={id} onClick={() => this.onRowClick(id)}>\n        <div>\n          <StructuredListInput\n            id={`row-${id}`}\n            value=\"row-0\"\n            title=\"row-0\"\n            name=\"row-0\"\n            //defaultChecked={this.state.selectedRow === id}\n            checked={this.state.selectedRow === id}\n          />\n          <StructuredListCell>\n            <Icon\n              className=\"bx--structured-list-svg\"\n              icon={iconCheckmarkSolid}\n            />\n          </StructuredListCell>\n        </div>\n        {this.columns.map(col => {\n          const format = this.formatters[col] || function(val) { return val; };\n\n          return (\n            <StructuredListCell key={col} className=\"simple-list-row\">\n              {format(row[col])}\n            </StructuredListCell>\n          );\n        })}\n      </StructuredListRow>\n    );\n  };\n```\n\n```javascript path=client/src/components/StockItemList.jsx\n\n  render() {\n    const data = this.state.data;\n\n    return (\n      <div className=\"bx--grid pattern-container\">\n        <Header\n          title={this.title}\n          subtitle={this.subtitle}\n        />\n        <div className=\"bx--row\">\n          <div className=\"bx--col-xs-12\">\n            <StructuredListWrapper selection border>\n              <StructuredListHead>\n                <StructuredListRow head>\n                  <StructuredListCell head />\n                  {this.columns.map(key => {\n                    return (\n                      <StructuredListCell head key={key}>\n                        {key.charAt(0).toUpperCase() +\n                          key.slice(1).replace(/([A-Z])/g, \" $1\")}\n                      </StructuredListCell>\n                    );\n                  })}\n                </StructuredListRow>\n              </StructuredListHead>\n\n              <StructuredListBody>\n                {data.map((row, i) => {\n                  return this.renderRow(row, i);\n                })}\n              </StructuredListBody>\n            </StructuredListWrapper>\n          </div>\n        </div>\n      </div>\n    );\n  }\n```\n\n- View the new data in your local UI: `http://localhost:3000/`\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Adds a mock service\"\ngit push\n```\n\n- Look at the Jenkins pipeline and the deployed app\n\n#### Add a service that calls the BFF\n\nNow that we have a mock service that injects data, we can build an implementation of the service\nthat calls our BFF. For the service, we will use a package called `superagent` to make the calls\nto the BFF.\n\n- With npm, install the `superagent` and `@types/superagent` dependencies\n\n```bash\nnpm i -s superagent\nnpm i -D @types/superagent\n```\n\n- Create a service implementation in the `services` directory called `stock-item.service.js`\n\n```javascript path=client/src/services/stock-item.service.js\nexport class StockItemService {\n  async listStockItems() {\n    return [];\n  }\n}\n```\n\n- Add an implementation of `listStockItems()` that calls the BFF through the `/api` proxy\n\n```javascript path=client/src/services/stock-item.service.js\nimport * as superagent from 'superagent';\n\nexport class StockItemService {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl || '/api';\n  }\n\n  async listStockItems() {\n    return superagent\n      .get(this.baseUrl + '/stock-items')\n      .set('accept', 'application/json')\n      .then(res => {\n        console.log('Got response: ', res);\n        return res.body || [];\n      });\n  }\n}\n```\n\n**Note:** In dev mode, the proxy is configured in `client/package.json`. When running with the express\nserver, the proxy is configured in `server/routers/api.js`. By default, the value points to `localhost:3001`.\n\n- Update `App.jsx` to use the new service instead of the mock service.\n\n```javascript path=client/src/App.jsx\nimport React, { Component } from \"react\";\nimport UIShell from \"./components/UIShell\";\nimport \"./App.scss\";\n\nimport {StockItemService} from \"./services/stock-item.service\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stockService = props.stockService || new StockItemService();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UIShell stockService={this.stockService}/>\n      </div>\n    );\n  }\n}\nexport default App;\n```\n\n- Modify `connectsTo` property to the values.yaml file of the Helm chart. The value of the property should match the\nKubernetes service of the microservice. (For <Globals name=\"template\" /> projects, the service name is the same as the name of the\napplication which is that same as the name of the repository.)\n\n```yaml path=chart/base/values.yaml\n...\n\nconnectsTo: inventory-management-bff-{your initials}\n\n...\n```\n\n- Add a new environment variable named `API_HOST` to the list of existing environment variables in deployment.yaml.\nThe value of this environment variable should come from the `connectsTo` value we defined. You can add\n`| quote` to wrap the value in quotes in case the value is not formatted correctly.\n\n```yaml path=chart/base/templates/deployment.yaml\n  ...\n  env:\n    - name: INGRESS_HOST\n      value: \"\"\n    - name: PROTOCOLS\n      value: \"\"\n    - name: LOG_LEVEL\n      value: {{ .Values.logLevel | quote }}\n    - name: API_HOST\n      value: {{ printf \"%s:80\" .Values.connectsTo | quote }\n  ...\n```\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Updates the StockItemsList view\"\ngit push\n```\n\n## Summary\n\nYou have now completed the Micro App Guide demonstrating the Inventory solution.\n","type":"Mdx","contentDigest":"75d033cc952c2f80108bb1a3617838f7","owner":"gatsby-plugin-mdx","counter":1023},"frontmatter":{"title":"Inventory UI"},"exports":{},"rawBody":"---\ntitle: Inventory UI\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nDevelop and deploy the UI component of the inventory application\n\n</PageDescription>\n\n#### Setup\n\nGet the initial project created and register the pipeline for automated builds. Detailed instructions for\neach of these steps can be found in the [Deploying an App](/developer-intermediate/deploy-app) guide.\n\n- Create a new repository from the React UI Patterns <Globals name=\"template\" /> into your Git org - https://github.com/IBM/template-node-react/generate\n\n    In order to prevent naming collisions, name the repository `inventory-management-ui-{your initials}` replacing\n    `{your initials}` with your actual initials.\n\n- Clone the new repository to your machine\n\n- Run `npm install` to install the project dependencies\n\n- Go into the repository directory cloned and execute the following\n\n    ```\n    oc sync dev-{your initials} --dev\n    ```\n- Log into the cluster from the command-line then [register the pipeline](/developer-intermediate/deploy-app#register-the-app-in-a-devops-pipeline)\n\n    ```\n    oc pipeline --tekton\n    ```\n\n   replacing `{your initials}` with your actual initials\n\n- Execution of the above command. Give git credentials if prompted, and master as the git branch to use. When prompted for the pipeline, select igc-nodejs-v1-2-0.\n\n- Open the [pipeline to see it running](/developer-intermediate/deploy-app#view-your-application-pipeline)\n\n#### Create the initial components\n\nThe React <Globals name=\"template\" /> comes with a set UI components that implement 12 common UI Design Patterns. In the\ninitial UI, all of the components are included to create an interactive example of how they work.\nThe first step of building an application with the React <Globals name=\"template\" /> is to remove those components\nfrom the menu and to create new components built from the pattern components.\n\nBased on the requirements of this first use case, we will create a StockItemList component based on\nthe TableList pattern.\n\n- Open a terminal and start the application in development mode to see the initial UI and the changes as we make them\n\n```\nnpm run start:dev\n```\n- Access the running service. This service runs on port 3000.\n\n- Make a copy of the `TableList` pattern component from the `pattern-component` directory into the\n`components` folder. Rename the file and the class inside to `StockItemList`.\n\n\n```javascript path=client/src/components/StockItemList.jsx\nimport React, { Component } from \"react\";\nimport {\n  StructuredListWrapper,\n  StructuredListRow,\n  StructuredListCell,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListInput,\n  Icon\n} from \"carbon-components-react\";\nimport { iconCheckmarkSolid } from \"carbon-icons\";\n\nimport Header from \"../pattern-components/Header\";\nimport \"../pattern-components/patterns.scss\";\n\nclass StockItemList extends Component {\n  ...\n}\n\nexport default StockItemList;\n```\n\n- Update UIShell.jsx\n\n    - Update the `header` variable to whatever name you want. \"Big Blue Widgets\" is used in the example\n    - Update the `menuTitle` to \"Inventory Management\"\n    - Remove all the values from `menuItems`\n\n```javascript path=client/src/components/UIShell.jsx\nclass UIShell extends Component {\n  header = \"Big Blue Widgets\";\n  menuTitle = \"Inventory Management\";\n  menuItems = [\n    \"Stock Items\",\n  ];\n\n  ...\n}\n```\n\n- Update UIShellBody.jsx\n\n    - Remove all of the pattern values from the `components` map and add one entry for Stock Item List. The value on the\n    left is the label that is displayed and the value on the right is the class that should be loaded (e.g. `\"Stock Items\": StockItemList`).\n    **Note:** The label value needs to match the one used on `UIShell`\n    - Update the Use `Stock Items` as the default pattern name when none is given\n\n```javascript path=client/src/components/UIShellBody.jsx\nimport React, {Component} from \"react\";\nimport \"../pattern-components/patterns.scss\";\n\nimport StockItemList from \"./StockItemList\";\n\nclass UIShellBody extends Component {\n  components = {\n    \"Stock Items\": StockItemList\n  };\n  defaultComponent = \"Stock Items\";\n\n  render() {\n    const PatternName = this.components[\n      this.props.patternName || this.defaultComponent\n    ];\n    return (\n      <div className=\"pattern-container\">\n        <PatternName showDescription={true} />\n      </div>\n    );\n  }\n}\nexport default UIShellBody;\n```\n\n- With the application running in the first terminal, open a second terminal in the repository directory\nand push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Initial shell components\"\ngit push\n```\n\n\n- Return to the [pipeline to see it running](/developer-intermediate/deploy-app#view-your-application-pipeline)\n\n- Refresh the browser from earlier (or follow the steps from before to use `oc endpoints` to open the browser). The changes we just made should be reflected in the UI.\n\n#### Update StockItemList contents\n\nNow that we've created the initial components, we can start to customize the StockItemList to match\nthe data for our application.\n\n- Start the application in development mode (if not already running) with `npm run start:dev`\n\n- Update the `title` and `subtitle` with values for our Stock Items view.\n\n- Update the `columns` and `data` fields with the list of columns and sample data to match the UI. Set the `formatters` to `{}` for now.\n\n    The value in the `columns` array maps to one of the attributes in our data values\n    (e.g. `name` refers to the name attribute)\n\n- The result of these changes should look like the following:\n\n```javascript path=client/src/components/StockItemList.jsx\nclass StockItemList extends Component {\n    title = 'Stock Items';\n    subtitle = 'This is the current inventory of items';\n\n    columns = [\n      \"name\",\n      \"description\",\n      \"stock\",\n      \"unitPrice\",\n      \"picture\",\n      \"manufacturer\",\n    ];\n    formatters = {};\n    data = [\n      {\n        \"name\": \"Item 1\",\n        \"description\": \"The first item\",\n        \"stock\": 10,\n        \"unitPrice\": 100.0,\n        \"picture\": \"test\",\n        \"manufacturer\": \"unknown\",\n      },\n      {\n        \"name\": \"Item 2\",\n        \"description\": \"The second item\",\n        \"stock\": 15,\n        \"unitPrice\": 120.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Apple\",\n      },\n      {\n        \"name\": \"Item 3\",\n        \"description\": \"The third item\",\n        \"stock\": 20,\n        \"unitPrice\": 75.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Sony\",\n      }\n    ];\n\n    ...\n}\n```\n\n- View the new data in your local UI: `http://localhost:3000/`\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Updates the StockItemsList view\"\ngit push\n```\n\n- Look at the Jenkins pipeline and the deployed app\n\n#### Add a service component to get mock Stock Items\n\nSo far, we've built a UI that displays a hard-coded set of data in a table. Eventually, we want to\ndisplay dynamic data provided from a database in the table. As a first step towards that goal, we\nneed to separate the UI logic from the logic that retrieves the data. We will do that with a service\ncomponent. For this first pass the service component will just return mock data.\n\n- Create a directory called `services` under the client/src folder\n\n- Create a file named `stock-item-mock.service.js` in the service directory. Our\nStockItem service component will have a single asynchronous function called `listStockItems()`\nthat returns a list of StockItems.\n\n```javascript path=client/src/services/stock-item-mock.service.js\nexport class StockItemMockService {\n  async listStockItems() {\n    return [];\n  }\n}\n```\n\n- Implement the service by copying the data array from `StockItemList` and returning it in the function. You can add a call\nto `timer()` to simulate wait time\n\n```javascript path=client/src/services/stock-item-mock.service.js\nimport timer from '../util/timer';\n\nexport class StockItemMockService {\n  async listStockItems() {\n    // wait 1 second before returning data\n    await timer(1000);\n\n    return [\n      {\n        \"name\": \"Item 1\",\n        \"description\": \"The first item\",\n        \"stock\": 10,\n        \"unitPrice\": 100.0,\n        \"picture\": \"test\",\n        \"manufacturer\": \"unknown\",\n      },\n      {\n        \"name\": \"Item 2\",\n        \"description\": \"The second item\",\n        \"stock\": 15,\n        \"unitPrice\": 120.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Apple\",\n      },\n      {\n        \"name\": \"Item 3\",\n        \"description\": \"The third item\",\n        \"stock\": 20,\n        \"unitPrice\": 75.5,\n        \"picture\": \"test1\",\n        \"manufacturer\": \"Sony\",\n      }\n    ];\n  }\n}\n```\n\n- Update the components to pass the service in the properties\n\n```javascript path=client/src/App.test.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {StockItemMockService} from \"./services/stock-item-mock.service\";\n\ndescribe('App', () => {\n  test('canary verifies test infrastructure', () => {\n     expect(true).toEqual(true);\n  });\n\n  test('renders without crashing', () => {\n    const div = document.createElement('div');\n    ReactDOM.render(<App stockService={new StockItemMockService()}/>, div);\n    ReactDOM.unmountComponentAtNode(div);\n  });\n});\n```\n\n```javascript path=client/src/App.jsx\nimport React, { Component } from \"react\";\nimport UIShell from \"./components/UIShell\";\nimport \"./App.scss\";\nimport {StockItemMockService} from \"./services/stock-item-mock.service\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stockService = props.stockService || new StockItemMockService();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UIShell stockService={this.stockService}/>\n      </div>\n    );\n  }\n}\n```\n\n```javascript path=client/src/components/UIShell.jsx\n...\n\nclass UIShell extends Component {\n  ...\n\n  render() {\n    return (\n      <div>\n        <Header aria-label=\"IBM Platform Name\">\n          <SkipToContent />\n          <HeaderName href=\"#\" prefix=\"IBM\">\n            {this.header}\n          </HeaderName>\n        </Header>\n        <SideNav aria-label=\"Side navigation\">\n          <SideNavItems>\n            <SideNavMenu\n              defaultExpanded\n              icon={<Fade20 />}\n              title={this.menuTitle}\n            >\n              {this.renderSideNavItems()}\n            </SideNavMenu>\n          </SideNavItems>\n        </SideNav>\n        <Content id=\"main-content\"><UIShellBody patternName={this.state.patternName} stockService={this.props.stockService} /></Content>\n      </div>\n    );\n  }\n}\nexport default UIShell;\n```\n\n```javascript path=client/src/components/UIShellBody.jsx\n...\n\nclass UIShellBody extends Component {\n  components = {\n    \"Stock Items\": StockItemList\n  };\n  defaultComponent = \"Stock Items\";\n\n  render() {\n    const PatternName = this.components[\n      this.props.patternName || this.defaultComponent\n    ];\n    return (\n      <div className=\"pattern-container\">\n        <PatternName showDescription={true} stockService={this.props.stockService} />\n      </div>\n    );\n  }\n}\nexport default UIShellBody;\n```\n\n- Update `StockItemList` to use the provided service\n\n```javascript path=src/components/StockItemList.jsx\n...\n\nclass StockItemList extends Component {\n  ...\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      selectedRow: 0,\n    };\n  }\n\n  async componentDidMount() {\n\n    this.setState({\n      data: await this.props.stockService.listStockItems()\n    });\n  }\n\n  onRowClick = id => {\n    this.setState({ selectedRow: id });\n  };\n\n  ...\n}\nexport default StockItemList;\n```\n- Update the render UI function in  `StockItemList` to display the values in UI\n\n```javascript path=client/src/components/StockItemList.jsx\nrenderRow = (row, id) => {\n    return (\n      <StructuredListRow key={id} onClick={() => this.onRowClick(id)}>\n        <div>\n          <StructuredListInput\n            id={`row-${id}`}\n            value=\"row-0\"\n            title=\"row-0\"\n            name=\"row-0\"\n            //defaultChecked={this.state.selectedRow === id}\n            checked={this.state.selectedRow === id}\n          />\n          <StructuredListCell>\n            <Icon\n              className=\"bx--structured-list-svg\"\n              icon={iconCheckmarkSolid}\n            />\n          </StructuredListCell>\n        </div>\n        {this.columns.map(col => {\n          const format = this.formatters[col] || function(val) { return val; };\n\n          return (\n            <StructuredListCell key={col} className=\"simple-list-row\">\n              {format(row[col])}\n            </StructuredListCell>\n          );\n        })}\n      </StructuredListRow>\n    );\n  };\n```\n\n```javascript path=client/src/components/StockItemList.jsx\n\n  render() {\n    const data = this.state.data;\n\n    return (\n      <div className=\"bx--grid pattern-container\">\n        <Header\n          title={this.title}\n          subtitle={this.subtitle}\n        />\n        <div className=\"bx--row\">\n          <div className=\"bx--col-xs-12\">\n            <StructuredListWrapper selection border>\n              <StructuredListHead>\n                <StructuredListRow head>\n                  <StructuredListCell head />\n                  {this.columns.map(key => {\n                    return (\n                      <StructuredListCell head key={key}>\n                        {key.charAt(0).toUpperCase() +\n                          key.slice(1).replace(/([A-Z])/g, \" $1\")}\n                      </StructuredListCell>\n                    );\n                  })}\n                </StructuredListRow>\n              </StructuredListHead>\n\n              <StructuredListBody>\n                {data.map((row, i) => {\n                  return this.renderRow(row, i);\n                })}\n              </StructuredListBody>\n            </StructuredListWrapper>\n          </div>\n        </div>\n      </div>\n    );\n  }\n```\n\n- View the new data in your local UI: `http://localhost:3000/`\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Adds a mock service\"\ngit push\n```\n\n- Look at the Jenkins pipeline and the deployed app\n\n#### Add a service that calls the BFF\n\nNow that we have a mock service that injects data, we can build an implementation of the service\nthat calls our BFF. For the service, we will use a package called `superagent` to make the calls\nto the BFF.\n\n- With npm, install the `superagent` and `@types/superagent` dependencies\n\n```bash\nnpm i -s superagent\nnpm i -D @types/superagent\n```\n\n- Create a service implementation in the `services` directory called `stock-item.service.js`\n\n```javascript path=client/src/services/stock-item.service.js\nexport class StockItemService {\n  async listStockItems() {\n    return [];\n  }\n}\n```\n\n- Add an implementation of `listStockItems()` that calls the BFF through the `/api` proxy\n\n```javascript path=client/src/services/stock-item.service.js\nimport * as superagent from 'superagent';\n\nexport class StockItemService {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl || '/api';\n  }\n\n  async listStockItems() {\n    return superagent\n      .get(this.baseUrl + '/stock-items')\n      .set('accept', 'application/json')\n      .then(res => {\n        console.log('Got response: ', res);\n        return res.body || [];\n      });\n  }\n}\n```\n\n**Note:** In dev mode, the proxy is configured in `client/package.json`. When running with the express\nserver, the proxy is configured in `server/routers/api.js`. By default, the value points to `localhost:3001`.\n\n- Update `App.jsx` to use the new service instead of the mock service.\n\n```javascript path=client/src/App.jsx\nimport React, { Component } from \"react\";\nimport UIShell from \"./components/UIShell\";\nimport \"./App.scss\";\n\nimport {StockItemService} from \"./services/stock-item.service\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stockService = props.stockService || new StockItemService();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UIShell stockService={this.stockService}/>\n      </div>\n    );\n  }\n}\nexport default App;\n```\n\n- Modify `connectsTo` property to the values.yaml file of the Helm chart. The value of the property should match the\nKubernetes service of the microservice. (For <Globals name=\"template\" /> projects, the service name is the same as the name of the\napplication which is that same as the name of the repository.)\n\n```yaml path=chart/base/values.yaml\n...\n\nconnectsTo: inventory-management-bff-{your initials}\n\n...\n```\n\n- Add a new environment variable named `API_HOST` to the list of existing environment variables in deployment.yaml.\nThe value of this environment variable should come from the `connectsTo` value we defined. You can add\n`| quote` to wrap the value in quotes in case the value is not formatted correctly.\n\n```yaml path=chart/base/templates/deployment.yaml\n  ...\n  env:\n    - name: INGRESS_HOST\n      value: \"\"\n    - name: PROTOCOLS\n      value: \"\"\n    - name: LOG_LEVEL\n      value: {{ .Values.logLevel | quote }}\n    - name: API_HOST\n      value: {{ printf \"%s:80\" .Values.connectsTo | quote }\n  ...\n```\n\n- Push the changes we've made to the repository\n\n```bash\ngit add .\ngit commit -m \"Updates the StockItemsList view\"\ngit push\n```\n\n## Summary\n\nYou have now completed the Micro App Guide demonstrating the Inventory solution.\n","fileAbsolutePath":"/workspace/ibm-gsi-cloudnative-journey/src/pages/developer-intermediate/inventory-ui/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}