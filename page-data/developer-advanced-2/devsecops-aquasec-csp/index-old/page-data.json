{"componentChunkName":"component---src-pages-developer-advanced-2-devsecops-aquasec-csp-index-old-mdx","path":"/developer-advanced-2/devsecops-aquasec-csp/index-old/","result":{"pageContext":{"frontmatter":{"title":"DevSecOps with Aquasec CSP"},"relativePagePath":"/developer-advanced-2/devsecops-aquasec-csp/index-old.mdx","titleType":"page","MdxNode":{"id":"b930f82e-ea08-52b5-8f6d-ab7c67b381f1","children":[],"parent":"347c6dcf-7c09-5236-93e5-d5461b19a608","internal":{"content":"---\ntitle: DevSecOps with Aquasec CSP\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nDevSecOps with Aquasec CSP\n\n</PageDescription>\n\n## Guide\n\nAqua CSP provides full lifecycle security for your Cloud-Native applications (containers, orchestrators, cloud VMs, and serverless functions) at a very granular level. Aqua includes preventive controls to secure the development pipeline; protects applications in runtime; detects and blocks attacks; and provides visibility and auditing for security risk management and compliance.\n\nAqua CSP:\n\n   * Integrates with your existing workflows for building, shipping, running, and securing your cloud workloads\n   * Works with the leading orchestrators and cloud provider platforms\n   * Secures environments consisting of servers running Linux and Windows, as well as CaaS  and FaaS cloud services\n   * Provides you with full audit logs of security-related events that have occurred on your hosts or in your containers and serverless functions\n\n## Version\nOn IBM Managed Openshift 4.3 , the installation of Aqua CSP 4.6 was carried out\n\n## Architecture :\n ![Aqua CSP Architecture ](/images/Aqua-CSP-Architecture.png \"Aqua CSP Ar chitecture\")\n\n## Key Features :\n Aqua integrates within your development workflows (build, ship, and run phases) to provide full lifecycle security for your cloud workloads, running across VMs, container platforms, and serverless functions.\n\n* Container Runtime Protection for protecting containers at runtime against malicious and unauthorized activities\n* Image Assurance for assessing container images against vulnerabilities, malware, secrets, and security best practices\n* Host Assurance for assessing VMs against vulnerabilities, malware, and security best practices (e.g., CIS benchmarks)\n* Host Runtime Protection for protecting your VMs against malicious and unauthorized activities\n* Function Assurance and Runtime Protection for serverless functions\n* Network Micro-Segmentation using automated discovery and firewall rules for cloud workloads\n* Monitor host logins, both successful and failed\n* Vulnerability Shield™ (vShield), a virtual patch for vulnerabilities using a runtime policy that prevents vulnerability exploitation\n\n\n## Installation on IBM Cloud Managed Openshift v4.3 :\nThe Aqua Server components ( Server, DB Gateway ) are deployed as Pods and Services, while the Aqua Enforcer is deployed as a DaemonSet.\n\n### Installation Guide for AquaSec CSP on IBM Managed Openshift Cluster 4.3\n\nAqua CSP is installed on IBM Managed Openshift Cluster 4.3 leveraging the steps detailed out below\n\nMake sure you have the following available:\n\n* Your Aqua credentials: Username and password\n* Your Aqua CSP License Token\n\n#### 1. Login into Openshift\nLogin in as an OpenShift with your token so you can run the oc adm commands:\n```\noc login --token=<token> -server=https://c104-e.us-east.containers.cloud.ibm.com:31814\n```\n\n####\t2. Create Aqua Project\nThe commands below will create a new OpenShift project (aqua) for the Aqua components\n```\noc new-project aqua\n```\n\n#### 3. Create a Service Account\nCreate the service account \"aqua-sa\" which will be used for assigning privileges to the aqua project\n ```\n oc create serviceaccount aqua-sa -n aqua serviceaccount/aqua-sa created\n```\n\n#### 4. Add cluster role and scc to account\nAdd cluster role for the \"aqua-sa\" service account\n```\noc adm policy add-cluster-role-to-user cluster-reader system:serviceaccount:aqua:aqua-sa\n```\n\nAdd security context constraints (scc) for the \"aqua-sa\" service account\n```\noc adm policy add-scc-to-user privileged system:serviceaccount:aqua:aqua-sa\n```\n```\noc adm policy add-scc-to-user hostaccess system:serviceaccount:aqua:aqua-sa\n```\n\n#### 5.\tCreate Aqua registry secret\nSet up OpenShift secrets called \"aqua-registry\"\n```\noc create secret docker-registry aqua-registry --docker-server=registry.aquasec.com –docker-username=<AQUA_USERNAME> --docker-password=<AQUA_PASSWORD> --dockeremail=no@email.com -n aqua\n```\n\nReplace `<AQUA_USERNAME>` and `<AQUA_PASSWORD>` with the credentials\n#you have received from Aqua Security.\n\n#### 6. Add the \"aqua-registry\" secret to the \"aqua-sa\" service account\n```\noc secrets add aqua-sa aqua-registry --for=pull -n aqua\n```\n\n#### 7.\tCreate the database password secret\nCreate the database password secret.\nReplace <DB_PASSWORD> with the password of your choice.\nThis needs to be done for both managed or internal DBs.\nSet up OpenShift secret called  \"aqua-db\".\n ```\noc create secret generic aqua-db –-from-literal=password=<dbpasDB_PASSWORDsword> -n aqua\n ```\n\n #### 8.\tCreate Cluster Role and Role Bindings\nTo search and scan images from an OpenShift integrated registry,deploy these manifest files\n\n ```\noc create -f cluster-role.yaml\n ```\n  ```\noc create -f cluster-role-binding.yaml\n ```\n\n#### 9.\tDeploy CSP component : DB\nTo deploy an internal DB (not recommended for production usage)\n\nCreate persistent storage for the DB\n ```\noc create -f aqua-db-pvc.yaml\n ```\nCheck that PVC is created successfully by running\n\n```\n oc get pvc\n```\n\nNow that PVC is created successfully , go ahead with the db deployment\n```\noc create -f db-deployment-vis.yaml\n```\n\nCheck the deployment is successful by running\n```\noc get pods\n```\nCreate a service for the DB\n```\noc create -f db-service.yaml\n```\nCheck service is created successfully\n```\noc get svc\n```\n\n#### 10.\tDeploy the Aqua Server\n\nCreate persistent storage for the Server\n```\noc create -f aqua-web-pvc.yaml\n```\nCheck that PVC is craeted successfully\n```\noc get pvc\n```\nCreate Server Deployment\n```\noc create -f server-deployment.yaml\n```\nCreate a service for the Server\n```\noc create -f server-service.yaml\n```\nCheck service is created successfully\n```\noc get svc\n```\nNext create a route for the Server\n```\noc create -f server-route.yaml\n```\n\n#### 11.\tDeploy the Aqua Gateway\n\nCreate the Gateway Deployment\n```\noc create -f gatewaydeployment.yaml\n```\n\nCreate the Gateway Service\n```\noc create -f gatewayservice.yaml\n```\n\n#### 12.\tCheck the deployment\nRun the below command to check the status of all deployments\n```\noc status\n```\n\nExample Output\n```\nSmiths-MBP-d81f:4. aqua gateway smith$ oc status\n\nIn project aqua on server https://c104-e.useast.containers.cloud.ibm.com:31814\n\nsvc/aqua-db - 172.21.109.50:5432\n  deployment/aqua-db deploys registry.aquasec.com/database:4.6     deployment #1 running for about an hour - 1 pod\n\nsvc/aqua-gateway - 172.21.215.125 ports 8443, 3622\n  deployment/aqua-gateway deploys registry.aquasec.com/gateway:4.6\n    deployment #1 running for 57 seconds - 1 pod\n\nhttp://aqua-web-aqua.gsi-learning-ocp437ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-\neast.containers.appdomain.cloud to pod port 8080 (svc/aqua-web)   deployment/aqua-web deploys registry.aquasec.com/console:4.6     deployment #1 running for 32 minutes - 1 pod\n```\n\n#### 13.\tLogin into Aqua CSP console\nYou need to point your web browser to the IP address or DNS name of the Aqua Server.\n\nRun the command below to get the IP address or DNS name of the Aqua Server.\n```\noc get route/aqua-web -n aqua\n```\nThe Aqua Server IP address or DNS name will appear as shown under HOST/PORT, as seen in this example:\n\n```\nNAME       HOST/PORT\nPATH      SERVICES   PORT      TERMINATION   WILDCARD\naqua-web   aqua-web-aqua.gsi-learning-ocp437ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-\neast.containers.appdomain.cloud             aqua-web   8080                    None\n```\n\nLogin to this address or DNS name, as shown in this example (port number is not required):\n\n http://aqua-web-aqua.gsilearning-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.useast.containers.appdomain.cloud\n\nYou should see the screen shown below. When you access the Aqua Server for the first time, you must enter and confirm the password for the administrator username.\n\n ![Aqua CSP Login](/images/Aqua-Login-Creation.png \"Aqua CSP Login\")\n\n Apply license information which you would have received from the link https://success.aquasec.com/#/licenses and click  Accept\n\n\n  ![Aqua CSP License ](/images/Aqua-License.png \"Aqua CSP License\")\n\nYou are now logged in as administrator. The Aqua Dashboard will be displayed similarly to the screenshot below:\n\n![Aqua CSP Dashboard ](/images/Aqua-Dashboard.png \"Aqua CSP Dashboard\")\n\nIn the Aqua UI: Navigate to System > Aqua Gateways. You should see that the Aqua Gateway is connected (green).\n\n![Aqua CSP Gateway ](/images/Aqua-Gateway.png \"Aqua CSP Gateway\")\n\n#### 14.\tInstall the Enforcers\nBy default, the Aqua Enforcer runs as a privileged container.\nDeploy Aqua Enforcers across your OpenShift cluster by using a Kubernetes DaemonSet, which automatically deploys a single Aqua Enforcer container on each node in your cluster.\n\nEnforcer group is a set of zero or more Aqua Enforcers with the same configuration.\n\nClick on Enforcers – click on “Add Enforcer Group”\n\n![Aqua CSO Add Enforcer ](/images/Aqua-Add-Enforcer-Group.png \"Aqua Add Enforcer Group\")\n\nOn the Aqua UI  go to Enforcers > Create new group screen that appears, fill in the settings as shown\n\n* Orchestrator: OpenShift\n* Service Account: aqua-sa\n* Project: aqua\n\n![Aqua CSO Add Enforcer 1](/images/Aqua-Add-Enforcer-Group1.png \"Aqua Add Enforcer Group 2\")\n\nNext fill up the security settings\n\n![Aqua CSO Add Enforcer 2](/images/Aqua-Add-Enforcer-Group2.png \"Aqua Add Enforcer Group 2\")\n\nClick Create Group. You will see a pop-up window titled \"Install Command\",\n\n\n![Aqua CSO Add Enforcer YAML](/images/Aqua-Add-Enforcer-Group-YAML.png \"Aqua Add Enforcer Group YAML\")\n\nAnd then click on Install Command\n\nScroll to the bottom of the screen, and click Copy to Clipboard to copy the DaemonSet YAML text to the clipboard. Save the text as the file aqua-enforcer-new-43.yaml on your host and Click Close.\n\n#### 15. Deploy the Enforcers\nA byproduct of the Enforcer group creation is the DaemonSet required for OpenShift. Aqua does not automatically deploy the Enforcer on the host; you do this with the oc create command. You can run this command to deploy Enforcers on one or more hosts.\n\n```\noc create -f aqua-enforcer-new-43.yaml\n```\nCheck that the daemon set is created successfully.\n```\noc get ds\n```\n\nNow that we have daemonsets running  ,The enforcers are now available :\n\n![Aqua CSP  Enforcers Listed ](/images/Aqua-Add-Enforcer-Group-YAML.png \"Aqua CSP  Enforcers Listed\")\n\n\n#### 16. Check the Aqua CSP Dashboard\nThe dashboard now has data populated based on containers on cluster.\n\n![Aqua CSP Dashboard Populated  ](/images/Aqua-Dashboard-populated.png \"Aqua CSP Dashboard Populated\")\n\n\n## CI/ CD leveraging Jenkins - Jenkins Configuration for AQUA CSP\nYou can use the Aqua Security Scanner plugin for Jenkins to scan images in the build pipeline in order to find vulnerabilities. You can also scan images that have been pushed to a registry.\nThis plugin is installed in Jenkins. Once installed, you include details for scanning the image in the build process. During the build process, the image is scanned by the scanner and, optionally, actions are taken if the scan results are negative. Scanning results can be viewed in Jenkins.\n\nDuring the build process, the image is scanned by the scanner and, optionally, actions are taken if the scan results are negative. Scanning results can be viewed in Jenkins.\n\n### Jenkins Plugin Installation & Configuration\n\n#### 1.\tAdd user with role scanner\n* In the Aqua UI: Navigate to System > Users and Roles.\n* Click Add Users. Enter details for a new user, with role Scanner.\n\n![Aqua CSP Add scanner user ](/images/Aqua-Jenkins-scannerrole-user.png \"Aqua CSP add scanner user \")\n\n\n#### 2. Install and configure the Jenkins plugin\n\nIn Jenkins: Select Manage Jenkins and then select Manage Plugins from the list.\nMake sure that the list of available plugins is up to date.\n\nInstall the Jenkins plugin\n* In Jenkins: Select Manage Jenkins -> Manage Plugins\n* Select the Available tab, search for \"Aqua Security Scanner\", and select it.\n* Click  Install without restart. This will install the plugin\n\n![Jenkins Add Aqua Plugin](/images/Aqua-Jenkins-Plugins.png \"Jenkins Add Aqua Plugin \")\n\nCheck the plugin is successfully installed\n\n![Jenkins Aqua Plugin installed](/images/Aqua-Jenkins-Plugins-installed.png \"Jenkins Add Aqua Plugin installed \")\n\n#### 3. Configure the Jenkins plugin\nIn Jenkins:\n* Select Manage Jenkins, then select Configure System.\n* In the Aqua Security section and fill in the following fields:\n the scanner image, Aqua Server URL, scanner user created in Aqua in the previous step, and the password.\n* You can also optionally specify the scan timeout (where 0 means unlimited) and include additional docker run options (for example: if you want to run the scanner with --privileged parameters you can add it here).\n* Select \"Do not verify TLS certificates\" if you are working in an environment (such as a development environment) without certificates.\n\n![Jenkins Aqua Configuration](/images/Aqua-Jenkins-Configuration.png \"Jenkins  Aqua Configurayion \")\n\n\n#### 4. Obtain the Aqua scanner binary Download the scanner image on Jenkins machine\n\n```\ndocker login registry.aquasec.com -u smith_naik@in.ibm.com -p <your-aqua-password>\n```\n```\ndocker pull registry.aquasec.com/scanner:4.6\n```\n\n\n### Jenkins Freestyle project - Scan via Aqua CSP\n\nYou can use the plugin for Jenkins in the build process in Freestyle jobs. You can configure the job to scan images during the build process, or after the build completes and the image is pushed to a registry.\n\nIn the Configure page for a job, click Add Build Step Select \"Aqua Security\".\n\n* Select the action to be taken when image doesn't comply with Aqua policy. The option \"Perform the action defined in Aqua's policy\" refers to the action specified in the Image Assurance Policy\n\n* Select the image to be scanned.\n\n* If the image is local (not in a registry), select Local image, and enter the image name. If the image is in a registry, select Hosted image, and enter the URL for the registry and the image name.\n\n* Locally hosted images will be scanned with the Default Image Assurance Policy. Images hosted in a registry will be scanned with all Image Assurance Policies that are applicable (according to the scope of the policy)\n\n![Jenkins Aqua Scan ](/images/Aqua-Jenkins-Scan.png \"Jenkins  Aqua Scan \")\n\nAfter you run the build , the console will show output like this:\n\n![Jenkins Aqua Freestle Ressults](/images/Aqua-Jenkins-Scan-Result-Freestyle.png \"Jenkins Aqua Freestle Ressults \")\n\nYou can also see results of the scan as an HTML page. In the Jenkins build menu, select Aqua Security Scanner, and then select the job whose results you wish to see. The results will appear like this.\n\n\nAlso on Aqua CSP , you can see the Images ->CI/CD scans\n\n![Jenkins Aqua Freestle Ressults](/images/Aqua-Jenkins-Images-CI:CD1.png \"Jenkins Aqua Freestle Ressults \")\n\nDrill down\n\n![Jenkins Aqua Freestle Ressults](/images/Aqua-Jenkins-Images-CI:CD2.png \"Jenkins Aqua Freestle Ressults \")\n\n\n### Jenkins Freestyle project - Scan via Aqua CSP\n\nYou can use the plugin for Jenkins in the build process in Pipeline jobs. You can configure the job to scan images during the build process, or after the build completes and the image is pushed to a registry.\n\nIn Pipeline jobs, the build step for Aqua scanning is included in a pipeline script, as part of the job configuration.\n\n* In Jenkins, in the Configure page for a job, scroll to the Pipeline section.\n* To scan a locally hosted image, include a snippet such as this in the pipeline script.\n* Replace the localImage parameter value with the identifier of the actual image in your pipeline.\n\nYou may also use the Jenkins Snippet Generator. Click Pipeline Syntax to get started:\n\nEnter details for the image,  and then click Generate Pipeline Script. Copy this to the pipeline script.\n\n\n\n\n\n\n","type":"Mdx","contentDigest":"80c486fbb1f85a001c47380af2db4e6f","owner":"gatsby-plugin-mdx","counter":997},"frontmatter":{"title":"DevSecOps with Aquasec CSP"},"exports":{},"rawBody":"---\ntitle: DevSecOps with Aquasec CSP\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nDevSecOps with Aquasec CSP\n\n</PageDescription>\n\n## Guide\n\nAqua CSP provides full lifecycle security for your Cloud-Native applications (containers, orchestrators, cloud VMs, and serverless functions) at a very granular level. Aqua includes preventive controls to secure the development pipeline; protects applications in runtime; detects and blocks attacks; and provides visibility and auditing for security risk management and compliance.\n\nAqua CSP:\n\n   * Integrates with your existing workflows for building, shipping, running, and securing your cloud workloads\n   * Works with the leading orchestrators and cloud provider platforms\n   * Secures environments consisting of servers running Linux and Windows, as well as CaaS  and FaaS cloud services\n   * Provides you with full audit logs of security-related events that have occurred on your hosts or in your containers and serverless functions\n\n## Version\nOn IBM Managed Openshift 4.3 , the installation of Aqua CSP 4.6 was carried out\n\n## Architecture :\n ![Aqua CSP Architecture ](/images/Aqua-CSP-Architecture.png \"Aqua CSP Ar chitecture\")\n\n## Key Features :\n Aqua integrates within your development workflows (build, ship, and run phases) to provide full lifecycle security for your cloud workloads, running across VMs, container platforms, and serverless functions.\n\n* Container Runtime Protection for protecting containers at runtime against malicious and unauthorized activities\n* Image Assurance for assessing container images against vulnerabilities, malware, secrets, and security best practices\n* Host Assurance for assessing VMs against vulnerabilities, malware, and security best practices (e.g., CIS benchmarks)\n* Host Runtime Protection for protecting your VMs against malicious and unauthorized activities\n* Function Assurance and Runtime Protection for serverless functions\n* Network Micro-Segmentation using automated discovery and firewall rules for cloud workloads\n* Monitor host logins, both successful and failed\n* Vulnerability Shield™ (vShield), a virtual patch for vulnerabilities using a runtime policy that prevents vulnerability exploitation\n\n\n## Installation on IBM Cloud Managed Openshift v4.3 :\nThe Aqua Server components ( Server, DB Gateway ) are deployed as Pods and Services, while the Aqua Enforcer is deployed as a DaemonSet.\n\n### Installation Guide for AquaSec CSP on IBM Managed Openshift Cluster 4.3\n\nAqua CSP is installed on IBM Managed Openshift Cluster 4.3 leveraging the steps detailed out below\n\nMake sure you have the following available:\n\n* Your Aqua credentials: Username and password\n* Your Aqua CSP License Token\n\n#### 1. Login into Openshift\nLogin in as an OpenShift with your token so you can run the oc adm commands:\n```\noc login --token=<token> -server=https://c104-e.us-east.containers.cloud.ibm.com:31814\n```\n\n####\t2. Create Aqua Project\nThe commands below will create a new OpenShift project (aqua) for the Aqua components\n```\noc new-project aqua\n```\n\n#### 3. Create a Service Account\nCreate the service account \"aqua-sa\" which will be used for assigning privileges to the aqua project\n ```\n oc create serviceaccount aqua-sa -n aqua serviceaccount/aqua-sa created\n```\n\n#### 4. Add cluster role and scc to account\nAdd cluster role for the \"aqua-sa\" service account\n```\noc adm policy add-cluster-role-to-user cluster-reader system:serviceaccount:aqua:aqua-sa\n```\n\nAdd security context constraints (scc) for the \"aqua-sa\" service account\n```\noc adm policy add-scc-to-user privileged system:serviceaccount:aqua:aqua-sa\n```\n```\noc adm policy add-scc-to-user hostaccess system:serviceaccount:aqua:aqua-sa\n```\n\n#### 5.\tCreate Aqua registry secret\nSet up OpenShift secrets called \"aqua-registry\"\n```\noc create secret docker-registry aqua-registry --docker-server=registry.aquasec.com –docker-username=<AQUA_USERNAME> --docker-password=<AQUA_PASSWORD> --dockeremail=no@email.com -n aqua\n```\n\nReplace `<AQUA_USERNAME>` and `<AQUA_PASSWORD>` with the credentials\n#you have received from Aqua Security.\n\n#### 6. Add the \"aqua-registry\" secret to the \"aqua-sa\" service account\n```\noc secrets add aqua-sa aqua-registry --for=pull -n aqua\n```\n\n#### 7.\tCreate the database password secret\nCreate the database password secret.\nReplace <DB_PASSWORD> with the password of your choice.\nThis needs to be done for both managed or internal DBs.\nSet up OpenShift secret called  \"aqua-db\".\n ```\noc create secret generic aqua-db –-from-literal=password=<dbpasDB_PASSWORDsword> -n aqua\n ```\n\n #### 8.\tCreate Cluster Role and Role Bindings\nTo search and scan images from an OpenShift integrated registry,deploy these manifest files\n\n ```\noc create -f cluster-role.yaml\n ```\n  ```\noc create -f cluster-role-binding.yaml\n ```\n\n#### 9.\tDeploy CSP component : DB\nTo deploy an internal DB (not recommended for production usage)\n\nCreate persistent storage for the DB\n ```\noc create -f aqua-db-pvc.yaml\n ```\nCheck that PVC is created successfully by running\n\n```\n oc get pvc\n```\n\nNow that PVC is created successfully , go ahead with the db deployment\n```\noc create -f db-deployment-vis.yaml\n```\n\nCheck the deployment is successful by running\n```\noc get pods\n```\nCreate a service for the DB\n```\noc create -f db-service.yaml\n```\nCheck service is created successfully\n```\noc get svc\n```\n\n#### 10.\tDeploy the Aqua Server\n\nCreate persistent storage for the Server\n```\noc create -f aqua-web-pvc.yaml\n```\nCheck that PVC is craeted successfully\n```\noc get pvc\n```\nCreate Server Deployment\n```\noc create -f server-deployment.yaml\n```\nCreate a service for the Server\n```\noc create -f server-service.yaml\n```\nCheck service is created successfully\n```\noc get svc\n```\nNext create a route for the Server\n```\noc create -f server-route.yaml\n```\n\n#### 11.\tDeploy the Aqua Gateway\n\nCreate the Gateway Deployment\n```\noc create -f gatewaydeployment.yaml\n```\n\nCreate the Gateway Service\n```\noc create -f gatewayservice.yaml\n```\n\n#### 12.\tCheck the deployment\nRun the below command to check the status of all deployments\n```\noc status\n```\n\nExample Output\n```\nSmiths-MBP-d81f:4. aqua gateway smith$ oc status\n\nIn project aqua on server https://c104-e.useast.containers.cloud.ibm.com:31814\n\nsvc/aqua-db - 172.21.109.50:5432\n  deployment/aqua-db deploys registry.aquasec.com/database:4.6     deployment #1 running for about an hour - 1 pod\n\nsvc/aqua-gateway - 172.21.215.125 ports 8443, 3622\n  deployment/aqua-gateway deploys registry.aquasec.com/gateway:4.6\n    deployment #1 running for 57 seconds - 1 pod\n\nhttp://aqua-web-aqua.gsi-learning-ocp437ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-\neast.containers.appdomain.cloud to pod port 8080 (svc/aqua-web)   deployment/aqua-web deploys registry.aquasec.com/console:4.6     deployment #1 running for 32 minutes - 1 pod\n```\n\n#### 13.\tLogin into Aqua CSP console\nYou need to point your web browser to the IP address or DNS name of the Aqua Server.\n\nRun the command below to get the IP address or DNS name of the Aqua Server.\n```\noc get route/aqua-web -n aqua\n```\nThe Aqua Server IP address or DNS name will appear as shown under HOST/PORT, as seen in this example:\n\n```\nNAME       HOST/PORT\nPATH      SERVICES   PORT      TERMINATION   WILDCARD\naqua-web   aqua-web-aqua.gsi-learning-ocp437ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-\neast.containers.appdomain.cloud             aqua-web   8080                    None\n```\n\nLogin to this address or DNS name, as shown in this example (port number is not required):\n\n http://aqua-web-aqua.gsilearning-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.useast.containers.appdomain.cloud\n\nYou should see the screen shown below. When you access the Aqua Server for the first time, you must enter and confirm the password for the administrator username.\n\n ![Aqua CSP Login](/images/Aqua-Login-Creation.png \"Aqua CSP Login\")\n\n Apply license information which you would have received from the link https://success.aquasec.com/#/licenses and click  Accept\n\n\n  ![Aqua CSP License ](/images/Aqua-License.png \"Aqua CSP License\")\n\nYou are now logged in as administrator. The Aqua Dashboard will be displayed similarly to the screenshot below:\n\n![Aqua CSP Dashboard ](/images/Aqua-Dashboard.png \"Aqua CSP Dashboard\")\n\nIn the Aqua UI: Navigate to System > Aqua Gateways. You should see that the Aqua Gateway is connected (green).\n\n![Aqua CSP Gateway ](/images/Aqua-Gateway.png \"Aqua CSP Gateway\")\n\n#### 14.\tInstall the Enforcers\nBy default, the Aqua Enforcer runs as a privileged container.\nDeploy Aqua Enforcers across your OpenShift cluster by using a Kubernetes DaemonSet, which automatically deploys a single Aqua Enforcer container on each node in your cluster.\n\nEnforcer group is a set of zero or more Aqua Enforcers with the same configuration.\n\nClick on Enforcers – click on “Add Enforcer Group”\n\n![Aqua CSO Add Enforcer ](/images/Aqua-Add-Enforcer-Group.png \"Aqua Add Enforcer Group\")\n\nOn the Aqua UI  go to Enforcers > Create new group screen that appears, fill in the settings as shown\n\n* Orchestrator: OpenShift\n* Service Account: aqua-sa\n* Project: aqua\n\n![Aqua CSO Add Enforcer 1](/images/Aqua-Add-Enforcer-Group1.png \"Aqua Add Enforcer Group 2\")\n\nNext fill up the security settings\n\n![Aqua CSO Add Enforcer 2](/images/Aqua-Add-Enforcer-Group2.png \"Aqua Add Enforcer Group 2\")\n\nClick Create Group. You will see a pop-up window titled \"Install Command\",\n\n\n![Aqua CSO Add Enforcer YAML](/images/Aqua-Add-Enforcer-Group-YAML.png \"Aqua Add Enforcer Group YAML\")\n\nAnd then click on Install Command\n\nScroll to the bottom of the screen, and click Copy to Clipboard to copy the DaemonSet YAML text to the clipboard. Save the text as the file aqua-enforcer-new-43.yaml on your host and Click Close.\n\n#### 15. Deploy the Enforcers\nA byproduct of the Enforcer group creation is the DaemonSet required for OpenShift. Aqua does not automatically deploy the Enforcer on the host; you do this with the oc create command. You can run this command to deploy Enforcers on one or more hosts.\n\n```\noc create -f aqua-enforcer-new-43.yaml\n```\nCheck that the daemon set is created successfully.\n```\noc get ds\n```\n\nNow that we have daemonsets running  ,The enforcers are now available :\n\n![Aqua CSP  Enforcers Listed ](/images/Aqua-Add-Enforcer-Group-YAML.png \"Aqua CSP  Enforcers Listed\")\n\n\n#### 16. Check the Aqua CSP Dashboard\nThe dashboard now has data populated based on containers on cluster.\n\n![Aqua CSP Dashboard Populated  ](/images/Aqua-Dashboard-populated.png \"Aqua CSP Dashboard Populated\")\n\n\n## CI/ CD leveraging Jenkins - Jenkins Configuration for AQUA CSP\nYou can use the Aqua Security Scanner plugin for Jenkins to scan images in the build pipeline in order to find vulnerabilities. You can also scan images that have been pushed to a registry.\nThis plugin is installed in Jenkins. Once installed, you include details for scanning the image in the build process. During the build process, the image is scanned by the scanner and, optionally, actions are taken if the scan results are negative. Scanning results can be viewed in Jenkins.\n\nDuring the build process, the image is scanned by the scanner and, optionally, actions are taken if the scan results are negative. Scanning results can be viewed in Jenkins.\n\n### Jenkins Plugin Installation & Configuration\n\n#### 1.\tAdd user with role scanner\n* In the Aqua UI: Navigate to System > Users and Roles.\n* Click Add Users. Enter details for a new user, with role Scanner.\n\n![Aqua CSP Add scanner user ](/images/Aqua-Jenkins-scannerrole-user.png \"Aqua CSP add scanner user \")\n\n\n#### 2. Install and configure the Jenkins plugin\n\nIn Jenkins: Select Manage Jenkins and then select Manage Plugins from the list.\nMake sure that the list of available plugins is up to date.\n\nInstall the Jenkins plugin\n* In Jenkins: Select Manage Jenkins -> Manage Plugins\n* Select the Available tab, search for \"Aqua Security Scanner\", and select it.\n* Click  Install without restart. This will install the plugin\n\n![Jenkins Add Aqua Plugin](/images/Aqua-Jenkins-Plugins.png \"Jenkins Add Aqua Plugin \")\n\nCheck the plugin is successfully installed\n\n![Jenkins Aqua Plugin installed](/images/Aqua-Jenkins-Plugins-installed.png \"Jenkins Add Aqua Plugin installed \")\n\n#### 3. Configure the Jenkins plugin\nIn Jenkins:\n* Select Manage Jenkins, then select Configure System.\n* In the Aqua Security section and fill in the following fields:\n the scanner image, Aqua Server URL, scanner user created in Aqua in the previous step, and the password.\n* You can also optionally specify the scan timeout (where 0 means unlimited) and include additional docker run options (for example: if you want to run the scanner with --privileged parameters you can add it here).\n* Select \"Do not verify TLS certificates\" if you are working in an environment (such as a development environment) without certificates.\n\n![Jenkins Aqua Configuration](/images/Aqua-Jenkins-Configuration.png \"Jenkins  Aqua Configurayion \")\n\n\n#### 4. Obtain the Aqua scanner binary Download the scanner image on Jenkins machine\n\n```\ndocker login registry.aquasec.com -u smith_naik@in.ibm.com -p <your-aqua-password>\n```\n```\ndocker pull registry.aquasec.com/scanner:4.6\n```\n\n\n### Jenkins Freestyle project - Scan via Aqua CSP\n\nYou can use the plugin for Jenkins in the build process in Freestyle jobs. You can configure the job to scan images during the build process, or after the build completes and the image is pushed to a registry.\n\nIn the Configure page for a job, click Add Build Step Select \"Aqua Security\".\n\n* Select the action to be taken when image doesn't comply with Aqua policy. The option \"Perform the action defined in Aqua's policy\" refers to the action specified in the Image Assurance Policy\n\n* Select the image to be scanned.\n\n* If the image is local (not in a registry), select Local image, and enter the image name. If the image is in a registry, select Hosted image, and enter the URL for the registry and the image name.\n\n* Locally hosted images will be scanned with the Default Image Assurance Policy. Images hosted in a registry will be scanned with all Image Assurance Policies that are applicable (according to the scope of the policy)\n\n![Jenkins Aqua Scan ](/images/Aqua-Jenkins-Scan.png \"Jenkins  Aqua Scan \")\n\nAfter you run the build , the console will show output like this:\n\n![Jenkins Aqua Freestle Ressults](/images/Aqua-Jenkins-Scan-Result-Freestyle.png \"Jenkins Aqua Freestle Ressults \")\n\nYou can also see results of the scan as an HTML page. In the Jenkins build menu, select Aqua Security Scanner, and then select the job whose results you wish to see. The results will appear like this.\n\n\nAlso on Aqua CSP , you can see the Images ->CI/CD scans\n\n![Jenkins Aqua Freestle Ressults](/images/Aqua-Jenkins-Images-CI:CD1.png \"Jenkins Aqua Freestle Ressults \")\n\nDrill down\n\n![Jenkins Aqua Freestle Ressults](/images/Aqua-Jenkins-Images-CI:CD2.png \"Jenkins Aqua Freestle Ressults \")\n\n\n### Jenkins Freestyle project - Scan via Aqua CSP\n\nYou can use the plugin for Jenkins in the build process in Pipeline jobs. You can configure the job to scan images during the build process, or after the build completes and the image is pushed to a registry.\n\nIn Pipeline jobs, the build step for Aqua scanning is included in a pipeline script, as part of the job configuration.\n\n* In Jenkins, in the Configure page for a job, scroll to the Pipeline section.\n* To scan a locally hosted image, include a snippet such as this in the pipeline script.\n* Replace the localImage parameter value with the identifier of the actual image in your pipeline.\n\nYou may also use the Jenkins Snippet Generator. Click Pipeline Syntax to get started:\n\nEnter details for the image,  and then click Generate Pipeline Script. Copy this to the pipeline script.\n\n\n\n\n\n\n","fileAbsolutePath":"/workspace/ibm-gsi-cloudnative-journey/src/pages/developer-advanced-2/devsecops-aquasec-csp/index-old.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}