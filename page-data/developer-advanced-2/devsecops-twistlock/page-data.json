{"componentChunkName":"component---src-pages-developer-advanced-2-devsecops-twistlock-index-mdx","path":"/developer-advanced-2/devsecops-twistlock/","result":{"pageContext":{"frontmatter":{"title":"DevSecOps with Twistlock"},"relativePagePath":"/developer-advanced-2/devsecops-twistlock/index.mdx","titleType":"page","MdxNode":{"id":"b7e65eac-8aef-50dd-b667-582e2f25d886","children":[],"parent":"a1d475a5-b201-571d-b67e-149f124b1c78","internal":{"content":"---\ntitle: DevSecOps with Twistlock\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nPrisma Cloud Compute Edition (Twistlock)\n\n</PageDescription>\n\n## Guide\n\nPrisma™ Cloud is a cloud security posture management (CSPM) and cloud workload protection platform (CWPP) that provides comprehensive visibility and threat detection across your organization’s hybrid, multi-cloud infrastructure.\n\nFor securing your host, container, and functions across the application lifecycle , Prisma Cloud is available as:\n\n* Prisma Cloud Compute Edition, which is is the downloadable, self-hosted software that you can use to protect hosts, containers, and serverless functions running in any cloud, including on-premises and even fully air-gapped environments. You must deploy and operate the Console and Defenders in your own environment.\n\n* Prisma Cloud Compute, which is the SaaS version of the full Cloud-Native Security Platform that delivers host, container, and serverless capabilities along with the cloud security posture management capabilities. Palo Alto Networks operates the Console for you, and you must deploy the agents (Defenders) into your environment to secure hosts, containers, and serverless functions running in any cloud, including on-premises.\n\n\n## Version\nOn IBM Managed Openshift 4.3 , the installation of Prisma Cloud Compute Edition 20.4 was carried out as part of this study.\n\n## Architecture :\nPrisma Cloud consists of a central management interface, called Console, security agents called Defender, a threat intelligence service, and ancillary tools and plugins.\n\n* Console is Prisma Cloud’s management interface. It lets you define policy and monitor your environment. Console is delivered as a container image.\n* Defender protects your environment according to the policies set in Console. There are a number of Defender types, each designed to protect a specific resource type.\n* The Prisma Cloud Intelligence Stream is a real-time threat feed delivered from the Prisma Cloud content delivery network (CDN) to our customers' installations. This service gathers, analyzes, and prepares threat data for distribution to the Console located on your network. Console pulls data down from the Threat Intelligence Stream using HTTPS requests. The Intelligence Stream is Console’s only required external dependency.\n\n* The twistcli tool is a command-line control and configuration tool. It ships with your Prisma Cloud release and can be found in the Prisma Cloud release tarball. Support is provided for both Linux and MacOs.\nThe twistcli tool provides a number of functions:\n\n    * Scanning images for vulnerabilities and compliance issues. This is useful when you’re building custom tooling, or when you’re using a CI tool for which Prisma Cloud does not provide a native plugin.\n    * Deploying (installing and uninstalling) Console and Defender across all environments.\n    Downloading the latest threat data from the Intelligence Stream for transfer to an air-gapped environment.\n   *  Packaging log files and other relevant data from your environment and optionally uploading that data so that Prisma Cloud Support can help debug issues.\n\n ![Prisma Cloud Architecture ](/images/Twistlock-Architecture.png \"Prisma Cloud Achitecture\")\n\n\n\n## Installation on IBM Cloud Managed Openshift v4.3 :\nPrisma Cloud software consists of two components: Console and Defender.\n\nInstall Prisma Cloud in two steps. First, install Console. Then install Defender.\n\n* Prisma Cloud Console is deployed as a ReplicationController, which ensures it’s always running. Prisma Cloud Defenders are deployed as a DaemonSet, which ensures that an instance of Defender runs on every node in the cluster. You can run Defenders on OpenShift master and infrastructure nodes using node selectors.\n\n* OpenShift, offer DaemonSets, which guarantee that an agent runs on every node in the cluster. Prisma Cloud Defender, therefore, is deployed in Kubernetes and OpenShift clusters as a DaemonSet.\n\n\n# Installation Guide for Prisma Cloud Compute(Twistlock) on IBM Managed Openshift Cluster 4.3\n\nPrisma Cloud Console is deployed as a ReplicationController, which ensures it’s always running. Prisma Cloud Defenders are deployed as a DaemonSet, which ensures that an instance of Defender runs on every node in the cluster. You can run Defenders on OpenShift master and infrastructure nodes using node selectors.\n\n### 1.Login into Openshift cluster v4.3\nLogin in as an OpenShift with your token so you can run the oc adm commands:\n```\noc login --token=<token> --server=https://c100-e.us-east.containers.cloud.ibm.com:30223\n```\n\n### 2.\tCreate Twistlock Project\nThe commands below will create a new OpenShift project (twistlock) which will house all the Twistlock components.\n```\noc new-project twistlock\n```\n\n### 3.\tDetermine the Service for your OpenShift internal registry\n```\noc get svc -n openshift-image-registry\n```\nResults:\n```\nNAME                      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)     AGE\nimage-registry            ClusterIP   172.21.98.28   <none>        5000/TCP    16d\nimage-registry-operator   ClusterIP   None           <none>        60000/TCP   16d\n```\n\n### 4.\tDetermine the endpoint for your OpenShift internal registry\n```\noc get routes -n openshift-image-registry\n```\n\nResults:\n```\nNAME              HOST/PORT                                                                                                                         PATH      SERVICES         PORT       TERMINATION   WILDCARD\ndocker-registry   docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud             image-registry   5000-tcp   passthrough   None\n```\n\n### 5.\tAdd entry in the local Docker Engine\nIn Docker Engine on local machine  from which installation is being executed, add the registry as insecure-registries as below :\n\n![Twistlock Local Docker Settings](/images/Twistlock-LocalDocker-setting.png \"Twistlock Local Docker Settings\")\n\n•\tAdd the entry of registry route captured in previous Step\n\n![Twistlock Local Docker Settings](/images/Twistlock-LocalDocker-setting2.png \"Twistlock Local Docker Settings\")\n\n### 6.\tDocker Login to Openshift registry\n```\ndocker login docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud -u $(oc whoami) -p $(oc whoami -t)\n```\n\n### 7. Pull the Twistlock Defender and Console Images\nImages for both console and defender are pulled from Prisma Cloud Registry using licensed access token\n\n```\ndocker pull registry-auth.twistlock.com/tw_<access-code>/twistlock/defender:defender_20_04_163\n```\n\n```\ndocker pull registry-auth.twistlock.com/tw_<access-code>/twistlock/console:console_20_04_163\n```\n\n\n### 8.\tTag the images for Openshift internal Registry\n\n```\ndocker tag registry-auth.twistlock.com/tw_<access-code>/twistlock/defender:defender_20_04_163   docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud/twistlock/private:defender_20_04_163\n```\n```\ndocker tag registry-auth.twistlock.com/tw_<access-code> /twistlock/console:console_20_04_163 docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud/twistlock/private:console_20_04_163\n```\n\n### 9.\tCheck the images tagged successfully\n\n```\ndocker images |grep twistlock\n```\n\n### 10.\tPush the images to Twistlock project’s image stream\n```\ndocker push docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud/twistlock/private:defender_20_04_163\n```\n```\ndocker push docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud/twistlock/private:console_20_04_163\n```\n\n\n### 11.\tCheck that Image is pushed successfully\n\n```\noc get imagestreams --all-namespaces  | grep -i twistlock\n```\nor  From Console, under Builds -> Image Streams search for “private”\n\n![Twistlock Local Docker Settings](/images/Twistlock-Openshift-ImageSteam.png \"Twistlock Local Docker Settings\")\n\n### 12.\tNavigate to Location where the installer is unzipped for the twistcli\n\nThe twistcli tool generates YAML for a ReplicationContoller, and other service configurations, such as a PersistentVolumeClaim, SecurityContextConstraints, and so on\n\n\n### 13.\tGenerate the Deployment twistlock_console.yaml file\n\n```\n./osx/twistcli console export openshift --storage-class \"ibmc-block-gold\" --image-name \"image-registry.openshift-image-registry.svc:5000/twistlock/private:console_20_04_163\" --service-type \"ClusterIP\"\n```\nResult\n```\nSaving output file to /Users/smith/Documents/Cloud Hybrid Squad /Devsecops/PrismaCompute/prisma_cloud_compute_edition_20_04_163/twistlock_console.yaml\n```\n\n### 14.\tDeploy Console\n```\noc create -f ./twistlock_console.yaml\n```\n\nResult:\n```\nconfigmap/twistlock-console created\nservice/twistlock-console created\nserviceaccount/twistlock-console created\npersistentvolumeclaim/twistlock-console created\nsecuritycontextconstraints.security.openshift.io/twistlock-console created\ndeployment.apps/twistlock-console created\nError from server (AlreadyExists): error when creating \"./twistlock_console.yaml\": namespaces \"twistlock\" already exists\n```\n\n### 15.\tCreate an external route to Console\n\nFrom the OpenShift web interface, go to the twistlock project.\n* Go to Networking > Routes\n* Select Create Route\n* Enter a name for the route, such as twistlock-console\n* Hostname = blank\n* Path = /\n* Service = twistlock-console\n* Target Port = 8083 → 8083\n* Select the Security > Secure Route radio button.\n* TLS Termination = Passthrough (if using 8083)\n* Insecure Traffic = Redirect\n* Click Create\n\n![Twistlock Console Route Settings](/images/Twistlock-Console-Route.png \"Twistlock Console Route Settings\")\n\n### 16.\tAccess the console\nAccess the console through route created and create administrator account and apply Licenses\n\n![Twistlock Console Login](/images/Twistlock-Login.png \"Twistlock Console Login\")\n\nand apply the License\n\n![Twistlock Console License](/images/Twistlock-License.png \"Twistlock Console License\")\n\n\n### 17.\tConfigure the Console\n```\noc get svc -n twistlock\n```\nResult:\n```\nNAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE\ntwistlock-console   ClusterIP   172.21.186.161   <none>        8084/TCP,8083/TCP   18h\n```\n\n* Go to Manage > Defenders > Names\n* Click Add SAN and enter Console’s service name.\n* Click Add SAN and enter Console’s cluster IP.\n\n Any name in the table is added to Console’s certificate and becomes available as a configuration parameter in the Defender deployment pages.\n\n After Prisma Cloud is set up with these values, you will see them in the drop down menu in all of the Defender deployment pages as a configuration parameter. When you set up a new Defender, select how it should connect to Console from the same list of names in the Subject Alternative Names table.\n\n![Twistlock Defender Config](/images/Twistlock-Defenders-Config.png \"Twistlock Defender Config\")\n\n\n### 18.\tInstall the defenders\nOn the Prisma Cloud navigate to Manage -> Defenders and select Deploy and choose settings as below :\n\n![Twistlock Defender Config](/images/Twistlock-Install-Defenders.png \"Twistlock Defender Config\")\n\n\nAnd then click on\n\n![Twistlock Defender Config](/images/Twistlock-Defenders-yaml.png \"Twistlock Defender Config\")\n\n\nPrisma Cloud Defenders run as containers on the nodes in your OpenShift cluster. They are deployed as a DaemonSet.\n\n\n### 19 .\tDeploy the defenders\n```\noc create -f daemonset-new.yaml\n```\n\nResult :\n```\nclusterrole.rbac.authorization.k8s.io/twistlock-view created\nclusterrolebinding.rbac.authorization.k8s.io/twistlock-view-binding created\nsecuritycontextconstraints.security.openshift.io/twistlock-scc created\nsecret/twistlock-secrets created\nserviceaccount/twistlock-service created\ndaemonset.apps/twistlock-defender-ds created\nservice/defender created\n```\n\n### 20 .\tConfirm the Defenders were deployed\n```\noc get ds\n```\n```\nNAME                    DESIRED   CURRENT   READY     UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE\ntwistlock-defender-ds   3         3         3         3            3           <none>          27m\n```\n\nOR\n\n![Twistlock Defender Config](/images/Twistlock-Defenders-Running.png \"Twistlock Defender Config\")\n\n\n## CI/ CD leveraging Jenkins :\nPrisma Cloud integrates security into your continuous integration workflows so you can find and fix problems before they ever make it into production. Prisma Cloud’s CI tools let developers see vulnerability status every time they run a build, without having to run a separate tool or use a different interface. Security teams can set policies that act as quality control gates to ensure only remediated images progress down the pipeline.\n\n### Jenkins Configuration for PRISMA (Twistlock)\n\nPrisma Cloud provides a Jenkins plugin that lets you incorporate vulnerability scanning into your continuous integration pipeline\n\n1.\tBuild and scan flow\nAfter Jenkins builds a container image, the Prisma Cloud plugin scans it for vulnerabilities and compliance issues.\n\nPrisma Cloud can pass or fail a build, depending on the types of vulnerability and compliance issues discovered, and the policies you set up in Console. By incorporating scanning into the build phase of the development workflow, engineers get immediate feedback about what needs to be fixed. The scan report provides all the information required to fix the vulnerabilities.\n\nThe sequence of events is described below:\n1.\tAn engineer commits a change for a container under development. The commit triggers a build.\n2.\tJenkins builds the container image.\n3.\tAs part of the build process, Jenkins calls the Prisma Cloud plugin. The plugin collects data about the image, including the packages and binaries in the image, and submits it to Console for analysis.\n4.\tConsole returns a list of vulnerabilities and compliance issues.\n5.\tThe Prisma Cloud plugin passes or fails the build depending upon your configuration and policy.\n6.\tThe results are displayed in the following places:\no\tIn Jenkins, within the project/job page, or relevant dashboard view.\no\tIn Prisma Cloud Console, on the Monitor > Vulnerabilities > Jenkins Jobs page.\n\nThe Jenkins plugin is built for Jenkins on Linux.\nTo scan images with Jenkins on other operating systems, use a platform-specific twistcli binary.\n\n\n### Twist CLI Installation\n\nOn the Twistlock Console Navigate to Manage -> System -> Downloads\n\n![Twistlock CLI Download](/images/Twistlock-CLI-Download.png \"Twistlock CLI Download\")\n\nOn this page , select the twistcli tool for your OS and clock on Copy\n\nOn the host install twistlock cli by pasting the copied command.\n\n```\ncurl --progress-bar -L -k --header \"authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJncm91cHMiOm51bGwsInNlc3Npb25UaW1lb3V0U2VjIjoxODAwLCJleHAiOjE1ODk3MTcyMzcsImlzcyI6InR3aXN0bG9jayJ9.PSIP1t0olKtPDV0OjlvKMl0qKZn26oZBVQCOMtjqNes\" https://twistlock-console-twistlock.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud/api/v1/util/twistcli > twistcli; chmod a+x twistcli;\n```\n```\n######################################################################## 100.0%\n```\n\n### Jenkins Plugin Installation\n\n## 1. Download the PRISMA Plugin\nOn Prisma Cloud navigate to Manage -> System -> Jenkins Plugin to download the plugin\n\n![Twistlock Jenkins Plugin Download](/images/Twistlock-CLI-Download.png \"Twistlock Jenkins Plugin Download\")\n\nNext on Jenkins navigate to Manage Jenkins -> Manage Plugins and under Advanced tab  on the Upload Plugin section , browse the plugin which is downloaded previous step and click upload.\n\n![Twistlock Jenkins Plugin Install](/images/Twistlock-Jenkins-Plugin.png \"Twistlock Jenkins Plugin Install\")\n\nNavigate back and check plugin is successfully installed\n\n![Twistlock Jenkins Plugin Installed](/images/Twistlock-Jenkins-Plugin-Installed.png \"Twistlock Jenkins Plugin Installed\")\n\nIn addition also install Dashboard View and Static Utilities Plugin by selecting them in the Available tab\n\n![Twistlock Jenkins  additional Plugin Installed](/images/Twistlock-additional-plugins.png \"Twistlock Jenkins additional  Plugin Installed\")\n\nCheck that the Plugins  are successfully installed\n\n![Twistlock Jenkins Plugin Installed](/images/Twistlock-Jenkins-AllPlugin-Installed.png \"Twistlock Jenkins Plugin Installed\")\n\n\n3.\tConfigure PRISMA plugin\n\n* Go to the Jenkins top page, and then click Manage Jenkins> Configure System\n* Scroll down to the Prisma Cloud section.\n* In the Address field, enter the URL for Prisma Cloud Console.\n* In the User and Password fields, enter the CI role user’s credentials for Prisma Cloud Console.\n* Click Test Connection to validate that the Jenkins plugin can communicate with Prisma Cloud Console.\n* Click Save\n\n![Twistlock Jenkins Plugin Installed](/images/Twistlock-Jenkins-config.png \"Twistlock Jenkins Plugin Installed\")\n\n\n### Create Jenkins Project ( Freestyle)\n\nCreate a new project.\n* Click New Item\n* In Enter an item name, enter a name for your project.\n* Select Freestyle project\n* Click OK\n\n\n### Create Jenkins Project ( Pipeline)\n\n#### 1. Create a Freetsyle Project\n\n![Twistlock Jenkins Fresstyle Project ](/images/Twistlock-Jenkins-Project-Freestyle.png \"TTwistlock Jenkins Fresstyle Project\")\n\n\nAdd Build Step\n\n* Scroll down to the Build section.\n* In the Add build step drop-down list, select\n* Execute shell\n* In the Command text box, enter the following:\n\n\n   ```\n   echo \"Creating Dockerfile...\"\n   echo \"FROM ubuntu:latest\" > Dockerfile\n   echo 'CMD [\"/bin/bash\", \"sleep 240\"]' >> Dockerfile\n   docker build --no-cache -t dev/ubun2:test .\n   ```\n\n![Twistlock Jenkins Fresstyle Project Build Step ](/images/Twistlock-Jenkins-BuildStep.png \"TTwistlock Jenkins Fresstyle Project Build Step\")\n\n* Add a build step that scans the container images for vulnerabilities.\n\n* In the Add build step drop-down list, select  Scan Prisma Cloud Images\n\n![Twistlock Jenkins Fresstyle Project Scan Step ](/images/Twistlock-Jenkins-Scan1.png \"TTwistlock Jenkins Fresstyle Project Scan Step\")\n\n![Twistlock Jenkins Fresstyle Project Scan Step ](/images/Twistlock-Jenkins-Scan2.png \"TTwistlock Jenkins Fresstyle Project Scan Step\")\n\n\nAdd a post-build action so that image scan results can be viewed in a Jenkins dashboard.\n1.\tPost-build Action\n2.\tIn the Add post-build action dropdown menu, select Scan results file\n\n![Twistlock Jenkins Fresstyle Project Scan Step ](/images/Twistlock-Jenkins-Scan3.png \"TTwistlock Jenkins Fresstyle Project Scan Step\")\n","type":"Mdx","contentDigest":"998d37db37b4c6187c512c5db8c5fb6c","owner":"gatsby-plugin-mdx","counter":915},"frontmatter":{"title":"DevSecOps with Twistlock"},"exports":{},"rawBody":"---\ntitle: DevSecOps with Twistlock\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nPrisma Cloud Compute Edition (Twistlock)\n\n</PageDescription>\n\n## Guide\n\nPrisma™ Cloud is a cloud security posture management (CSPM) and cloud workload protection platform (CWPP) that provides comprehensive visibility and threat detection across your organization’s hybrid, multi-cloud infrastructure.\n\nFor securing your host, container, and functions across the application lifecycle , Prisma Cloud is available as:\n\n* Prisma Cloud Compute Edition, which is is the downloadable, self-hosted software that you can use to protect hosts, containers, and serverless functions running in any cloud, including on-premises and even fully air-gapped environments. You must deploy and operate the Console and Defenders in your own environment.\n\n* Prisma Cloud Compute, which is the SaaS version of the full Cloud-Native Security Platform that delivers host, container, and serverless capabilities along with the cloud security posture management capabilities. Palo Alto Networks operates the Console for you, and you must deploy the agents (Defenders) into your environment to secure hosts, containers, and serverless functions running in any cloud, including on-premises.\n\n\n## Version\nOn IBM Managed Openshift 4.3 , the installation of Prisma Cloud Compute Edition 20.4 was carried out as part of this study.\n\n## Architecture :\nPrisma Cloud consists of a central management interface, called Console, security agents called Defender, a threat intelligence service, and ancillary tools and plugins.\n\n* Console is Prisma Cloud’s management interface. It lets you define policy and monitor your environment. Console is delivered as a container image.\n* Defender protects your environment according to the policies set in Console. There are a number of Defender types, each designed to protect a specific resource type.\n* The Prisma Cloud Intelligence Stream is a real-time threat feed delivered from the Prisma Cloud content delivery network (CDN) to our customers' installations. This service gathers, analyzes, and prepares threat data for distribution to the Console located on your network. Console pulls data down from the Threat Intelligence Stream using HTTPS requests. The Intelligence Stream is Console’s only required external dependency.\n\n* The twistcli tool is a command-line control and configuration tool. It ships with your Prisma Cloud release and can be found in the Prisma Cloud release tarball. Support is provided for both Linux and MacOs.\nThe twistcli tool provides a number of functions:\n\n    * Scanning images for vulnerabilities and compliance issues. This is useful when you’re building custom tooling, or when you’re using a CI tool for which Prisma Cloud does not provide a native plugin.\n    * Deploying (installing and uninstalling) Console and Defender across all environments.\n    Downloading the latest threat data from the Intelligence Stream for transfer to an air-gapped environment.\n   *  Packaging log files and other relevant data from your environment and optionally uploading that data so that Prisma Cloud Support can help debug issues.\n\n ![Prisma Cloud Architecture ](/images/Twistlock-Architecture.png \"Prisma Cloud Achitecture\")\n\n\n\n## Installation on IBM Cloud Managed Openshift v4.3 :\nPrisma Cloud software consists of two components: Console and Defender.\n\nInstall Prisma Cloud in two steps. First, install Console. Then install Defender.\n\n* Prisma Cloud Console is deployed as a ReplicationController, which ensures it’s always running. Prisma Cloud Defenders are deployed as a DaemonSet, which ensures that an instance of Defender runs on every node in the cluster. You can run Defenders on OpenShift master and infrastructure nodes using node selectors.\n\n* OpenShift, offer DaemonSets, which guarantee that an agent runs on every node in the cluster. Prisma Cloud Defender, therefore, is deployed in Kubernetes and OpenShift clusters as a DaemonSet.\n\n\n# Installation Guide for Prisma Cloud Compute(Twistlock) on IBM Managed Openshift Cluster 4.3\n\nPrisma Cloud Console is deployed as a ReplicationController, which ensures it’s always running. Prisma Cloud Defenders are deployed as a DaemonSet, which ensures that an instance of Defender runs on every node in the cluster. You can run Defenders on OpenShift master and infrastructure nodes using node selectors.\n\n### 1.Login into Openshift cluster v4.3\nLogin in as an OpenShift with your token so you can run the oc adm commands:\n```\noc login --token=<token> --server=https://c100-e.us-east.containers.cloud.ibm.com:30223\n```\n\n### 2.\tCreate Twistlock Project\nThe commands below will create a new OpenShift project (twistlock) which will house all the Twistlock components.\n```\noc new-project twistlock\n```\n\n### 3.\tDetermine the Service for your OpenShift internal registry\n```\noc get svc -n openshift-image-registry\n```\nResults:\n```\nNAME                      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)     AGE\nimage-registry            ClusterIP   172.21.98.28   <none>        5000/TCP    16d\nimage-registry-operator   ClusterIP   None           <none>        60000/TCP   16d\n```\n\n### 4.\tDetermine the endpoint for your OpenShift internal registry\n```\noc get routes -n openshift-image-registry\n```\n\nResults:\n```\nNAME              HOST/PORT                                                                                                                         PATH      SERVICES         PORT       TERMINATION   WILDCARD\ndocker-registry   docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud             image-registry   5000-tcp   passthrough   None\n```\n\n### 5.\tAdd entry in the local Docker Engine\nIn Docker Engine on local machine  from which installation is being executed, add the registry as insecure-registries as below :\n\n![Twistlock Local Docker Settings](/images/Twistlock-LocalDocker-setting.png \"Twistlock Local Docker Settings\")\n\n•\tAdd the entry of registry route captured in previous Step\n\n![Twistlock Local Docker Settings](/images/Twistlock-LocalDocker-setting2.png \"Twistlock Local Docker Settings\")\n\n### 6.\tDocker Login to Openshift registry\n```\ndocker login docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud -u $(oc whoami) -p $(oc whoami -t)\n```\n\n### 7. Pull the Twistlock Defender and Console Images\nImages for both console and defender are pulled from Prisma Cloud Registry using licensed access token\n\n```\ndocker pull registry-auth.twistlock.com/tw_<access-code>/twistlock/defender:defender_20_04_163\n```\n\n```\ndocker pull registry-auth.twistlock.com/tw_<access-code>/twistlock/console:console_20_04_163\n```\n\n\n### 8.\tTag the images for Openshift internal Registry\n\n```\ndocker tag registry-auth.twistlock.com/tw_<access-code>/twistlock/defender:defender_20_04_163   docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud/twistlock/private:defender_20_04_163\n```\n```\ndocker tag registry-auth.twistlock.com/tw_<access-code> /twistlock/console:console_20_04_163 docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud/twistlock/private:console_20_04_163\n```\n\n### 9.\tCheck the images tagged successfully\n\n```\ndocker images |grep twistlock\n```\n\n### 10.\tPush the images to Twistlock project’s image stream\n```\ndocker push docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud/twistlock/private:defender_20_04_163\n```\n```\ndocker push docker-registry-openshift-image-registry.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud/twistlock/private:console_20_04_163\n```\n\n\n### 11.\tCheck that Image is pushed successfully\n\n```\noc get imagestreams --all-namespaces  | grep -i twistlock\n```\nor  From Console, under Builds -> Image Streams search for “private”\n\n![Twistlock Local Docker Settings](/images/Twistlock-Openshift-ImageSteam.png \"Twistlock Local Docker Settings\")\n\n### 12.\tNavigate to Location where the installer is unzipped for the twistcli\n\nThe twistcli tool generates YAML for a ReplicationContoller, and other service configurations, such as a PersistentVolumeClaim, SecurityContextConstraints, and so on\n\n\n### 13.\tGenerate the Deployment twistlock_console.yaml file\n\n```\n./osx/twistcli console export openshift --storage-class \"ibmc-block-gold\" --image-name \"image-registry.openshift-image-registry.svc:5000/twistlock/private:console_20_04_163\" --service-type \"ClusterIP\"\n```\nResult\n```\nSaving output file to /Users/smith/Documents/Cloud Hybrid Squad /Devsecops/PrismaCompute/prisma_cloud_compute_edition_20_04_163/twistlock_console.yaml\n```\n\n### 14.\tDeploy Console\n```\noc create -f ./twistlock_console.yaml\n```\n\nResult:\n```\nconfigmap/twistlock-console created\nservice/twistlock-console created\nserviceaccount/twistlock-console created\npersistentvolumeclaim/twistlock-console created\nsecuritycontextconstraints.security.openshift.io/twistlock-console created\ndeployment.apps/twistlock-console created\nError from server (AlreadyExists): error when creating \"./twistlock_console.yaml\": namespaces \"twistlock\" already exists\n```\n\n### 15.\tCreate an external route to Console\n\nFrom the OpenShift web interface, go to the twistlock project.\n* Go to Networking > Routes\n* Select Create Route\n* Enter a name for the route, such as twistlock-console\n* Hostname = blank\n* Path = /\n* Service = twistlock-console\n* Target Port = 8083 → 8083\n* Select the Security > Secure Route radio button.\n* TLS Termination = Passthrough (if using 8083)\n* Insecure Traffic = Redirect\n* Click Create\n\n![Twistlock Console Route Settings](/images/Twistlock-Console-Route.png \"Twistlock Console Route Settings\")\n\n### 16.\tAccess the console\nAccess the console through route created and create administrator account and apply Licenses\n\n![Twistlock Console Login](/images/Twistlock-Login.png \"Twistlock Console Login\")\n\nand apply the License\n\n![Twistlock Console License](/images/Twistlock-License.png \"Twistlock Console License\")\n\n\n### 17.\tConfigure the Console\n```\noc get svc -n twistlock\n```\nResult:\n```\nNAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE\ntwistlock-console   ClusterIP   172.21.186.161   <none>        8084/TCP,8083/TCP   18h\n```\n\n* Go to Manage > Defenders > Names\n* Click Add SAN and enter Console’s service name.\n* Click Add SAN and enter Console’s cluster IP.\n\n Any name in the table is added to Console’s certificate and becomes available as a configuration parameter in the Defender deployment pages.\n\n After Prisma Cloud is set up with these values, you will see them in the drop down menu in all of the Defender deployment pages as a configuration parameter. When you set up a new Defender, select how it should connect to Console from the same list of names in the Subject Alternative Names table.\n\n![Twistlock Defender Config](/images/Twistlock-Defenders-Config.png \"Twistlock Defender Config\")\n\n\n### 18.\tInstall the defenders\nOn the Prisma Cloud navigate to Manage -> Defenders and select Deploy and choose settings as below :\n\n![Twistlock Defender Config](/images/Twistlock-Install-Defenders.png \"Twistlock Defender Config\")\n\n\nAnd then click on\n\n![Twistlock Defender Config](/images/Twistlock-Defenders-yaml.png \"Twistlock Defender Config\")\n\n\nPrisma Cloud Defenders run as containers on the nodes in your OpenShift cluster. They are deployed as a DaemonSet.\n\n\n### 19 .\tDeploy the defenders\n```\noc create -f daemonset-new.yaml\n```\n\nResult :\n```\nclusterrole.rbac.authorization.k8s.io/twistlock-view created\nclusterrolebinding.rbac.authorization.k8s.io/twistlock-view-binding created\nsecuritycontextconstraints.security.openshift.io/twistlock-scc created\nsecret/twistlock-secrets created\nserviceaccount/twistlock-service created\ndaemonset.apps/twistlock-defender-ds created\nservice/defender created\n```\n\n### 20 .\tConfirm the Defenders were deployed\n```\noc get ds\n```\n```\nNAME                    DESIRED   CURRENT   READY     UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE\ntwistlock-defender-ds   3         3         3         3            3           <none>          27m\n```\n\nOR\n\n![Twistlock Defender Config](/images/Twistlock-Defenders-Running.png \"Twistlock Defender Config\")\n\n\n## CI/ CD leveraging Jenkins :\nPrisma Cloud integrates security into your continuous integration workflows so you can find and fix problems before they ever make it into production. Prisma Cloud’s CI tools let developers see vulnerability status every time they run a build, without having to run a separate tool or use a different interface. Security teams can set policies that act as quality control gates to ensure only remediated images progress down the pipeline.\n\n### Jenkins Configuration for PRISMA (Twistlock)\n\nPrisma Cloud provides a Jenkins plugin that lets you incorporate vulnerability scanning into your continuous integration pipeline\n\n1.\tBuild and scan flow\nAfter Jenkins builds a container image, the Prisma Cloud plugin scans it for vulnerabilities and compliance issues.\n\nPrisma Cloud can pass or fail a build, depending on the types of vulnerability and compliance issues discovered, and the policies you set up in Console. By incorporating scanning into the build phase of the development workflow, engineers get immediate feedback about what needs to be fixed. The scan report provides all the information required to fix the vulnerabilities.\n\nThe sequence of events is described below:\n1.\tAn engineer commits a change for a container under development. The commit triggers a build.\n2.\tJenkins builds the container image.\n3.\tAs part of the build process, Jenkins calls the Prisma Cloud plugin. The plugin collects data about the image, including the packages and binaries in the image, and submits it to Console for analysis.\n4.\tConsole returns a list of vulnerabilities and compliance issues.\n5.\tThe Prisma Cloud plugin passes or fails the build depending upon your configuration and policy.\n6.\tThe results are displayed in the following places:\no\tIn Jenkins, within the project/job page, or relevant dashboard view.\no\tIn Prisma Cloud Console, on the Monitor > Vulnerabilities > Jenkins Jobs page.\n\nThe Jenkins plugin is built for Jenkins on Linux.\nTo scan images with Jenkins on other operating systems, use a platform-specific twistcli binary.\n\n\n### Twist CLI Installation\n\nOn the Twistlock Console Navigate to Manage -> System -> Downloads\n\n![Twistlock CLI Download](/images/Twistlock-CLI-Download.png \"Twistlock CLI Download\")\n\nOn this page , select the twistcli tool for your OS and clock on Copy\n\nOn the host install twistlock cli by pasting the copied command.\n\n```\ncurl --progress-bar -L -k --header \"authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJyb2xlIjoiYWRtaW4iLCJncm91cHMiOm51bGwsInNlc3Npb25UaW1lb3V0U2VjIjoxODAwLCJleHAiOjE1ODk3MTcyMzcsImlzcyI6InR3aXN0bG9jayJ9.PSIP1t0olKtPDV0OjlvKMl0qKZn26oZBVQCOMtjqNes\" https://twistlock-console-twistlock.gsi-dev-ocp43-7ec5d722a0ab3f463fdc90eeb94dbc70-0000.us-east.containers.appdomain.cloud/api/v1/util/twistcli > twistcli; chmod a+x twistcli;\n```\n```\n######################################################################## 100.0%\n```\n\n### Jenkins Plugin Installation\n\n## 1. Download the PRISMA Plugin\nOn Prisma Cloud navigate to Manage -> System -> Jenkins Plugin to download the plugin\n\n![Twistlock Jenkins Plugin Download](/images/Twistlock-CLI-Download.png \"Twistlock Jenkins Plugin Download\")\n\nNext on Jenkins navigate to Manage Jenkins -> Manage Plugins and under Advanced tab  on the Upload Plugin section , browse the plugin which is downloaded previous step and click upload.\n\n![Twistlock Jenkins Plugin Install](/images/Twistlock-Jenkins-Plugin.png \"Twistlock Jenkins Plugin Install\")\n\nNavigate back and check plugin is successfully installed\n\n![Twistlock Jenkins Plugin Installed](/images/Twistlock-Jenkins-Plugin-Installed.png \"Twistlock Jenkins Plugin Installed\")\n\nIn addition also install Dashboard View and Static Utilities Plugin by selecting them in the Available tab\n\n![Twistlock Jenkins  additional Plugin Installed](/images/Twistlock-additional-plugins.png \"Twistlock Jenkins additional  Plugin Installed\")\n\nCheck that the Plugins  are successfully installed\n\n![Twistlock Jenkins Plugin Installed](/images/Twistlock-Jenkins-AllPlugin-Installed.png \"Twistlock Jenkins Plugin Installed\")\n\n\n3.\tConfigure PRISMA plugin\n\n* Go to the Jenkins top page, and then click Manage Jenkins> Configure System\n* Scroll down to the Prisma Cloud section.\n* In the Address field, enter the URL for Prisma Cloud Console.\n* In the User and Password fields, enter the CI role user’s credentials for Prisma Cloud Console.\n* Click Test Connection to validate that the Jenkins plugin can communicate with Prisma Cloud Console.\n* Click Save\n\n![Twistlock Jenkins Plugin Installed](/images/Twistlock-Jenkins-config.png \"Twistlock Jenkins Plugin Installed\")\n\n\n### Create Jenkins Project ( Freestyle)\n\nCreate a new project.\n* Click New Item\n* In Enter an item name, enter a name for your project.\n* Select Freestyle project\n* Click OK\n\n\n### Create Jenkins Project ( Pipeline)\n\n#### 1. Create a Freetsyle Project\n\n![Twistlock Jenkins Fresstyle Project ](/images/Twistlock-Jenkins-Project-Freestyle.png \"TTwistlock Jenkins Fresstyle Project\")\n\n\nAdd Build Step\n\n* Scroll down to the Build section.\n* In the Add build step drop-down list, select\n* Execute shell\n* In the Command text box, enter the following:\n\n\n   ```\n   echo \"Creating Dockerfile...\"\n   echo \"FROM ubuntu:latest\" > Dockerfile\n   echo 'CMD [\"/bin/bash\", \"sleep 240\"]' >> Dockerfile\n   docker build --no-cache -t dev/ubun2:test .\n   ```\n\n![Twistlock Jenkins Fresstyle Project Build Step ](/images/Twistlock-Jenkins-BuildStep.png \"TTwistlock Jenkins Fresstyle Project Build Step\")\n\n* Add a build step that scans the container images for vulnerabilities.\n\n* In the Add build step drop-down list, select  Scan Prisma Cloud Images\n\n![Twistlock Jenkins Fresstyle Project Scan Step ](/images/Twistlock-Jenkins-Scan1.png \"TTwistlock Jenkins Fresstyle Project Scan Step\")\n\n![Twistlock Jenkins Fresstyle Project Scan Step ](/images/Twistlock-Jenkins-Scan2.png \"TTwistlock Jenkins Fresstyle Project Scan Step\")\n\n\nAdd a post-build action so that image scan results can be viewed in a Jenkins dashboard.\n1.\tPost-build Action\n2.\tIn the Add post-build action dropdown menu, select Scan results file\n\n![Twistlock Jenkins Fresstyle Project Scan Step ](/images/Twistlock-Jenkins-Scan3.png \"TTwistlock Jenkins Fresstyle Project Scan Step\")\n","fileAbsolutePath":"/home/runner/work/ibm-gsi-cloudnative-journey/ibm-gsi-cloudnative-journey/src/pages/developer-advanced-2/devsecops-twistlock/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}