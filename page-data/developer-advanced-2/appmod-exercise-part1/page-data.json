{"componentChunkName":"component---src-pages-developer-advanced-2-appmod-exercise-part-1-index-mdx","path":"/developer-advanced-2/appmod-exercise-part1/","result":{"pageContext":{"frontmatter":{"title":"Scan Existing Legacy Application"},"relativePagePath":"/developer-advanced-2/appmod-exercise-part1/index.mdx","titleType":"page","MdxNode":{"id":"cf95b648-cadd-520f-8877-08ce4ba14319","children":[],"parent":"0c7a1180-afa2-5cfc-83a0-5a3ec2a1647b","internal":{"content":"---\ntitle: Scan Existing Legacy Application\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\n## **Scan the Existing Application running on WebSphere Application Server using Data Colletor**\n\n</PageDescription>\n\nThe exercise is focused on migrating a Java EE app, that requires no code changes, from tradition WebSphere environment to the Openshift Liberty Container on the IBM Cloud.\n\nThe exercise is divided into three parts and the Part 1, is focussed on Scanning the existing application and collecting data using data collector of the Transformation Advisor.\n\nThis exercise assumes the following:\n\n1. You are using a <Globals name=\"env\" /> that has already been installed.\n1. Cloud Pak for Applications has already been installed in the environment.\n1. You have Docker Desktop running on your laptop (one of the prerequisites).\n\n\n## Business need\n\nRuntime modernization moves a traditional application to a \"built for the cloud\" runtime with the least amount of effort. IBM® WebSphere® Liberty is a fast and dynamic Java™ application server that is built on the open source Open Liberty project. Ideal for the cloud, Liberty is a combination of IBM technology and open source software. It has fast startup times (less than 2 seconds), no server restarts to pick up changes, and a simple XML configuration.\n\nHowever, WebSphere Liberty doesn't support all the traditional Java EE and WebSphere proprietary functions. You might need to change some code to move an application to the new runtime. You also need to move the application configuration from traditional WebSphere to WebSphere Liberty's XML configuration files.\n\nThis path gets the application onto a cloud-ready runtime container that is easy to use and portable. However, the application is mostly unchanged and is not modernized to a newer architecture such as microservices. This is first step towards modernization, and you will see immediate benefits.\n\nIn this exercise, we will look at existing application which is running on WebSphere Application Server ND (Version 8.5.5.14) and how IBM Modernization Tool like Transformation Advisor helps.\n\nThe objective of this lab is to showcase how Transformation Advisor helps move the existing application to container platform, with mandatory changes which are pointed by this tool.\n\n### Project hill\n\nHere's the [hill statement](https://www.ibm.com/garage/method/practices/think/practice_hills/) describing the desired outcome of this migration:\n\n- **Who**: Operations teams are tasked with moving existing Java applications from traditional WebSphere ND to \"the Cloud\" and they would need to migrated this application with few modifications to the code with support from developers.\n\n- **What**: This is an application that Business users still need. They consider that this application is needed by the business and its to refractor and modernize this application. But the business uses this application for their day to day business and hence direct modernization could not be directly fit in. Inorder to modernize to a newer architecture such as microservices and AI capability, the first towards modernization is to move the application as monolithch as-is with fewer modifications to cloud. Then later slowly move from monolithch to microservices to see immediate benefits\n\n- **Wow**: With a few simple steps, you can move this  application and the associated configuration to a Liberty runtime in a Docker container with few changes to the code base and run this application without impacting the business. This brings in the benefits of the consistency and reliability of containers as well as helping to improve DevOps and speed to market. Thus putting the first step towards modernization of this application.\n\n## Architecture\n\nApplication is typical retail store application, called **‘Customer Order Services Application’**. Where user can login, browse various items related to Electronics products and Movies then add into cart. The component architecture of the application is depicted as below\n\n![component architecture](/images/comparch-custord.png)\n\nThere are several components of the overall application architecture: - Starting with the database, the application leverages two SQL-based databases running on IBM DB2. - The application exposes its data model through an Enterprise JavaBean layer, named CustomerOrderServices. This components leverages the Java Persistence API to exposed the backend data model to calling services with minimal coding effort. - This build of the application uses JavaEE6 features for EJBs and JPA. - The next tier of the application, named CustomerOrderServicesWeb, exposes the necessary business APIs via REST-based web services. This component leverages the JAX-RS libraries for creating Java-based REST services with minimal coding effort. - This build of the application is using JAX-RS 1.1 version of the respective capability. - The application's user interface is exposed through the CustomerOrderServicesWeb component as well, in the form of a Dojo Toolkit-based JavaScript application. Delivering the user interface and business APIs in the same component is one major inhibitor our migration strategy will help to alleviate in the long-term. - Finally, there is an additional integration testing component, named CustomerOrderServicesTest that is built to quickly validate an application's build and deployment to a given application server. This test component contains both JPA and JAX-RS-based tests\n\nThe High level Technical architecture depicts the typical customer environment with IBM HTTP Server and WebSphere Application Server Network Deployment (WebSphere ND) running on traditional IT along with the application database.\n\n![twasarch](/images/twas-arch.png)\n\n\nFor the purposes of this lab exercise, you will run a simulation of the WebSphere ND environment on your laptop using a Docker container that contains Customer Order Service, WebSphere Application Server, and a data collector. You will then use IBM Cloud Transformation Advisor—part of the Cloud Pak for Applications installed in your team’s Developer Environment—to analyze the WebSphere ND environment and create the artifacts you need to run the same Customer Order Service application on Liberty in a Docker container on your laptop.\n\n## Technical Requirements\n\nThis modernization exercise has the following requirements:\n- Minimal code changes -- You need do a minimal code change to convert the EJB transactions to JPA transactions\n- The target is to get the application running on Liberty in a Open Shift Cluster on IBM Cloud\n- The IBM Cloud based DB2 Service is used for Database connectivity\n\n\n## Guide\nOverall the Modernization exercise has the three parts that performs the below steps. However, this part 1 covers the first two aspects until scanning of the app using data collector of Transformation advisor.\n- Run a pre-configured instance of traditional WebSphere in a Docker container on your laptop to simulate the existing customer environment\n- Use the data collector in Transformation Advisor to scan the WebSphere runtime and the CustomerOrderService WebSphere application\n- Load the scan results in to Transformation Advisor running in the IBM Cloud environment's Red Hat OpenShift cluster\n- Review the Transformation Advisor analysis\n- Use the Tekton pipeline to build a Docker image with Liberty and deploy the application in the IBM Cloud Open Shift Cluster\n- Access the newly created application on Container based Light weight Open Liberty\n\n### Scan the existing application\n\n<Tabs>\n<Tab label=\"Cloud Shell\" open=\"true\">\n\n- The first part of the exercise until \"Analyze the scan results\" will be a demo.\n\n- The Scan results of the application and the application binaries are upload to the git and the same can be used for analysis the results using Transfromation advisor and later deploy them on the Open Shfit Cluster\n\n</Tab>\n<Tab label=\"Desktop/Laptop\" open=\"true\">\n\n-  Ensure your laptop has necessary previlages and open internet connectivity, to set up the local docker environment inorder to setup the local WAS and DB2 server for deploying the local application.\n\n- You can then proceed on the below steps from scanning the location application using Data Collector tool of Transformation Advisore and further follow the steps to Analyze the Application and later deploy on the Open Shift cluster\n\n</Tab>\n</Tabs>\n\n\nNote: If you do not have Docker running on your laptop/desktop, you will not be able to preform this step. Read through it, but you will not be able to execute the steps until \"Analyze the scan results\"\n\nWe need to first have the application installed and running so that we can scan it.\n\n#### Setup the Database\nThis project uses db2 as its database. Before creating the databases and getting connected to them, verify if your database is running.\nIn this case we are using db2 database service from the IBM Public Cloud.\n\n- Create the databases - ORDERDB\n\n- After this, run the database scripts for the orderdb.sql. The script is available as part of the DB Scripts folder\n\n- Next run the initdata.sql to load the data for the application\n\n#### Setup the Application\nIn order to simulate a real traditional WebSphere ND customer environment on your laptop, we have provided you with a Dockerfile that creates a Docker image that you can run locally. This image will contain traditional WebSphere, the CustomerOrderService application, and the data collector in Transformation Advisor. The end result will be a container running the application which accesses the shared database.\n\n<InlineNotification kind=\"info\">\n\n**Note:** In the real world, you would work with the client's WebSphere administrators to execute the data collector in their environment. For this exercise, we simulate that production environment as a Docker image running on your laptop.\n\n</InlineNotification>\n\n- Clone the repository to your machine and build the application\n\n    ```bash \n    git clone https://github.com/ibm-gsi-ecosystem/appmod-advance-app.git\n    cd CustomerOrderServicesProject \n    mvn install\n    ```\n\n- Copy the 'CustomerOrderServicesApp-0.1.0-SNAPSHOT.ear' from the 'target' folder of 'CustomerOrderServicesApp' to the Docker folder.\n    \n    ```bash\n    cd ..\n    cd Docker\n    cp ../CustomerOrderServicesApp/target/CustomerOrderServicesApp-0.1.0-SNAPSHOT.ear .\n    ```\n\n- Review the Dockerfile, see that the Docker image will contain:\n    - The DB2 JDBC drivers\n    - Compiled application EAR files\n\n- Review the `customCmd.properties` file\n\n    This file is used to ensure that the data collector scans all of the files in the application. By default, the data collector ignores Java classes in the `com.ibm.websphere` packages, as well as packages that are typically used by open-source JARs such as `net` and `org` packages. These packages are ignored because they typically contain code that the client doesn't own, so any issues found by Transformation Advisor would be false positives. This becomes a problem when the client's code is in a package such as `net` or `org` because the scanner will ignore their Java code.\n\n    ```java\n    evaluation=--evaluate --excludePackages=com.informix,com.microsoft,com.sybase,com.sun,java,javax,net,org,oracle,sqlj,_ibmjsp --includePackages=com.ibm\n    migration_liberty=--analyze --sourceAppServer=was855 --targetAppServer=liberty --targetCloud=dockerIBMCloud --includePackages=com.ibm --excludePackages=com.informix,com.microsoft,com.sybase,com.sun,java,javax,net,org,oracle,sqlj,_ibmjsp\n    migration_was=--analyze --sourceAppServer=was855 --targetAppServer=was90 --targetCloud=vmIBMCloud --includePackages=com.ibm --excludePackages=com.informix,com.microsoft,com.sybase,com.sun,java,javax,net,org,oracle,sqlj,_ibmjsp\n    #inventory=--inventory --excludeFiles=\".*/directory/LargeXMLFileName.xml\"\n    #featureList=--featureList --excludeFiles=\".*/directory/LargeXMLFileName.xml\"\n    #java_opt=-Xmx2g\n    ```\n\n- Build the Docker image\n\n    ```bash\n    docker build -t twas-customerorder .\n    ```\n\n- Review the Docker image for traditional WebSphere Application Server\n\n    ```bash\n    $ docker images | grep websphere\n\n    REPOSITORY                      TAG                         IMAGE ID        CREATED          SIZE\n    ibmcom/websphere-traditional    profile                     67b52a4c08ad    12 months ago    1.75GB\n    ibmcom/websphere-liberty        webProfile7-ubi-min-amd64   34544a83c068     3 weeks ago      446MB\n    ```\n\n    (The `websphere-liberty` image is shown here for comparison. You may not see it in your registry (yet).)\n\n    You may be wondering: If traditional WebSphere runs in a Docker container, then why are we moving to Liberty?\n\n    - One reason: **1.75GB**!! (The Liberty image is 446MB, one-quarter the size.)\n\n    - Another reason: Having to hardcode configuration values in configuration files (like in the previous step) because traditional WebSphere can't read [configuration from environment variables](https://12factor.net/config)\n\n- Start an instance of the Docker image\n\n    ```bash\n    docker run -d -p 9080:9080 -p 9443:9443 -p 9060:9060 -p 9043:9043 -v \"$(pwd)\":/data --name twas-customerorder twas-customerorder:latest\n    ```\n\n- Tail the logs for the Docker container and wait for the message shown below:\n\n    ```\n    $ docker logs -f twas-customerorder\n    ...\n\n    *** CERTIFICATES THAT ARE EXPIRED OR BEYOND THE EXPIRATION THRESHOLD AND HAVE BEEN REPLACED ***;\n\n    CWPKI0645I: Personal certificate alias \"default\" in KeyStore \"NodeDefaultKeyStore((cell):DefaultCell01:(node):DefaultNode01)\" was REPLACED.\n    CWPKI0645I: Personal certificate alias \"default\" in KeyStore \"NodeRSATokenKeyStore((cell):DefaultCell01:(node):DefaultNode01)\" was REPLACED.\n    ```\n\n    This message is expected because this version of the traditional WebSphere Docker image is over 12 months old and the SSL certificates have expired.\n\n- Restart the container to refresh these SSL certificates\n\n    ```bash\n    docker stop twas-customerorder\n    docker start twas-customerorder\n    ```\n\n- Tail the logs for the Docker container and wait for the message shown below:\n\n    ```\n    $ docker logs -f twas-customerorder\n    ...\n\n    WSVR0001I: Server server1 open for e-business\n    ```\n\n- Log in to the Administrative Console\n\n    https://localhost:9043/ibm/console\n\n    NOTE: The console requires secure HTTP. Chrome and Safari block https://localhost and recently don't allow exceptions. You may need to use Firefox to log in to the console. Firefox blocks, but gives you the option to proceed anyways.\n\n    username: `wsadmin` password: `passw0rd`\n\n\n### Setting up security for the application\n\n1. Log into the Admin Console via http://localhost:9043/admin.\n\n1. In the Global security section, check Enable application security and click Save.\n    ![Websphere Application Security](/images/twas-securitysettings.png)\n\n1. In the Users and Groups section, select Manage Users and create the following users:\n\n    username: rbarcia password: bl0wfish\n    username: kbrown password: bl0wfish\n\n    ![Websphere Manage Users](/images/twas-manageusers.png)\n\n1. In the Users and Groups section, select Manage Groups and create the following group:\n\n    group name: SecureShopper\n\n    This JEE application implements role-based security whereby only those users and groups with appropriate roles can execute certain actions. As a result, all users must belong to the SecureShopper group if they want to be able to access to the protected customer resources:\n\n    ![Websphere Secure Groups](/images/twas-securegroups.png)\n\n    During deployment, you will need to map your desired users or groups to the SecureShopper role. By default, SecureShopper group gets mapped to the SecureShopper role.\n\n### Configuring the datebase for the application\n\n1. Under Global Security, select J2C authentication data. Create a new user named DBUser using your db2 instance and password.\n    ![Websphere DB Config](/images/twas-configDB.png)\n\n\n1. Configuring JDBC Resources\n\n    Go to the Resources > JDBC > JDBC Providers section and ensure that you are at the Cell scope.\n     ![Websphere JDBC Resource](/images/twas-jdbcresource.png)\n\n1. Click the New Button to create a new JDBC provider.\n\n    Database type : DB2\n    Provider type : DB2 Using IBM JCC Driver\n    Implementation type : XA data source\n     ![Websphere JDBC Provider](/images/twas-configjdbcprovider.png)\n\n1. You need to enter the database class path information. Enter the directory where the DB2 Java is set. In this case, the class path would be\n\"/demo/db2drivers\"\n    ![Websphere JDBC Provider](/images/twas-jbdcdriverpath.png)\n\n1. Press Next and then Finish. Save the Configuration.\n    ![Websphere JDBC Provider](/images/twas-jdbcsetupcomplete.png)\n\n1. Go to the Resources > JDBC > Data sources section to create a new data source.\n\n    - Make sure that the scope is at Cell level and click New\n    - OrderDB - Step 1\n        - Data source name: OrderDS\n        - JNDI name: jdbc/orderds\n    \n    ![Websphere JDBC Data Source](/images/twas-datasource-1.png)\n\n    - OrderDB - Step 2 \n        - Select an existing JDBC provider --> DB2 Using IBM JCC Driver (XA)\n        \n    ![Websphere JDBC Data Source](/images/twas-datasource-2.png)\n\n    - ORDERDB - Step 3 \n        - Driver Type: 4\n        - Database name: Your database name\n        - Server name: Your default DB2 host\n        - Port number: Your default DB2 port\n        \n    ![Websphere JDBC Data Source](/images/twas-datasource-3.png)\n\n    - ORDERDB - Step 4\n        - Authentication alias for XA recovery: DB2User\n        - Component-managed authentication alias: DB2User\n        - Mapping-configuration alias: DefaultPrincipalMapping\n        - Container-managed authentication alias: DB2User\n        \n    ![Websphere JDBC Data Source](/images/twas-datasource-4.png)\n\n1. Once this is done, under Preferences, there will be a new resource called OrderDS. Make sure that the resources got connected using Test Connection option. You will see a success message if the connection is established successfully.\n\n![Websphere JDBC Test Connection](/images/twas-jbdctestcon.png)\n\n1. Check the Data source and select Test Connection to ensure you created the database correctly. If the connection fails, a few things to check are \n    - Your database is started as we did in the beginning.\n    - Your host and port number are correct.\n    - The classpath for the Driver is set properly.\n    - Check the WebSphere Variables. You may want to change them to point to your local DB2 install.\n\n#### Access the Application \n\nNow that the database is configured and the Applicaiton is deployed, we should be able to access the application. The URL of the application is\n    - 'http://localhost:9080/CustomerOrderServicesWeb/'\n\n![Application Access](/images/twas-applicationaccess.png)\n\n\n#### Download Datacollector From Transformation Advisor\n\n- Access the Transformation Advisor Page to Download the data collector. The TA access link can be referred as part of the Cloud-Native Toolkit menu, in the open shift dashboard.\n\n- Click on the \"Add a new workspace (+) Button\". The Enter the Name for the Workspace (Example: appmod_{initials})\n\n- Now Create a new Collection and provide a name for the collection and click on 'Save'. (Example: was_ta)\n\n- The Datacollector / Upload data screen appears as shown\n\n    ![apps](images/ta-dc.png)\n\n- Now click on the Data collector Button to navigate to the Data collector User interface\n\n    ![apps](images/ta-dc-download.png)\n\n- Select the Operating system of the Application WAS Server Environment. Then Click download.\n\n- Copy the installable zip to the Application WAS Server Environment.\n   \n    ```bash\n    docker cp {downloaded tgz file name}.tgz twas-customerorder:/demo\n    ```\n    Note: say tgz filename as transformationadvisor-Linux_appmod_bs_was_ta.tgz\n\n- Move to the localrepo of the application in your desktop, say the appmod-CustomerServiceApp\n\n- move to the docker folder\n\n    ```bash\n    cd docker\n    docker cp customCmd.properties  twas-customerorder:/demo\n    ```\n\n#### Run the data collector\n\nNow that you have validated that the CustomerOrderService application is running in the Docker container, it is time to run the data collector.  \n\n- Enter the twas-customerorder Docker container\n\n    ```bash\n    docker exec -it twas-customerorder bash\n    ```\n\n- Extract the downloaded tgz file, say transformationadvisor-Linux_appmod_bs_was_ta. you should find the folder \"transformationadvisor-2.0.3\" is created\n    ```bash\n    #tar xvfz {downloaded tgz file name}.tgz\n    tar xvfz transformationadvisor-Linux_appmod_bs_was_ta.tgz\n    ```\n- Copy the customCmd.properties file in the folder \"demo\" to the folder \"transformationadvisor-2.0.3/conf/\" folder\n    ```bash\n    cp customCmd.properties transformationadvisor-2.0.3/conf/\n    ```\n\n- Navigate to the data collector directory\n\n    ```bash\n    cd /demo/transformationadvisor-2.0.3\n    ```\n\n- Execute the data collector\n\n    ```bash\n    ./bin/transformationadvisor -w /opt/IBM/WebSphere/AppServer -p AppSrv01 wsadmin passw0rd\n    ```\n\n- When prompted, accept the License agreement\n\n- After a few minutes, you will either see a \"Thank you for uploading your data. You can proceed to the application UI for doing further analysis.\" message or an error related to \"unable to upload the data\" which will occur if the data collector can't access the Transformation Advisor UI which is running in Red Hat OpenShift.\n\n    ![apps](/images/ta-upload-1.png)\n\n- Verify that the results zip file has been created\n\n    ```bash\n    ls -la AppSrv01.zip\n    -rw-r--r-- 1 was root 219604 XXXXXXXXXX AppSrv01.zip\n     ```\n\n- Use CTRL+D to exit from the Docker container\n\n- Copy the `AppSrv01.zip` file from within the Docker container to your local disk\n\n    ```bash\n    docker cp twas-customerorder:/demo/transformationadvisor-2.0.3/AppSrv01.zip .\n    ```\n- Stop and remove the Docker container\n\n    ```bash\n    docker stop twas-customerorder\n    docker rm twas-customerorder\n    ```\n\n## Summary\n\nYou have now completed the scanning of the existing Websphere Application in your local system and have collected the scan results as Zip file. The results of the scan will be analyzed in Part 2 of the exercise\n\n\n\n","type":"Mdx","contentDigest":"9b701f227b53ec6bd19a6795df60c405","owner":"gatsby-plugin-mdx","counter":972},"frontmatter":{"title":"Scan Existing Legacy Application"},"exports":{},"rawBody":"---\ntitle: Scan Existing Legacy Application\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\n## **Scan the Existing Application running on WebSphere Application Server using Data Colletor**\n\n</PageDescription>\n\nThe exercise is focused on migrating a Java EE app, that requires no code changes, from tradition WebSphere environment to the Openshift Liberty Container on the IBM Cloud.\n\nThe exercise is divided into three parts and the Part 1, is focussed on Scanning the existing application and collecting data using data collector of the Transformation Advisor.\n\nThis exercise assumes the following:\n\n1. You are using a <Globals name=\"env\" /> that has already been installed.\n1. Cloud Pak for Applications has already been installed in the environment.\n1. You have Docker Desktop running on your laptop (one of the prerequisites).\n\n\n## Business need\n\nRuntime modernization moves a traditional application to a \"built for the cloud\" runtime with the least amount of effort. IBM® WebSphere® Liberty is a fast and dynamic Java™ application server that is built on the open source Open Liberty project. Ideal for the cloud, Liberty is a combination of IBM technology and open source software. It has fast startup times (less than 2 seconds), no server restarts to pick up changes, and a simple XML configuration.\n\nHowever, WebSphere Liberty doesn't support all the traditional Java EE and WebSphere proprietary functions. You might need to change some code to move an application to the new runtime. You also need to move the application configuration from traditional WebSphere to WebSphere Liberty's XML configuration files.\n\nThis path gets the application onto a cloud-ready runtime container that is easy to use and portable. However, the application is mostly unchanged and is not modernized to a newer architecture such as microservices. This is first step towards modernization, and you will see immediate benefits.\n\nIn this exercise, we will look at existing application which is running on WebSphere Application Server ND (Version 8.5.5.14) and how IBM Modernization Tool like Transformation Advisor helps.\n\nThe objective of this lab is to showcase how Transformation Advisor helps move the existing application to container platform, with mandatory changes which are pointed by this tool.\n\n### Project hill\n\nHere's the [hill statement](https://www.ibm.com/garage/method/practices/think/practice_hills/) describing the desired outcome of this migration:\n\n- **Who**: Operations teams are tasked with moving existing Java applications from traditional WebSphere ND to \"the Cloud\" and they would need to migrated this application with few modifications to the code with support from developers.\n\n- **What**: This is an application that Business users still need. They consider that this application is needed by the business and its to refractor and modernize this application. But the business uses this application for their day to day business and hence direct modernization could not be directly fit in. Inorder to modernize to a newer architecture such as microservices and AI capability, the first towards modernization is to move the application as monolithch as-is with fewer modifications to cloud. Then later slowly move from monolithch to microservices to see immediate benefits\n\n- **Wow**: With a few simple steps, you can move this  application and the associated configuration to a Liberty runtime in a Docker container with few changes to the code base and run this application without impacting the business. This brings in the benefits of the consistency and reliability of containers as well as helping to improve DevOps and speed to market. Thus putting the first step towards modernization of this application.\n\n## Architecture\n\nApplication is typical retail store application, called **‘Customer Order Services Application’**. Where user can login, browse various items related to Electronics products and Movies then add into cart. The component architecture of the application is depicted as below\n\n![component architecture](/images/comparch-custord.png)\n\nThere are several components of the overall application architecture: - Starting with the database, the application leverages two SQL-based databases running on IBM DB2. - The application exposes its data model through an Enterprise JavaBean layer, named CustomerOrderServices. This components leverages the Java Persistence API to exposed the backend data model to calling services with minimal coding effort. - This build of the application uses JavaEE6 features for EJBs and JPA. - The next tier of the application, named CustomerOrderServicesWeb, exposes the necessary business APIs via REST-based web services. This component leverages the JAX-RS libraries for creating Java-based REST services with minimal coding effort. - This build of the application is using JAX-RS 1.1 version of the respective capability. - The application's user interface is exposed through the CustomerOrderServicesWeb component as well, in the form of a Dojo Toolkit-based JavaScript application. Delivering the user interface and business APIs in the same component is one major inhibitor our migration strategy will help to alleviate in the long-term. - Finally, there is an additional integration testing component, named CustomerOrderServicesTest that is built to quickly validate an application's build and deployment to a given application server. This test component contains both JPA and JAX-RS-based tests\n\nThe High level Technical architecture depicts the typical customer environment with IBM HTTP Server and WebSphere Application Server Network Deployment (WebSphere ND) running on traditional IT along with the application database.\n\n![twasarch](/images/twas-arch.png)\n\n\nFor the purposes of this lab exercise, you will run a simulation of the WebSphere ND environment on your laptop using a Docker container that contains Customer Order Service, WebSphere Application Server, and a data collector. You will then use IBM Cloud Transformation Advisor—part of the Cloud Pak for Applications installed in your team’s Developer Environment—to analyze the WebSphere ND environment and create the artifacts you need to run the same Customer Order Service application on Liberty in a Docker container on your laptop.\n\n## Technical Requirements\n\nThis modernization exercise has the following requirements:\n- Minimal code changes -- You need do a minimal code change to convert the EJB transactions to JPA transactions\n- The target is to get the application running on Liberty in a Open Shift Cluster on IBM Cloud\n- The IBM Cloud based DB2 Service is used for Database connectivity\n\n\n## Guide\nOverall the Modernization exercise has the three parts that performs the below steps. However, this part 1 covers the first two aspects until scanning of the app using data collector of Transformation advisor.\n- Run a pre-configured instance of traditional WebSphere in a Docker container on your laptop to simulate the existing customer environment\n- Use the data collector in Transformation Advisor to scan the WebSphere runtime and the CustomerOrderService WebSphere application\n- Load the scan results in to Transformation Advisor running in the IBM Cloud environment's Red Hat OpenShift cluster\n- Review the Transformation Advisor analysis\n- Use the Tekton pipeline to build a Docker image with Liberty and deploy the application in the IBM Cloud Open Shift Cluster\n- Access the newly created application on Container based Light weight Open Liberty\n\n### Scan the existing application\n\n<Tabs>\n<Tab label=\"Cloud Shell\" open=\"true\">\n\n- The first part of the exercise until \"Analyze the scan results\" will be a demo.\n\n- The Scan results of the application and the application binaries are upload to the git and the same can be used for analysis the results using Transfromation advisor and later deploy them on the Open Shfit Cluster\n\n</Tab>\n<Tab label=\"Desktop/Laptop\" open=\"true\">\n\n-  Ensure your laptop has necessary previlages and open internet connectivity, to set up the local docker environment inorder to setup the local WAS and DB2 server for deploying the local application.\n\n- You can then proceed on the below steps from scanning the location application using Data Collector tool of Transformation Advisore and further follow the steps to Analyze the Application and later deploy on the Open Shift cluster\n\n</Tab>\n</Tabs>\n\n\nNote: If you do not have Docker running on your laptop/desktop, you will not be able to preform this step. Read through it, but you will not be able to execute the steps until \"Analyze the scan results\"\n\nWe need to first have the application installed and running so that we can scan it.\n\n#### Setup the Database\nThis project uses db2 as its database. Before creating the databases and getting connected to them, verify if your database is running.\nIn this case we are using db2 database service from the IBM Public Cloud.\n\n- Create the databases - ORDERDB\n\n- After this, run the database scripts for the orderdb.sql. The script is available as part of the DB Scripts folder\n\n- Next run the initdata.sql to load the data for the application\n\n#### Setup the Application\nIn order to simulate a real traditional WebSphere ND customer environment on your laptop, we have provided you with a Dockerfile that creates a Docker image that you can run locally. This image will contain traditional WebSphere, the CustomerOrderService application, and the data collector in Transformation Advisor. The end result will be a container running the application which accesses the shared database.\n\n<InlineNotification kind=\"info\">\n\n**Note:** In the real world, you would work with the client's WebSphere administrators to execute the data collector in their environment. For this exercise, we simulate that production environment as a Docker image running on your laptop.\n\n</InlineNotification>\n\n- Clone the repository to your machine and build the application\n\n    ```bash \n    git clone https://github.com/ibm-gsi-ecosystem/appmod-advance-app.git\n    cd CustomerOrderServicesProject \n    mvn install\n    ```\n\n- Copy the 'CustomerOrderServicesApp-0.1.0-SNAPSHOT.ear' from the 'target' folder of 'CustomerOrderServicesApp' to the Docker folder.\n    \n    ```bash\n    cd ..\n    cd Docker\n    cp ../CustomerOrderServicesApp/target/CustomerOrderServicesApp-0.1.0-SNAPSHOT.ear .\n    ```\n\n- Review the Dockerfile, see that the Docker image will contain:\n    - The DB2 JDBC drivers\n    - Compiled application EAR files\n\n- Review the `customCmd.properties` file\n\n    This file is used to ensure that the data collector scans all of the files in the application. By default, the data collector ignores Java classes in the `com.ibm.websphere` packages, as well as packages that are typically used by open-source JARs such as `net` and `org` packages. These packages are ignored because they typically contain code that the client doesn't own, so any issues found by Transformation Advisor would be false positives. This becomes a problem when the client's code is in a package such as `net` or `org` because the scanner will ignore their Java code.\n\n    ```java\n    evaluation=--evaluate --excludePackages=com.informix,com.microsoft,com.sybase,com.sun,java,javax,net,org,oracle,sqlj,_ibmjsp --includePackages=com.ibm\n    migration_liberty=--analyze --sourceAppServer=was855 --targetAppServer=liberty --targetCloud=dockerIBMCloud --includePackages=com.ibm --excludePackages=com.informix,com.microsoft,com.sybase,com.sun,java,javax,net,org,oracle,sqlj,_ibmjsp\n    migration_was=--analyze --sourceAppServer=was855 --targetAppServer=was90 --targetCloud=vmIBMCloud --includePackages=com.ibm --excludePackages=com.informix,com.microsoft,com.sybase,com.sun,java,javax,net,org,oracle,sqlj,_ibmjsp\n    #inventory=--inventory --excludeFiles=\".*/directory/LargeXMLFileName.xml\"\n    #featureList=--featureList --excludeFiles=\".*/directory/LargeXMLFileName.xml\"\n    #java_opt=-Xmx2g\n    ```\n\n- Build the Docker image\n\n    ```bash\n    docker build -t twas-customerorder .\n    ```\n\n- Review the Docker image for traditional WebSphere Application Server\n\n    ```bash\n    $ docker images | grep websphere\n\n    REPOSITORY                      TAG                         IMAGE ID        CREATED          SIZE\n    ibmcom/websphere-traditional    profile                     67b52a4c08ad    12 months ago    1.75GB\n    ibmcom/websphere-liberty        webProfile7-ubi-min-amd64   34544a83c068     3 weeks ago      446MB\n    ```\n\n    (The `websphere-liberty` image is shown here for comparison. You may not see it in your registry (yet).)\n\n    You may be wondering: If traditional WebSphere runs in a Docker container, then why are we moving to Liberty?\n\n    - One reason: **1.75GB**!! (The Liberty image is 446MB, one-quarter the size.)\n\n    - Another reason: Having to hardcode configuration values in configuration files (like in the previous step) because traditional WebSphere can't read [configuration from environment variables](https://12factor.net/config)\n\n- Start an instance of the Docker image\n\n    ```bash\n    docker run -d -p 9080:9080 -p 9443:9443 -p 9060:9060 -p 9043:9043 -v \"$(pwd)\":/data --name twas-customerorder twas-customerorder:latest\n    ```\n\n- Tail the logs for the Docker container and wait for the message shown below:\n\n    ```\n    $ docker logs -f twas-customerorder\n    ...\n\n    *** CERTIFICATES THAT ARE EXPIRED OR BEYOND THE EXPIRATION THRESHOLD AND HAVE BEEN REPLACED ***;\n\n    CWPKI0645I: Personal certificate alias \"default\" in KeyStore \"NodeDefaultKeyStore((cell):DefaultCell01:(node):DefaultNode01)\" was REPLACED.\n    CWPKI0645I: Personal certificate alias \"default\" in KeyStore \"NodeRSATokenKeyStore((cell):DefaultCell01:(node):DefaultNode01)\" was REPLACED.\n    ```\n\n    This message is expected because this version of the traditional WebSphere Docker image is over 12 months old and the SSL certificates have expired.\n\n- Restart the container to refresh these SSL certificates\n\n    ```bash\n    docker stop twas-customerorder\n    docker start twas-customerorder\n    ```\n\n- Tail the logs for the Docker container and wait for the message shown below:\n\n    ```\n    $ docker logs -f twas-customerorder\n    ...\n\n    WSVR0001I: Server server1 open for e-business\n    ```\n\n- Log in to the Administrative Console\n\n    https://localhost:9043/ibm/console\n\n    NOTE: The console requires secure HTTP. Chrome and Safari block https://localhost and recently don't allow exceptions. You may need to use Firefox to log in to the console. Firefox blocks, but gives you the option to proceed anyways.\n\n    username: `wsadmin` password: `passw0rd`\n\n\n### Setting up security for the application\n\n1. Log into the Admin Console via http://localhost:9043/admin.\n\n1. In the Global security section, check Enable application security and click Save.\n    ![Websphere Application Security](/images/twas-securitysettings.png)\n\n1. In the Users and Groups section, select Manage Users and create the following users:\n\n    username: rbarcia password: bl0wfish\n    username: kbrown password: bl0wfish\n\n    ![Websphere Manage Users](/images/twas-manageusers.png)\n\n1. In the Users and Groups section, select Manage Groups and create the following group:\n\n    group name: SecureShopper\n\n    This JEE application implements role-based security whereby only those users and groups with appropriate roles can execute certain actions. As a result, all users must belong to the SecureShopper group if they want to be able to access to the protected customer resources:\n\n    ![Websphere Secure Groups](/images/twas-securegroups.png)\n\n    During deployment, you will need to map your desired users or groups to the SecureShopper role. By default, SecureShopper group gets mapped to the SecureShopper role.\n\n### Configuring the datebase for the application\n\n1. Under Global Security, select J2C authentication data. Create a new user named DBUser using your db2 instance and password.\n    ![Websphere DB Config](/images/twas-configDB.png)\n\n\n1. Configuring JDBC Resources\n\n    Go to the Resources > JDBC > JDBC Providers section and ensure that you are at the Cell scope.\n     ![Websphere JDBC Resource](/images/twas-jdbcresource.png)\n\n1. Click the New Button to create a new JDBC provider.\n\n    Database type : DB2\n    Provider type : DB2 Using IBM JCC Driver\n    Implementation type : XA data source\n     ![Websphere JDBC Provider](/images/twas-configjdbcprovider.png)\n\n1. You need to enter the database class path information. Enter the directory where the DB2 Java is set. In this case, the class path would be\n\"/demo/db2drivers\"\n    ![Websphere JDBC Provider](/images/twas-jbdcdriverpath.png)\n\n1. Press Next and then Finish. Save the Configuration.\n    ![Websphere JDBC Provider](/images/twas-jdbcsetupcomplete.png)\n\n1. Go to the Resources > JDBC > Data sources section to create a new data source.\n\n    - Make sure that the scope is at Cell level and click New\n    - OrderDB - Step 1\n        - Data source name: OrderDS\n        - JNDI name: jdbc/orderds\n    \n    ![Websphere JDBC Data Source](/images/twas-datasource-1.png)\n\n    - OrderDB - Step 2 \n        - Select an existing JDBC provider --> DB2 Using IBM JCC Driver (XA)\n        \n    ![Websphere JDBC Data Source](/images/twas-datasource-2.png)\n\n    - ORDERDB - Step 3 \n        - Driver Type: 4\n        - Database name: Your database name\n        - Server name: Your default DB2 host\n        - Port number: Your default DB2 port\n        \n    ![Websphere JDBC Data Source](/images/twas-datasource-3.png)\n\n    - ORDERDB - Step 4\n        - Authentication alias for XA recovery: DB2User\n        - Component-managed authentication alias: DB2User\n        - Mapping-configuration alias: DefaultPrincipalMapping\n        - Container-managed authentication alias: DB2User\n        \n    ![Websphere JDBC Data Source](/images/twas-datasource-4.png)\n\n1. Once this is done, under Preferences, there will be a new resource called OrderDS. Make sure that the resources got connected using Test Connection option. You will see a success message if the connection is established successfully.\n\n![Websphere JDBC Test Connection](/images/twas-jbdctestcon.png)\n\n1. Check the Data source and select Test Connection to ensure you created the database correctly. If the connection fails, a few things to check are \n    - Your database is started as we did in the beginning.\n    - Your host and port number are correct.\n    - The classpath for the Driver is set properly.\n    - Check the WebSphere Variables. You may want to change them to point to your local DB2 install.\n\n#### Access the Application \n\nNow that the database is configured and the Applicaiton is deployed, we should be able to access the application. The URL of the application is\n    - 'http://localhost:9080/CustomerOrderServicesWeb/'\n\n![Application Access](/images/twas-applicationaccess.png)\n\n\n#### Download Datacollector From Transformation Advisor\n\n- Access the Transformation Advisor Page to Download the data collector. The TA access link can be referred as part of the Cloud-Native Toolkit menu, in the open shift dashboard.\n\n- Click on the \"Add a new workspace (+) Button\". The Enter the Name for the Workspace (Example: appmod_{initials})\n\n- Now Create a new Collection and provide a name for the collection and click on 'Save'. (Example: was_ta)\n\n- The Datacollector / Upload data screen appears as shown\n\n    ![apps](images/ta-dc.png)\n\n- Now click on the Data collector Button to navigate to the Data collector User interface\n\n    ![apps](images/ta-dc-download.png)\n\n- Select the Operating system of the Application WAS Server Environment. Then Click download.\n\n- Copy the installable zip to the Application WAS Server Environment.\n   \n    ```bash\n    docker cp {downloaded tgz file name}.tgz twas-customerorder:/demo\n    ```\n    Note: say tgz filename as transformationadvisor-Linux_appmod_bs_was_ta.tgz\n\n- Move to the localrepo of the application in your desktop, say the appmod-CustomerServiceApp\n\n- move to the docker folder\n\n    ```bash\n    cd docker\n    docker cp customCmd.properties  twas-customerorder:/demo\n    ```\n\n#### Run the data collector\n\nNow that you have validated that the CustomerOrderService application is running in the Docker container, it is time to run the data collector.  \n\n- Enter the twas-customerorder Docker container\n\n    ```bash\n    docker exec -it twas-customerorder bash\n    ```\n\n- Extract the downloaded tgz file, say transformationadvisor-Linux_appmod_bs_was_ta. you should find the folder \"transformationadvisor-2.0.3\" is created\n    ```bash\n    #tar xvfz {downloaded tgz file name}.tgz\n    tar xvfz transformationadvisor-Linux_appmod_bs_was_ta.tgz\n    ```\n- Copy the customCmd.properties file in the folder \"demo\" to the folder \"transformationadvisor-2.0.3/conf/\" folder\n    ```bash\n    cp customCmd.properties transformationadvisor-2.0.3/conf/\n    ```\n\n- Navigate to the data collector directory\n\n    ```bash\n    cd /demo/transformationadvisor-2.0.3\n    ```\n\n- Execute the data collector\n\n    ```bash\n    ./bin/transformationadvisor -w /opt/IBM/WebSphere/AppServer -p AppSrv01 wsadmin passw0rd\n    ```\n\n- When prompted, accept the License agreement\n\n- After a few minutes, you will either see a \"Thank you for uploading your data. You can proceed to the application UI for doing further analysis.\" message or an error related to \"unable to upload the data\" which will occur if the data collector can't access the Transformation Advisor UI which is running in Red Hat OpenShift.\n\n    ![apps](/images/ta-upload-1.png)\n\n- Verify that the results zip file has been created\n\n    ```bash\n    ls -la AppSrv01.zip\n    -rw-r--r-- 1 was root 219604 XXXXXXXXXX AppSrv01.zip\n     ```\n\n- Use CTRL+D to exit from the Docker container\n\n- Copy the `AppSrv01.zip` file from within the Docker container to your local disk\n\n    ```bash\n    docker cp twas-customerorder:/demo/transformationadvisor-2.0.3/AppSrv01.zip .\n    ```\n- Stop and remove the Docker container\n\n    ```bash\n    docker stop twas-customerorder\n    docker rm twas-customerorder\n    ```\n\n## Summary\n\nYou have now completed the scanning of the existing Websphere Application in your local system and have collected the scan results as Zip file. The results of the scan will be analyzed in Part 2 of the exercise\n\n\n\n","fileAbsolutePath":"/workspace/ibm-gsi-cloudnative-journey/src/pages/developer-advanced-2/appmod-exercise-part1/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}