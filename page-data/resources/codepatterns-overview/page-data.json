{"componentChunkName":"component---src-pages-resources-codepatterns-overview-index-mdx","path":"/resources/codepatterns-overview/","result":{"pageContext":{"frontmatter":{"title":"Code Patterns Overview"},"relativePagePath":"/resources/codepatterns-overview/index.mdx","titleType":"page","MdxNode":{"id":"0d2fef3e-84d0-54b4-a07f-23feff5d4685","children":[],"parent":"ea564f98-5a10-58c2-85a1-f90b3671d115","internal":{"content":"---\ntitle: Code Patterns Overview\n---\n\nTo complement the IBM Cloud for Garage Development Tools this project provides\na set of **Code Patterns**. These have been designed to give a production ready\nentry point for Cloud-Native development. While the use of the **Code Patterns\n** is not required to be able\nto use the development tools, their use is **highly recommended**.\n\nThere are a small number of **Code Pattern** git repositories that provide\n support for\n different\n architecture layers of your Cloud-Native\nsolution these includes:\n\n- User Interfaces\n- Backend for Frontends\n- Microservices\n\nYou can pick the **Code Pattern** that best meets your requirements and it will\n seamlessly integrate\nwith the installed development tools.\n\nYou can work with more [Code Patterns](https://developer.ibm.com/patterns/) from\n  [developer.ibm.com](https://developer.ibm.com/).\nThese patterns can be \"enabled\" using the `Bring your own code` approach on\n[Code Patterns Docs](/resources/codepatterns-gitrepos).\nEven though they are \"enabled\" they are not optimised for production usage and do not include a number of key IBM Garage best practices.\nThey are fully open source and they can be enhanced overtime.\n\nYou can also work with the **Code Patterns** provided from the IBM Cloud\n [IBM Cloud Code Patterns](https://cloud.ibm.com/developer/appservice/starter-kits) for\n  the server side patterns you can \"enabled\" these using the `Bring your own\n   code` approach on [Code Patterns Docs](/resources/codepatterns-gitrepos)\n\nThere is more information below on what is included in the **Code Patterns**.\n\n<ArtDirection>\n\n![Starter Kit Architect](architecture.png)\n\n</ArtDirection>\n\n## Why another Code Pattern\n\nAs teams have built out production solutions using IBM Kubernetes Services and RedHat OpenShift\non the IBM Cloud it has became clear that starting with a `hello-world\n` style code pattern slows down an agile team.\n\nIn cases where you are learning the basic principles of Cloud-Native development with a specific language it does help\nto start with the basic principles of `hello-world` but when you are building production code to be used by real users\nit takes a lot of effort to industrialize this code ready for production.\n\nThe objective of these *Code Patterns* is to kick off a project quickly so\n they can reach maximum development\nvelocity in the least amount of time. To not contain any business logic and to have a set of proven opinionated\nframeworks that are commonly used in the industry this can include `Express`, `React` and testing frameworks.\n\nWhy Code Patterns ? As the approach to Cloud-Native microservice development has evolved\na number of language frameworks have come into play, runtime configuration technologies and best practices\nto improve quality and robustness. It becomes very time consuming to create, manage and maintain these elements.\n\n<Row>\n<Column colMd={2} colLg={5} noGutterMdLeft>\n\nIf we look at a typical Cloud-Native app, they require a number of supporting files, similar to the ones\nfound in the outer ring of this diagram. They take time to create and are only often needed for the initial\nseed of the project. Its also never clear where the documentation is for these elements and how they are work together.\n\nSome typical examples :\n\n- Dockerfile\n- Helm chart\n- CI pipeline ([Jenkins](/guides/continuous-integration), [Tekton](/guides/continuous-integration-tekton), etc.)\n- TDD Frameworks\n- Code Analysis\n- Monitoring / Logging Support\n- Cloud Service bindings and credentials\n- User Case logic UI, BFF, Microservice\n\nThe Code Patterns provide a key number of these supporting files and meta data\n and are tested on every code change to make sure they work with IBM\n  Kubernetes and IBM Red Hat OpenShift managed clusters environments.\n\n</Column>\n<Column colMd={2} colLg={6} noGutterMdLeft>\n\n<ArtDirection>\n\n## Code Pattern Template\n\n![Initial JFrog](cloudnative.png)\n\n</ArtDirection>\n\n</Column>\n</Row>\n\nThe purpose of the Code Pattern is to provide the scaffold code for the elements outside of your working\nuse case business logic. This will then allow a developer to get started a\n lot quicker and allow you to push code regularly into your CI environment.\n\n## What constitutes a good code pattern\n\nIf you want to contribute a **Code Pattern** have a look at the examples that are provided. They all have most of the\nfeatures listed below. They must be UBI ([Universal Base Image](https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image)) based\nso they can run in Red Hat OpenShift as well as Kubernetes. They must have a `Dockerfile` that uses that UBI.\nTo make them work with continuous integration, you can provide a Jenkins or Tekton pipeline.\n\nMake sure there is a good use case that is repeatable in your solution architecture. Make sure the code is documented and includes a `README.md'. There is good code coverage for tests and you have integrated SonarQube code scanning on the build process.\nFinally them put in open source so other developers can enhance, improve or consume.\n\n- README\n- License\n- Package.json\n- Use case example source code for example APIs, UIs, Dashboards, Machine learning models\n- Unit test framework\n- Pact test framework\n- Integration testing including User Experience tests\n- SonarQube scan integration\n- Dockerfile using Universal Base Image\n- Helm chart that is production ready\n- Jenkinsfile or Tekton pipeline that is production ready\n- Make it Open Source\n\n\n","type":"Mdx","contentDigest":"737627285a718a02811ab0e4635611ad","owner":"gatsby-plugin-mdx","counter":1011},"frontmatter":{"title":"Code Patterns Overview"},"exports":{},"rawBody":"---\ntitle: Code Patterns Overview\n---\n\nTo complement the IBM Cloud for Garage Development Tools this project provides\na set of **Code Patterns**. These have been designed to give a production ready\nentry point for Cloud-Native development. While the use of the **Code Patterns\n** is not required to be able\nto use the development tools, their use is **highly recommended**.\n\nThere are a small number of **Code Pattern** git repositories that provide\n support for\n different\n architecture layers of your Cloud-Native\nsolution these includes:\n\n- User Interfaces\n- Backend for Frontends\n- Microservices\n\nYou can pick the **Code Pattern** that best meets your requirements and it will\n seamlessly integrate\nwith the installed development tools.\n\nYou can work with more [Code Patterns](https://developer.ibm.com/patterns/) from\n  [developer.ibm.com](https://developer.ibm.com/).\nThese patterns can be \"enabled\" using the `Bring your own code` approach on\n[Code Patterns Docs](/resources/codepatterns-gitrepos).\nEven though they are \"enabled\" they are not optimised for production usage and do not include a number of key IBM Garage best practices.\nThey are fully open source and they can be enhanced overtime.\n\nYou can also work with the **Code Patterns** provided from the IBM Cloud\n [IBM Cloud Code Patterns](https://cloud.ibm.com/developer/appservice/starter-kits) for\n  the server side patterns you can \"enabled\" these using the `Bring your own\n   code` approach on [Code Patterns Docs](/resources/codepatterns-gitrepos)\n\nThere is more information below on what is included in the **Code Patterns**.\n\n<ArtDirection>\n\n![Starter Kit Architect](architecture.png)\n\n</ArtDirection>\n\n## Why another Code Pattern\n\nAs teams have built out production solutions using IBM Kubernetes Services and RedHat OpenShift\non the IBM Cloud it has became clear that starting with a `hello-world\n` style code pattern slows down an agile team.\n\nIn cases where you are learning the basic principles of Cloud-Native development with a specific language it does help\nto start with the basic principles of `hello-world` but when you are building production code to be used by real users\nit takes a lot of effort to industrialize this code ready for production.\n\nThe objective of these *Code Patterns* is to kick off a project quickly so\n they can reach maximum development\nvelocity in the least amount of time. To not contain any business logic and to have a set of proven opinionated\nframeworks that are commonly used in the industry this can include `Express`, `React` and testing frameworks.\n\nWhy Code Patterns ? As the approach to Cloud-Native microservice development has evolved\na number of language frameworks have come into play, runtime configuration technologies and best practices\nto improve quality and robustness. It becomes very time consuming to create, manage and maintain these elements.\n\n<Row>\n<Column colMd={2} colLg={5} noGutterMdLeft>\n\nIf we look at a typical Cloud-Native app, they require a number of supporting files, similar to the ones\nfound in the outer ring of this diagram. They take time to create and are only often needed for the initial\nseed of the project. Its also never clear where the documentation is for these elements and how they are work together.\n\nSome typical examples :\n\n- Dockerfile\n- Helm chart\n- CI pipeline ([Jenkins](/guides/continuous-integration), [Tekton](/guides/continuous-integration-tekton), etc.)\n- TDD Frameworks\n- Code Analysis\n- Monitoring / Logging Support\n- Cloud Service bindings and credentials\n- User Case logic UI, BFF, Microservice\n\nThe Code Patterns provide a key number of these supporting files and meta data\n and are tested on every code change to make sure they work with IBM\n  Kubernetes and IBM Red Hat OpenShift managed clusters environments.\n\n</Column>\n<Column colMd={2} colLg={6} noGutterMdLeft>\n\n<ArtDirection>\n\n## Code Pattern Template\n\n![Initial JFrog](cloudnative.png)\n\n</ArtDirection>\n\n</Column>\n</Row>\n\nThe purpose of the Code Pattern is to provide the scaffold code for the elements outside of your working\nuse case business logic. This will then allow a developer to get started a\n lot quicker and allow you to push code regularly into your CI environment.\n\n## What constitutes a good code pattern\n\nIf you want to contribute a **Code Pattern** have a look at the examples that are provided. They all have most of the\nfeatures listed below. They must be UBI ([Universal Base Image](https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image)) based\nso they can run in Red Hat OpenShift as well as Kubernetes. They must have a `Dockerfile` that uses that UBI.\nTo make them work with continuous integration, you can provide a Jenkins or Tekton pipeline.\n\nMake sure there is a good use case that is repeatable in your solution architecture. Make sure the code is documented and includes a `README.md'. There is good code coverage for tests and you have integrated SonarQube code scanning on the build process.\nFinally them put in open source so other developers can enhance, improve or consume.\n\n- README\n- License\n- Package.json\n- Use case example source code for example APIs, UIs, Dashboards, Machine learning models\n- Unit test framework\n- Pact test framework\n- Integration testing including User Experience tests\n- SonarQube scan integration\n- Dockerfile using Universal Base Image\n- Helm chart that is production ready\n- Jenkinsfile or Tekton pipeline that is production ready\n- Make it Open Source\n\n\n","fileAbsolutePath":"/workspace/ibm-gsi-cloudnative-journey/src/pages/resources/codepatterns-overview/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}