{"componentChunkName":"component---src-pages-developer-advanced-1-swagger-and-openapi-handson-index-mdx","path":"/developer-advanced-1/swagger-and-openapi-handson/","result":{"pageContext":{"frontmatter":{"title":"Swagger & Open API","description":"Swagger & Open API"},"relativePagePath":"/developer-advanced-1/swagger-and-openapi-handson/index.mdx","titleType":"page","MdxNode":{"id":"b84a63ba-5da7-5633-b86c-46cb998f2df7","children":[],"parent":"d8c054a4-f74b-5882-8ce1-e2e9b864a294","internal":{"content":"---\ntitle: Swagger & Open API                                                                                 \ndescription: Swagger & Open API\n---\n\nTesting of Web APIs has been always a challenge as it exposes its endpoints rather than showing a UI. Testing Web APIs have a dependency on third-party tools like PostMan.\nSwagger resolves this by providing a UI representation of the RESTful APIs without any implementation logic. Swagger generates UI using the OpenAPI specification (swagger.json) \nbased on service and code.Swagger.json describes capabilities of service.\n\n### Activities\n\nOpen API specification document can be manually written using a tool like Swagger editor or even auto-generated through code.\nFor,almost all our base code patterns (other than Node-Angular and Node-react ), API specification is auto-generated from code.\nLets take the example of [inventory-management-bff](https://github.com/ibm-gsi-ecosystem/inventory-management-bff-solution) to see how OpenAPI specification document can be auto-generated from code.\nInventory-bff is written in typescript. \n- npm package [\"typescript-rest-swagger\"](https://www.npmjs.com/package/typescript-rest-swagger) is used to create the OpenAPI specification in this typescript project.\n- Usage: swaggerGen -c ./swagger.config.json \n- swagger.config.json file contains all the settings about the swagger generation.\n- In inventory-bff-solution, this is run as a post-build script through package.json:\n  \n  ```bash\n     package.json\n     \"postbuild\": \"npm run swagger\",\n     \"swagger\": \"swaggerGen -c ./swagger.config.json\"\n  ```\n  \n  ```bash\n     swagger.config.json\n     {\n      \"swagger\": {\n        \"basePath\": \"\",\n        \"outputDirectory\": \"./dist\",\n        \"entryFile\": \"./src/controllers/index.ts\",\n        \"produces\": [\n          \"application/json\"\n        ]\n       }\n      }\n  ```\n- postbuild script runs after `npm run build` and creates the swagger.json in the dist folder which is created as result of build.\n\n- /api-docs endpoint of inventory-management-bff uses the swagger.json to create the Swagger documentation of inventory-management-bff solution.It is referenced in `server.ts` file as shown below:\n ```bash \n      server.ts\n      const swaggerPath = join(process.cwd(), 'dist/swagger.json');\n      if (existsSync(swaggerPath)) {\n        Server.swagger(\n          apiRouter,\n          {\n            filePath: swaggerPath,\n            schemes: this.swaggerProtocols,\n            host: this.swaggerHost,\n            endpoint: '/api-docs'\n          },\n        );\n      }\n  ```\n  ![Inventory-bff APIDocs](./images/invbff_openapi.png)\n  \n### Give it a try\n\nSwagger API editor along with Swagger codegen simplifies your build process by giving you the option of creating server-stubs and client SDKs for any API,defined with the OpenAPI specification.\n\nSwagger API editor is available as part of Cloudnative toolkit.\n\nAs a part of this exercise, we will be creating a client SDK for [inventory-management-svc](https://github.com/ibm-gsi-ecosystem/inventory-management-svc-solution) application which will be consumed by another microservice.\n\n- You would have run the [inventory application] as part of [Developer Intermediate journey].\n  Login to the openshift cluster on the terminal where you had completed your inventory application and run the following command:\n\n  ```bash\n   oc get route -n <your_inventory_appln_namespace>\n  ```\nwhere <your_inventory_appln_namespace> is the namespace where you ran your inventory application.\n  \n  ![oc get route](./images/openapi-practical.png)\n\n\n- Copy the inventory-management-svc-solution application's route URL and paste it in a browser tab.\n  UI would look something like this:\n\n   ![Inventory Service Webscreen](./images/inv-mgmt-svc_ui.png)\n\n- Click on the api-docs link which will open a new-tab with the OpenAPI specification json file. Copy the whole json.\n\n- Go to the 9-square square icon on the top of your openshift web console.Select Swagger Editor to open the Swagger Editor application.\n\n- Clear the content on the left side of the Swagger editor and paste the json you had copied from api-docs URL in the previous step.\n  While copying, the following pop-up will appear to convert json to YAML.Click on \"OK\"\n\n  ![JSONtoYAML](./images/convertjsontoyaml.png)\n\n- Once openAPI specification is successfully pasted, you will be able to see Swagger UI for the API on the right side.\n \n  ![swaggereditor](./images/swaggereditor.png)\n\n- You have the option to generate server and client SDKs in around 20 different languages.\n  inventory-svc-application is consumed by inventory-bff-application.Hence, we will create a javascript client.\n\n   ![javascriptclient](./images/javascript_client.png)\n\n- The client sdk will look something like this:\n  \n  ![Javascript Client Git](./images/javascriptclient_git.png)\n\n- As mentioned in the README.md, create a git repo for the javascript client you just created and push the code to the repository.\n  Create a new git repo on your github account and follow the instructions under `create a new repository on the command line` section \n  to push the code to the git repo.\n\n  ![New Git repo](./images/newgitrepo.png)\n\n- Navigate to the inventory-management-bff application on your terminal.Run the following command to install the client as a npm package:\n\n  ```bash\n     npm install <javascript_client_gitrepo_url>\n  ```\n  Ex- npm install https://github.com/RamyaRaghuveera/template_spring_boot\n\n- Go to the the Getting Started section of README.md and execute the JS to call the `/stock_items` API of inventory-management-solution \n  and test it.\n\n\n\n\n\n\n\n\n","type":"Mdx","contentDigest":"2e75722248edbe27f7140f6fd2411ee8","owner":"gatsby-plugin-mdx","counter":969},"frontmatter":{"title":"Swagger & Open API","description":"Swagger & Open API"},"exports":{},"rawBody":"---\ntitle: Swagger & Open API                                                                                 \ndescription: Swagger & Open API\n---\n\nTesting of Web APIs has been always a challenge as it exposes its endpoints rather than showing a UI. Testing Web APIs have a dependency on third-party tools like PostMan.\nSwagger resolves this by providing a UI representation of the RESTful APIs without any implementation logic. Swagger generates UI using the OpenAPI specification (swagger.json) \nbased on service and code.Swagger.json describes capabilities of service.\n\n### Activities\n\nOpen API specification document can be manually written using a tool like Swagger editor or even auto-generated through code.\nFor,almost all our base code patterns (other than Node-Angular and Node-react ), API specification is auto-generated from code.\nLets take the example of [inventory-management-bff](https://github.com/ibm-gsi-ecosystem/inventory-management-bff-solution) to see how OpenAPI specification document can be auto-generated from code.\nInventory-bff is written in typescript. \n- npm package [\"typescript-rest-swagger\"](https://www.npmjs.com/package/typescript-rest-swagger) is used to create the OpenAPI specification in this typescript project.\n- Usage: swaggerGen -c ./swagger.config.json \n- swagger.config.json file contains all the settings about the swagger generation.\n- In inventory-bff-solution, this is run as a post-build script through package.json:\n  \n  ```bash\n     package.json\n     \"postbuild\": \"npm run swagger\",\n     \"swagger\": \"swaggerGen -c ./swagger.config.json\"\n  ```\n  \n  ```bash\n     swagger.config.json\n     {\n      \"swagger\": {\n        \"basePath\": \"\",\n        \"outputDirectory\": \"./dist\",\n        \"entryFile\": \"./src/controllers/index.ts\",\n        \"produces\": [\n          \"application/json\"\n        ]\n       }\n      }\n  ```\n- postbuild script runs after `npm run build` and creates the swagger.json in the dist folder which is created as result of build.\n\n- /api-docs endpoint of inventory-management-bff uses the swagger.json to create the Swagger documentation of inventory-management-bff solution.It is referenced in `server.ts` file as shown below:\n ```bash \n      server.ts\n      const swaggerPath = join(process.cwd(), 'dist/swagger.json');\n      if (existsSync(swaggerPath)) {\n        Server.swagger(\n          apiRouter,\n          {\n            filePath: swaggerPath,\n            schemes: this.swaggerProtocols,\n            host: this.swaggerHost,\n            endpoint: '/api-docs'\n          },\n        );\n      }\n  ```\n  ![Inventory-bff APIDocs](./images/invbff_openapi.png)\n  \n### Give it a try\n\nSwagger API editor along with Swagger codegen simplifies your build process by giving you the option of creating server-stubs and client SDKs for any API,defined with the OpenAPI specification.\n\nSwagger API editor is available as part of Cloudnative toolkit.\n\nAs a part of this exercise, we will be creating a client SDK for [inventory-management-svc](https://github.com/ibm-gsi-ecosystem/inventory-management-svc-solution) application which will be consumed by another microservice.\n\n- You would have run the [inventory application] as part of [Developer Intermediate journey].\n  Login to the openshift cluster on the terminal where you had completed your inventory application and run the following command:\n\n  ```bash\n   oc get route -n <your_inventory_appln_namespace>\n  ```\nwhere <your_inventory_appln_namespace> is the namespace where you ran your inventory application.\n  \n  ![oc get route](./images/openapi-practical.png)\n\n\n- Copy the inventory-management-svc-solution application's route URL and paste it in a browser tab.\n  UI would look something like this:\n\n   ![Inventory Service Webscreen](./images/inv-mgmt-svc_ui.png)\n\n- Click on the api-docs link which will open a new-tab with the OpenAPI specification json file. Copy the whole json.\n\n- Go to the 9-square square icon on the top of your openshift web console.Select Swagger Editor to open the Swagger Editor application.\n\n- Clear the content on the left side of the Swagger editor and paste the json you had copied from api-docs URL in the previous step.\n  While copying, the following pop-up will appear to convert json to YAML.Click on \"OK\"\n\n  ![JSONtoYAML](./images/convertjsontoyaml.png)\n\n- Once openAPI specification is successfully pasted, you will be able to see Swagger UI for the API on the right side.\n \n  ![swaggereditor](./images/swaggereditor.png)\n\n- You have the option to generate server and client SDKs in around 20 different languages.\n  inventory-svc-application is consumed by inventory-bff-application.Hence, we will create a javascript client.\n\n   ![javascriptclient](./images/javascript_client.png)\n\n- The client sdk will look something like this:\n  \n  ![Javascript Client Git](./images/javascriptclient_git.png)\n\n- As mentioned in the README.md, create a git repo for the javascript client you just created and push the code to the repository.\n  Create a new git repo on your github account and follow the instructions under `create a new repository on the command line` section \n  to push the code to the git repo.\n\n  ![New Git repo](./images/newgitrepo.png)\n\n- Navigate to the inventory-management-bff application on your terminal.Run the following command to install the client as a npm package:\n\n  ```bash\n     npm install <javascript_client_gitrepo_url>\n  ```\n  Ex- npm install https://github.com/RamyaRaghuveera/template_spring_boot\n\n- Go to the the Getting Started section of README.md and execute the JS to call the `/stock_items` API of inventory-management-solution \n  and test it.\n\n\n\n\n\n\n\n\n","fileAbsolutePath":"/workspace/ibm-gsi-cloudnative-journey/src/pages/developer-advanced-1/swagger-and-openapi-handson/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}