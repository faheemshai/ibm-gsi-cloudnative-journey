{"componentChunkName":"component---src-pages-developer-advanced-1-inventory-contract-testing-index-mdx","path":"/developer-advanced-1/inventory-contract-testing/","result":{"pageContext":{"frontmatter":{"title":"Inventory Contract Testing"},"relativePagePath":"/developer-advanced-1/inventory-contract-testing/index.mdx","titleType":"page","MdxNode":{"id":"44639abc-c3bd-5c9f-8db8-8d9ff74e1cde","children":[],"parent":"d115beef-0fb0-5a66-8c68-f98f3c75c015","internal":{"content":"---\ntitle: Inventory Contract Testing\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\nWe have already explained why we need contract-testing and how it works, In this guide, we would implement contract-testing in the Inventory application. In the inventory application, inventory-Service provides stock items and works as a provider, and Inventory BFF works as a consumer. Microservices work in isolation, and it is the consumer’s responsibility to generate contact and the pact-broker responsibility to verify response for the given request. In this guide, we will explain how to generate a contract(Pact).\n\nWe will use a readymade inventory BFF application, which we have developed in the developer Intermediate guide and implement contract-testing on top of it.        \n\nTo start with, we have to create a pact by providing parameters like consumer, provider, port, log, dir.\n\nWe can take consumerName from package.json\n```\nconst consumerName = npmPackage.name;\n```\nWe can provide a provider name, for inventory application inventory-management-svc is the provider.\n```\nprovider: 'inventory-management-svc',\n```\nNext we have to provide log, and pacts directory, contract would be stored in pacts directory. \n```\nlog: resolve(process.cwd(), \"logs\", \"pact.log\"),\ndir: resolve(process.cwd(), \"pacts\"),\n```\nHere is code with pact setup. Delay of 30000 added for local testing, though for cluster deployment it is not required.\n```\nbeforeAll(() => {\n    provider = new Pact({\n      consumer: consumerName,\n      provider: 'inventory-management-svc',      \n      port,\n      log: resolve(process.cwd(), \"logs\", \"pact.log\"),\n      dir: resolve(process.cwd(), \"pacts\"),\n    });\n    console.log(\"in before all, provider setup\");\n    return provider.setup();\n  },30000);\n```\nAn instance of the component that will be tested is loaded and configured with the pact server host and port as the base url.\n```\nlet classUnderTest: StockItemsApi;\n  beforeEach(() => {    \n    Container.bind(StockItemServiceConfig).factory(() => ({\n        baseUrl: `http://localhost:${port}`\n        \n      }));\n\n    classUnderTest = Container.get(StockItemsApi);\n  });\n ```\n\nAdd expected result\n```\nconst expectedResult: BackendStockItem = {\n        id: '1234',\n        manufacturer: 'My manufacturer',\n        name: 'product name',\n        price: 20.0,\n        stock: 1000\n};\n```\nHere is the add interaction, which publishes the interaction to the Pact server so that it can be used to provide a mock response when the request is made.\n``` \nbeforeEach(() => {        \n        return provider.addInteraction({\n          state: 'base state',\n          uponReceiving: 'a request for stock items',\n          withRequest: {\n            method: 'GET',\n            path: '/stock-items',\n            headers: {\n              'Accept': 'application/json',\n            }\n          },\n          willRespondWith: {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: Matchers.eachLike(expectedResult),\n          }\n        });\n      });\n```\nHere is the test, that matched each and every attribute of response with expected result.\n```\ntest('should return inventory data', async () => {\n        const result = await classUnderTest.listStockItems();\n\n        expect(result).toEqual([{\n          id: expectedResult.id,\n          name: expectedResult.name,\n          description: expectedResult.name,\n          stock: expectedResult.stock,\n          unitPrice: expectedResult.price,\n          manufacturer: expectedResult.manufacturer,\n          picture: 'https://via.placeholder.com/32.png',\n        }]);\n      });\n```\nHere is the final code for contract testing.\n```\nimport {join, resolve} from 'path';\nimport {Container} from 'typescript-ioc';\nimport {Matchers, Pact} from '@pact-foundation/pact';\n\nimport {StockItemsApi} from '../../src/services';\nimport {StockItemServiceConfig} from '../../src/config';\nimport {BackendStockItem} from '../../src/services/stock-items.service';\n\nconst npmPackage = require(join(process.cwd(), 'package.json'));\n\nconst consumerName = npmPackage.name;\n\ndescribe('stock-items.service', () => {\n  test('canary verifies test infrastructure', () => {\n    console.log(\"in test infrastructure\");\n    expect(true).toEqual(true);\n  });\n\n  const port = 1235;\n  let provider: Pact;\n  beforeAll(() => {\n    provider = new Pact({\n      consumer: consumerName,\n      provider: 'inventory-management-svc',\n      //provider: 'inventory-management-svc-solution-yks',      \n      port,\n      log: resolve(process.cwd(), \"logs\", \"pact.log\"),\n      dir: resolve(process.cwd(), \"pacts\"),\n    });\n    console.log(\"in before all, provider setup\");\n    return provider.setup();\n  },30000);\n\n  let classUnderTest: StockItemsApi;\n  beforeEach(() => {\n    console.log(\"in before each---35\");\n    Container.bind(StockItemServiceConfig).factory(() => ({\n        baseUrl: `http://localhost:${port}`\n        \n      }));\n\n    classUnderTest = Container.get(StockItemsApi);\n  });\n\n  afterAll(() => {\n    console.log(\"in afterAll, going to finalize\");    \n    return provider.finalize();\n  });\n\n  \n\n  context('given listStockItems()', () => {\n    context('when called', () => {\n      \n      const expectedResult: BackendStockItem = {\n        id: '1234',\n        manufacturer: 'My manufacturer',\n        name: 'product name',\n        price: 20.0,\n        stock: 1000\n      };\n\n      beforeEach(() => {\n        console.log(\"in before each\"+ provider.server);\n        return provider.addInteraction({\n          state: 'base state',\n          uponReceiving: 'a request for stock items',\n          withRequest: {\n            method: 'GET',\n            path: '/stock-items',\n            headers: {\n              'Accept': 'application/json',\n            }\n          },\n          willRespondWith: {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: Matchers.eachLike(expectedResult),\n          }\n        });\n      });\n\n      test('should return inventory data', async () => {\n        const result = await classUnderTest.listStockItems();\n\n        expect(result).toEqual([{\n          id: expectedResult.id,\n          name: expectedResult.name,\n          description: expectedResult.name,\n          stock: expectedResult.stock,\n          unitPrice: expectedResult.price,\n          manufacturer: expectedResult.manufacturer,\n          picture: 'https://via.placeholder.com/32.png',\n        }]);\n      });\n\n      afterEach(() => {\n        return provider.verify();\n      });\n    });\n  });\n});\n```\nHere is the example of contract:\n\n##A pact between inventory-management-bff and inventory-management-svc\nRequests from inventory-management-bff to inventory-management-svc\n\nA request for stock items given base state\n\n## Interactions\n```\nGiven base state, upon receiving a request for stock items from graphql-ts-yks, with\n{\n  \"method\": \"GET\",\n  \"path\": \"/stock-items\",\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  }\n}\n```\ninventory-management-svc will respond with:\n```\n{\n  \"status\": 200,\n  \"headers\": {\n    \"Content-Type\": \"application/json\"\n  },\n  \"body\": [\n    {\n      \"id\": \"1234\",\n      \"manufacturer\": \"My manufacturer\",\n      \"name\": \"product name\",\n      \"price\": 20,\n      \"stock\": 1000\n    }\n  ]\n}\n```\n\n\n\n\n\n\n\n\n\n\n","type":"Mdx","contentDigest":"834f57a5c057f98f97ab5877390ea0d7","owner":"gatsby-plugin-mdx","counter":985},"frontmatter":{"title":"Inventory Contract Testing"},"exports":{},"rawBody":"---\ntitle: Inventory Contract Testing\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\nWe have already explained why we need contract-testing and how it works, In this guide, we would implement contract-testing in the Inventory application. In the inventory application, inventory-Service provides stock items and works as a provider, and Inventory BFF works as a consumer. Microservices work in isolation, and it is the consumer’s responsibility to generate contact and the pact-broker responsibility to verify response for the given request. In this guide, we will explain how to generate a contract(Pact).\n\nWe will use a readymade inventory BFF application, which we have developed in the developer Intermediate guide and implement contract-testing on top of it.        \n\nTo start with, we have to create a pact by providing parameters like consumer, provider, port, log, dir.\n\nWe can take consumerName from package.json\n```\nconst consumerName = npmPackage.name;\n```\nWe can provide a provider name, for inventory application inventory-management-svc is the provider.\n```\nprovider: 'inventory-management-svc',\n```\nNext we have to provide log, and pacts directory, contract would be stored in pacts directory. \n```\nlog: resolve(process.cwd(), \"logs\", \"pact.log\"),\ndir: resolve(process.cwd(), \"pacts\"),\n```\nHere is code with pact setup. Delay of 30000 added for local testing, though for cluster deployment it is not required.\n```\nbeforeAll(() => {\n    provider = new Pact({\n      consumer: consumerName,\n      provider: 'inventory-management-svc',      \n      port,\n      log: resolve(process.cwd(), \"logs\", \"pact.log\"),\n      dir: resolve(process.cwd(), \"pacts\"),\n    });\n    console.log(\"in before all, provider setup\");\n    return provider.setup();\n  },30000);\n```\nAn instance of the component that will be tested is loaded and configured with the pact server host and port as the base url.\n```\nlet classUnderTest: StockItemsApi;\n  beforeEach(() => {    \n    Container.bind(StockItemServiceConfig).factory(() => ({\n        baseUrl: `http://localhost:${port}`\n        \n      }));\n\n    classUnderTest = Container.get(StockItemsApi);\n  });\n ```\n\nAdd expected result\n```\nconst expectedResult: BackendStockItem = {\n        id: '1234',\n        manufacturer: 'My manufacturer',\n        name: 'product name',\n        price: 20.0,\n        stock: 1000\n};\n```\nHere is the add interaction, which publishes the interaction to the Pact server so that it can be used to provide a mock response when the request is made.\n``` \nbeforeEach(() => {        \n        return provider.addInteraction({\n          state: 'base state',\n          uponReceiving: 'a request for stock items',\n          withRequest: {\n            method: 'GET',\n            path: '/stock-items',\n            headers: {\n              'Accept': 'application/json',\n            }\n          },\n          willRespondWith: {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: Matchers.eachLike(expectedResult),\n          }\n        });\n      });\n```\nHere is the test, that matched each and every attribute of response with expected result.\n```\ntest('should return inventory data', async () => {\n        const result = await classUnderTest.listStockItems();\n\n        expect(result).toEqual([{\n          id: expectedResult.id,\n          name: expectedResult.name,\n          description: expectedResult.name,\n          stock: expectedResult.stock,\n          unitPrice: expectedResult.price,\n          manufacturer: expectedResult.manufacturer,\n          picture: 'https://via.placeholder.com/32.png',\n        }]);\n      });\n```\nHere is the final code for contract testing.\n```\nimport {join, resolve} from 'path';\nimport {Container} from 'typescript-ioc';\nimport {Matchers, Pact} from '@pact-foundation/pact';\n\nimport {StockItemsApi} from '../../src/services';\nimport {StockItemServiceConfig} from '../../src/config';\nimport {BackendStockItem} from '../../src/services/stock-items.service';\n\nconst npmPackage = require(join(process.cwd(), 'package.json'));\n\nconst consumerName = npmPackage.name;\n\ndescribe('stock-items.service', () => {\n  test('canary verifies test infrastructure', () => {\n    console.log(\"in test infrastructure\");\n    expect(true).toEqual(true);\n  });\n\n  const port = 1235;\n  let provider: Pact;\n  beforeAll(() => {\n    provider = new Pact({\n      consumer: consumerName,\n      provider: 'inventory-management-svc',\n      //provider: 'inventory-management-svc-solution-yks',      \n      port,\n      log: resolve(process.cwd(), \"logs\", \"pact.log\"),\n      dir: resolve(process.cwd(), \"pacts\"),\n    });\n    console.log(\"in before all, provider setup\");\n    return provider.setup();\n  },30000);\n\n  let classUnderTest: StockItemsApi;\n  beforeEach(() => {\n    console.log(\"in before each---35\");\n    Container.bind(StockItemServiceConfig).factory(() => ({\n        baseUrl: `http://localhost:${port}`\n        \n      }));\n\n    classUnderTest = Container.get(StockItemsApi);\n  });\n\n  afterAll(() => {\n    console.log(\"in afterAll, going to finalize\");    \n    return provider.finalize();\n  });\n\n  \n\n  context('given listStockItems()', () => {\n    context('when called', () => {\n      \n      const expectedResult: BackendStockItem = {\n        id: '1234',\n        manufacturer: 'My manufacturer',\n        name: 'product name',\n        price: 20.0,\n        stock: 1000\n      };\n\n      beforeEach(() => {\n        console.log(\"in before each\"+ provider.server);\n        return provider.addInteraction({\n          state: 'base state',\n          uponReceiving: 'a request for stock items',\n          withRequest: {\n            method: 'GET',\n            path: '/stock-items',\n            headers: {\n              'Accept': 'application/json',\n            }\n          },\n          willRespondWith: {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: Matchers.eachLike(expectedResult),\n          }\n        });\n      });\n\n      test('should return inventory data', async () => {\n        const result = await classUnderTest.listStockItems();\n\n        expect(result).toEqual([{\n          id: expectedResult.id,\n          name: expectedResult.name,\n          description: expectedResult.name,\n          stock: expectedResult.stock,\n          unitPrice: expectedResult.price,\n          manufacturer: expectedResult.manufacturer,\n          picture: 'https://via.placeholder.com/32.png',\n        }]);\n      });\n\n      afterEach(() => {\n        return provider.verify();\n      });\n    });\n  });\n});\n```\nHere is the example of contract:\n\n##A pact between inventory-management-bff and inventory-management-svc\nRequests from inventory-management-bff to inventory-management-svc\n\nA request for stock items given base state\n\n## Interactions\n```\nGiven base state, upon receiving a request for stock items from graphql-ts-yks, with\n{\n  \"method\": \"GET\",\n  \"path\": \"/stock-items\",\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  }\n}\n```\ninventory-management-svc will respond with:\n```\n{\n  \"status\": 200,\n  \"headers\": {\n    \"Content-Type\": \"application/json\"\n  },\n  \"body\": [\n    {\n      \"id\": \"1234\",\n      \"manufacturer\": \"My manufacturer\",\n      \"name\": \"product name\",\n      \"price\": 20,\n      \"stock\": 1000\n    }\n  ]\n}\n```\n\n\n\n\n\n\n\n\n\n\n","fileAbsolutePath":"/workspace/ibm-gsi-cloudnative-journey/src/pages/developer-advanced-1/inventory-contract-testing/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}