{"componentChunkName":"component---src-pages-developer-advanced-1-inventory-appid-index-mdx","path":"/developer-advanced-1/inventory-appid/","result":{"pageContext":{"frontmatter":{"title":"Authentication with App ID"},"relativePagePath":"/developer-advanced-1/inventory-appid/index.mdx","titleType":"page","MdxNode":{"id":"074b10fa-480e-58b1-8688-9519058ec3bf","children":[],"parent":"3aaaf575-84bf-514b-b0b3-f64832fdb895","internal":{"content":"---\ntitle: Authentication with App ID\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nSecuring Inventory App with App ID\n\n</PageDescription>\n\nTo secure the application we are using the capabilities available within the IBM Cloud platform to enable integration with AppId.With Openshift 3.11,\na simple annotation was used on the ingress to enable Appid.In Openshift 4.x,Red Hat OpenShift on IBM Cloud annotations (ingress.bluemix.net/[annotation]) \nand NGINX annotations (nginx.ingress.kubernetes.io/[annotation_name]) are not supported for the router or the Ingress resource. With Openshift 4.x,AppId \nintegration is enabled with SDKs.\n\n## Prerequisites\n\nThe following prerequisites are required for AppId integration:\n- An instance of the App ID service:\n  In IBM Cloud Dashboard, go to \"Services\" and select the AppId instance.\n  \n  ![AppId Service](images/AppIdIntegration01.png)\n\n- A set of service credentials:\n    - In AppId instance, go to \"Application\". \n    - Click on \"Add application\".\n    - Enter your application name \n    - Select the type as Regular web application.\n    - Click on Save to create the service credentials for your application.\n   \n    ![AppId Credentials Creation](images/AppIdInt02a.png)\n\n    - After saving, your application credentials will get created.Click on the down Arrow at \n    the left end of your application name and get the credentials.\n    \n    ![AppId Credentials Creation](images/AppidInt03.png)\n    \n\n- NPM version 4 or higher.\n- Node version 6 or higher.\n\n\n### Enable Appid in the solution\n\n#### Installation\n-   By using the command line, change to the directory that contains your Node.js app.\n-   Install the AppID service and other dependencies.\n    ```bash\n    npm install --save ibmcloud-appid\n    npm install --save passport\n    npm install --save express-session\n    ```\n-  Obtain your credentials by navigating to the <b>Applications</b> tab of the AppId dashboard as mentioned in [Prerequisites](#prerequisites).\n\n-  Obtain the application as mentioned in [AppId Redirect Url Config](#appid-redirect-url-config).\n\n#### Create binding secret for appid in your namespace\n- Login to the IBM Cloud cluster where your workshop-team-one ocp cluster resides.\n  ibmcloud login -u [username] -p [password]\n- Login to your ocp cluster using the oc cli.\n\n   ![Openshift cli login Page](images/ocp-cli-login.png)\n\n    - Click on \"Copy Login Command\". It will redirect to a new page.\n    - Click the display token link. Copy the \"Log in with this token\" command & login \n      to oc cli.\n      Ex- oc login --token=sha256~bfGcq7l6H3JHd9GwbNRaSsJ7cDAiLK5EPF4tbPQ-WfY --server=https://c108-e.eu-gb.containers.cloud.ibm.com:31718\n\n- Navigate to your namespace where you are running the inventory solution pipeline and create the binding secret for He the Appid instance on the cloud account\n  ```bash \n     oc project [proj_name]\n     ibmcloud oc cluster service bind --cluster workshop-team-one \n     --namespace [YOUR-NAMESPACE] --service workshop-team-one-appid\n  ```\n\n\n#### Update the configuration values in the configuration files\n-  Put these credentials in <i>server/config/mappings.json</i> to be referred by application:\n   ```bash\n    {\n    \"APPID_CONFIG\": \"\"{\\\"tenantId\\\":\\\"<tenantId_value>\\\",\\\"oauthServerUrl\\\":\\\"<oauthServer_URL>\\\",\\\"clientId\\\": \\\"<ClientID_value>\\\", \\\"secret\\\": \\\"<secret_value>\\\"}\",\n    \"application_url\":\"<openshift_appln_route_url>\"\n    }\n    ```\n\n- Add the following parameters in `values.yaml` along with its values:\n\n   ```bash\n    appidBinding: \"binding-workshop-team-one-appid\"\n    \n    ```\n  \n\n#### Adding the dependencies\n- Add the following <i>require</i> definitions to your `server/server.js`:\n\n    ```bash\n    const express = require('express');\n    const session = require('express-session')\n    const passport = require('passport');\n    const WebAppStrategy = require(\"ibmcloud-appid\").WebAppStrategy;\n    const CALLBACK_URL = \"/ibm/cloud/appid/callback\";\n    const appidConfig = require(\"./config/mappings.json\");\n    ```\n\n#### Activate the appid integration\n- In <i>server.js</i>,set up your express app to use express-session middleware.\n\n    ```bash\n    const app = express();\n    app.use(session({\n            secret: appidConfig.secret,\n            resave: true,\n            saveUninitialized: true\n        }));\n    app.use(passport.initialize());\n    app.use(passport.session());\n    ```\n\n- In the same file,initialize the SDK using the information obtained in the previous steps.\n   ```bash\n    var appidcfg=JSON.parse(appidConfig.APPID_CONFIG);\n    passport.use(new WebAppStrategy({\n    tenantId: appidcfg.tenantId,\n    clientId: appidConfig.client_id,\n    secret: appidConfig.secret,\n    oauthServerUrl: appidcfg.oauthServerUrl,\n    redirectUri: appidConfig.application_url+CALLBACK_URL\n    }));\n    ```\n\n-   In the same file,configure passport with serialization and deserialization. This configuration step is required for authenticated session persistence across HTTP requests. For more information, see the [passport docs](http://www.passportjs.org/docs/)\n    ```bash\n    passport.serializeUser(function(user, cb) {\n    cb(null, user);\n    });\n    passport.deserializeUser(function(obj, cb) {\n    cb(null, obj);\n    });\n    ```\n\n-   Add the following code to your <i>server.js</i> to issue the service redirects.\n    ```bash\n    app.get(CALLBACK_URL, passport.authenticate(WebAppStrategy.STRATEGY_NAME));\n    app.use(passport.authenticate(WebAppStrategy.STRATEGY_NAME ));\n    ```    \n\n#### Adding environment variables to `deployment.yaml`\n- Open the `deployment.yaml` file and add environment variables that use those values to the top of the existing `env` block:\n  ```bash\n    - name: APPID_CONFIG\n      valueFrom:\n         secretKeyRef:\n            name: {{ .Values.appidBinding | quote }}\n            key: binding\n    - name: APP_URI\n      valueFrom:\n        configMapKeyRef:\n          name: appid-ui\n          key: route\n  ``` \n\n### AppId redirect url config\n\n- Get the ingress for the UI component by running `igc ingress -n dev-{initials}`.\n\n- Open the IBM Cloud resource list - `https://cloud.ibm.com/resources`\n\n- Open the AppId instance to the `Manage Authentication` -> `Authentication Settings` view\n\n    ![AppId authentication settings](images/appid-authentication-settings.png)\n\n- Add the redirect url for the application to the web redirect URLs. The redirect url will have\nthe following form:\n\n    `{ingress url}/ibm/cloud/appid/callback`\n    \n    e.g. `https://inventory-manangement-ui-dev.sms-test-oc-cluster.us-east.containers.appdomain.cloud/ibm/cloud/appid/callback`\n\n### Add users to AppId\n\n- Open the AppId instance to `Cloud Directory` -> `Users`\n\n    ![AppId cloud directory users](images/appid-cloud-directory-users.png)\n\n- Add yourself as a user with an email address, name, and password#\n\n### Access the UI\n\n- Open a browser to the UI Application URL\n\n- You should be met with the AppId login screen. (This screen can be customized from the AppId service console but for now we are showing the default screen.)\n\n     ![AppId Login Page](images/AppidLogin.png)\n\n- Provide the email address and password you configured in the previous steps. You should be granted access to the UI.\n\nPrebuilt solution for this can be found here: [Inventory Management UI Appid solution template](https://github.com/ibm-gsi-ecosystem/inventory-management-ui-soln-advanced.git)","type":"Mdx","contentDigest":"30edf2983b12544126e14e3ddd64901b","owner":"gatsby-plugin-mdx","counter":969},"frontmatter":{"title":"Authentication with App ID"},"exports":{},"rawBody":"---\ntitle: Authentication with App ID\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nSecuring Inventory App with App ID\n\n</PageDescription>\n\nTo secure the application we are using the capabilities available within the IBM Cloud platform to enable integration with AppId.With Openshift 3.11,\na simple annotation was used on the ingress to enable Appid.In Openshift 4.x,Red Hat OpenShift on IBM Cloud annotations (ingress.bluemix.net/[annotation]) \nand NGINX annotations (nginx.ingress.kubernetes.io/[annotation_name]) are not supported for the router or the Ingress resource. With Openshift 4.x,AppId \nintegration is enabled with SDKs.\n\n## Prerequisites\n\nThe following prerequisites are required for AppId integration:\n- An instance of the App ID service:\n  In IBM Cloud Dashboard, go to \"Services\" and select the AppId instance.\n  \n  ![AppId Service](images/AppIdIntegration01.png)\n\n- A set of service credentials:\n    - In AppId instance, go to \"Application\". \n    - Click on \"Add application\".\n    - Enter your application name \n    - Select the type as Regular web application.\n    - Click on Save to create the service credentials for your application.\n   \n    ![AppId Credentials Creation](images/AppIdInt02a.png)\n\n    - After saving, your application credentials will get created.Click on the down Arrow at \n    the left end of your application name and get the credentials.\n    \n    ![AppId Credentials Creation](images/AppidInt03.png)\n    \n\n- NPM version 4 or higher.\n- Node version 6 or higher.\n\n\n### Enable Appid in the solution\n\n#### Installation\n-   By using the command line, change to the directory that contains your Node.js app.\n-   Install the AppID service and other dependencies.\n    ```bash\n    npm install --save ibmcloud-appid\n    npm install --save passport\n    npm install --save express-session\n    ```\n-  Obtain your credentials by navigating to the <b>Applications</b> tab of the AppId dashboard as mentioned in [Prerequisites](#prerequisites).\n\n-  Obtain the application as mentioned in [AppId Redirect Url Config](#appid-redirect-url-config).\n\n#### Create binding secret for appid in your namespace\n- Login to the IBM Cloud cluster where your workshop-team-one ocp cluster resides.\n  ibmcloud login -u [username] -p [password]\n- Login to your ocp cluster using the oc cli.\n\n   ![Openshift cli login Page](images/ocp-cli-login.png)\n\n    - Click on \"Copy Login Command\". It will redirect to a new page.\n    - Click the display token link. Copy the \"Log in with this token\" command & login \n      to oc cli.\n      Ex- oc login --token=sha256~bfGcq7l6H3JHd9GwbNRaSsJ7cDAiLK5EPF4tbPQ-WfY --server=https://c108-e.eu-gb.containers.cloud.ibm.com:31718\n\n- Navigate to your namespace where you are running the inventory solution pipeline and create the binding secret for He the Appid instance on the cloud account\n  ```bash \n     oc project [proj_name]\n     ibmcloud oc cluster service bind --cluster workshop-team-one \n     --namespace [YOUR-NAMESPACE] --service workshop-team-one-appid\n  ```\n\n\n#### Update the configuration values in the configuration files\n-  Put these credentials in <i>server/config/mappings.json</i> to be referred by application:\n   ```bash\n    {\n    \"APPID_CONFIG\": \"\"{\\\"tenantId\\\":\\\"<tenantId_value>\\\",\\\"oauthServerUrl\\\":\\\"<oauthServer_URL>\\\",\\\"clientId\\\": \\\"<ClientID_value>\\\", \\\"secret\\\": \\\"<secret_value>\\\"}\",\n    \"application_url\":\"<openshift_appln_route_url>\"\n    }\n    ```\n\n- Add the following parameters in `values.yaml` along with its values:\n\n   ```bash\n    appidBinding: \"binding-workshop-team-one-appid\"\n    \n    ```\n  \n\n#### Adding the dependencies\n- Add the following <i>require</i> definitions to your `server/server.js`:\n\n    ```bash\n    const express = require('express');\n    const session = require('express-session')\n    const passport = require('passport');\n    const WebAppStrategy = require(\"ibmcloud-appid\").WebAppStrategy;\n    const CALLBACK_URL = \"/ibm/cloud/appid/callback\";\n    const appidConfig = require(\"./config/mappings.json\");\n    ```\n\n#### Activate the appid integration\n- In <i>server.js</i>,set up your express app to use express-session middleware.\n\n    ```bash\n    const app = express();\n    app.use(session({\n            secret: appidConfig.secret,\n            resave: true,\n            saveUninitialized: true\n        }));\n    app.use(passport.initialize());\n    app.use(passport.session());\n    ```\n\n- In the same file,initialize the SDK using the information obtained in the previous steps.\n   ```bash\n    var appidcfg=JSON.parse(appidConfig.APPID_CONFIG);\n    passport.use(new WebAppStrategy({\n    tenantId: appidcfg.tenantId,\n    clientId: appidConfig.client_id,\n    secret: appidConfig.secret,\n    oauthServerUrl: appidcfg.oauthServerUrl,\n    redirectUri: appidConfig.application_url+CALLBACK_URL\n    }));\n    ```\n\n-   In the same file,configure passport with serialization and deserialization. This configuration step is required for authenticated session persistence across HTTP requests. For more information, see the [passport docs](http://www.passportjs.org/docs/)\n    ```bash\n    passport.serializeUser(function(user, cb) {\n    cb(null, user);\n    });\n    passport.deserializeUser(function(obj, cb) {\n    cb(null, obj);\n    });\n    ```\n\n-   Add the following code to your <i>server.js</i> to issue the service redirects.\n    ```bash\n    app.get(CALLBACK_URL, passport.authenticate(WebAppStrategy.STRATEGY_NAME));\n    app.use(passport.authenticate(WebAppStrategy.STRATEGY_NAME ));\n    ```    \n\n#### Adding environment variables to `deployment.yaml`\n- Open the `deployment.yaml` file and add environment variables that use those values to the top of the existing `env` block:\n  ```bash\n    - name: APPID_CONFIG\n      valueFrom:\n         secretKeyRef:\n            name: {{ .Values.appidBinding | quote }}\n            key: binding\n    - name: APP_URI\n      valueFrom:\n        configMapKeyRef:\n          name: appid-ui\n          key: route\n  ``` \n\n### AppId redirect url config\n\n- Get the ingress for the UI component by running `igc ingress -n dev-{initials}`.\n\n- Open the IBM Cloud resource list - `https://cloud.ibm.com/resources`\n\n- Open the AppId instance to the `Manage Authentication` -> `Authentication Settings` view\n\n    ![AppId authentication settings](images/appid-authentication-settings.png)\n\n- Add the redirect url for the application to the web redirect URLs. The redirect url will have\nthe following form:\n\n    `{ingress url}/ibm/cloud/appid/callback`\n    \n    e.g. `https://inventory-manangement-ui-dev.sms-test-oc-cluster.us-east.containers.appdomain.cloud/ibm/cloud/appid/callback`\n\n### Add users to AppId\n\n- Open the AppId instance to `Cloud Directory` -> `Users`\n\n    ![AppId cloud directory users](images/appid-cloud-directory-users.png)\n\n- Add yourself as a user with an email address, name, and password#\n\n### Access the UI\n\n- Open a browser to the UI Application URL\n\n- You should be met with the AppId login screen. (This screen can be customized from the AppId service console but for now we are showing the default screen.)\n\n     ![AppId Login Page](images/AppidLogin.png)\n\n- Provide the email address and password you configured in the previous steps. You should be granted access to the UI.\n\nPrebuilt solution for this can be found here: [Inventory Management UI Appid solution template](https://github.com/ibm-gsi-ecosystem/inventory-management-ui-soln-advanced.git)","fileAbsolutePath":"/workspace/ibm-gsi-cloudnative-journey/src/pages/developer-advanced-1/inventory-appid/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","3273249464","768070550"]}